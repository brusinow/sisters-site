var timerModule=angular.module("timer",[]).directive("timer",["$compile",function($compile){return{restrict:"EA",replace:!1,scope:{interval:"=interval",startTimeAttr:"=startTime",endTimeAttr:"=endTime",countdownattr:"=countdown",finishCallback:"&finishCallback",autoStart:"&autoStart",language:"@?",fallback:"@?",maxTimeUnit:"=",seconds:"=?",minutes:"=?",hours:"=?",days:"=?",months:"=?",years:"=?",secondsS:"=?",minutesS:"=?",hoursS:"=?",daysS:"=?",monthsS:"=?",yearsS:"=?"},controller:["$scope","$element","$attrs","$timeout","I18nService","$interpolate","progressBarService",function($scope,$element,$attrs,$timeout,I18nService,$interpolate,progressBarService){function resetTimeout(){$scope.timeoutId&&clearTimeout($scope.timeoutId)}function calculateTimeUnits(){var timeUnits={};void 0!==$attrs.startTime&&($scope.millis=moment().diff(moment($scope.startTimeAttr))),timeUnits=i18nService.getTimeUnits($scope.millis),$scope.maxTimeUnit&&"day"!==$scope.maxTimeUnit?"second"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3),$scope.minutes=0,$scope.hours=0,$scope.days=0,$scope.months=0,$scope.years=0):"minute"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4),$scope.hours=0,$scope.days=0,$scope.months=0,$scope.years=0):"hour"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5),$scope.days=0,$scope.months=0,$scope.years=0):"month"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24%30),$scope.months=Math.floor($scope.millis/36e5/24/30),$scope.years=0):"year"===$scope.maxTimeUnit&&($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24%30),$scope.months=Math.floor($scope.millis/36e5/24/30%12),$scope.years=Math.floor($scope.millis/36e5/24/365)):($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24),$scope.months=0,$scope.years=0),$scope.secondsS=1===$scope.seconds?"":"s",$scope.minutesS=1===$scope.minutes?"":"s",$scope.hoursS=1===$scope.hours?"":"s",$scope.daysS=1===$scope.days?"":"s",$scope.monthsS=1===$scope.months?"":"s",$scope.yearsS=1===$scope.years?"":"s",$scope.secondUnit=timeUnits.seconds,$scope.minuteUnit=timeUnits.minutes,$scope.hourUnit=timeUnits.hours,$scope.dayUnit=timeUnits.days,$scope.monthUnit=timeUnits.months,$scope.yearUnit=timeUnits.years,$scope.sseconds=$scope.seconds<10?"0"+$scope.seconds:$scope.seconds,$scope.mminutes=$scope.minutes<10?"0"+$scope.minutes:$scope.minutes,$scope.hhours=$scope.hours<10?"0"+$scope.hours:$scope.hours,$scope.ddays=$scope.days<10?"0"+$scope.days:$scope.days,$scope.mmonths=$scope.months<10?"0"+$scope.months:$scope.months,$scope.yyears=$scope.years<10?"0"+$scope.years:$scope.years}"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),$scope.autoStart=$attrs.autoStart||$attrs.autostart,$scope.language=$scope.language||"en",$scope.fallback=$scope.fallback||"en",$scope.$watch("language",function(newVal,oldVal){void 0!==newVal&&i18nService.init(newVal,$scope.fallback)});var i18nService=new I18nService;i18nService.init($scope.language,$scope.fallback),$scope.displayProgressBar=0,$scope.displayProgressActive="active",0===$element.html().trim().length?$element.append($compile("<span>"+$interpolate.startSymbol()+"millis"+$interpolate.endSymbol()+"</span>")($scope)):$element.append($compile($element.contents())($scope)),$scope.startTime=null,$scope.endTime=null,$scope.timeoutId=null,$scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>=0?parseInt($scope.countdownattr,10):void 0,$scope.isRunning=!1,$scope.$on("timer-start",function(){$scope.start()}),$scope.$on("timer-resume",function(){$scope.resume()}),$scope.$on("timer-stop",function(){$scope.stop()}),$scope.$on("timer-clear",function(){$scope.clear()}),$scope.$on("timer-reset",function(){$scope.reset()}),$scope.$on("timer-set-countdown",function(e,countdown){$scope.countdown=countdown}),$scope.$watch("startTimeAttr",function(newValue,oldValue){newValue!==oldValue&&$scope.isRunning&&$scope.start()}),$scope.$watch("endTimeAttr",function(newValue,oldValue){newValue!==oldValue&&$scope.isRunning&&$scope.start()}),$scope.start=function(){$scope.startTime=$scope.startTimeAttr?moment($scope.startTimeAttr):moment(),$scope.endTime=$scope.endTimeAttr?moment($scope.endTimeAttr):null,angular.isNumber($scope.countdown)||($scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>0?parseInt($scope.countdownattr,10):void 0),resetTimeout(),tick(),$scope.isRunning=!0,$scope.$emit("timer-started",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.resume=function(){resetTimeout(),$scope.countdownattr&&($scope.countdown+=1),$scope.startTime=moment().diff(moment($scope.stoppedTime).diff(moment($scope.startTime))),tick(),$scope.isRunning=!0,$scope.$emit("timer-started",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.stop=$scope.pause=function(){var timeoutId=$scope.timeoutId;$scope.clear(),$scope.$emit("timer-stopped",{timeoutId:timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.clear=function(){$scope.stoppedTime=moment(),resetTimeout(),$scope.timeoutId=null,$scope.isRunning=!1},$scope.reset=function(){$scope.startTime=$scope.startTimeAttr?moment($scope.startTimeAttr):moment(),$scope.endTime=$scope.endTimeAttr?moment($scope.endTimeAttr):null,$scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>0?parseInt($scope.countdownattr,10):void 0,resetTimeout(),tick(),$scope.isRunning=!1,$scope.clear(),$scope.$emit("timer-reset",{timeoutId:timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$element.bind("$destroy",function(){resetTimeout(),$scope.isRunning=!1}),$scope.countdownattr?($scope.millis=1e3*$scope.countdownattr,$scope.addCDSeconds=function(extraSeconds){$scope.countdown+=extraSeconds,$scope.isRunning||$scope.start()},$scope.$on("timer-add-cd-seconds",function(e,extraSeconds){$scope.addCDSeconds(extraSeconds)}),$scope.$on("timer-set-countdown-seconds",function(e,countdownSeconds){$scope.isRunning||$scope.clear(),$scope.countdown=countdownSeconds,$scope.millis=1e3*countdownSeconds,calculateTimeUnits()})):$scope.millis=0,calculateTimeUnits();var tick=function tick(){var typeTimer=null;$scope.millis=moment().diff($scope.startTime);var adjustment=$scope.millis%1e3;if($scope.endTimeAttr&&(typeTimer=$scope.endTimeAttr,$scope.millis=moment($scope.endTime).diff(moment()),adjustment=$scope.interval-$scope.millis%1e3),$scope.countdownattr&&(typeTimer=$scope.countdownattr,$scope.millis=1e3*$scope.countdown),$scope.millis<0)return $scope.stop(),$scope.millis=0,calculateTimeUnits(),void($scope.finishCallback&&$scope.$eval($scope.finishCallback));calculateTimeUnits(),$scope.timeoutId=setTimeout(function(){tick(),$scope.$apply()},$scope.interval-adjustment),$scope.$emit("timer-tick",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days}),$scope.countdown>0?$scope.countdown--:$scope.countdown<=0&&($scope.stop(),$scope.finishCallback&&$scope.$eval($scope.finishCallback)),null!==typeTimer&&($scope.progressBar=progressBarService.calculateProgressBar($scope.startTime,$scope.millis,$scope.endTime,$scope.countdownattr),100===$scope.progressBar&&($scope.displayProgressActive=""))};void 0!==$scope.autoStart&&!0!==$scope.autoStart||$scope.start()}]}}]).directive("timerControls",function(){return{restrict:"EA",scope:!0,controller:["$scope",function($scope){$scope.timerStatus="reset",$scope.$on("timer-started",function(){$scope.timerStatus="started"}),$scope.$on("timer-stopped",function(){$scope.timerStatus="stopped"}),$scope.$on("timer-reset",function(){$scope.timerStatus="reset"}),$scope.timerStart=function(){$scope.$broadcast("timer-start")},$scope.timerStop=function(){$scope.$broadcast("timer-stop")},$scope.timerResume=function(){$scope.$broadcast("timer-resume")},$scope.timerToggle=function(){switch($scope.timerStatus){case"started":$scope.timerStop();break;case"stopped":$scope.timerResume();break;case"reset":$scope.timerStart()}},$scope.timerAddCDSeconds=function(extraSeconds){$scope.$broadcast("timer-add-cd-seconds",extraSeconds)}}]}});"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports=timerModule);var app=angular.module("timer");app.factory("I18nService",function(){var I18nService=function(){};return I18nService.prototype.language="en",I18nService.prototype.fallback="en",I18nService.prototype.timeHumanizer={},I18nService.prototype.init=function(lang,fallback){var supported_languages=humanizeDuration.getSupportedLanguages();this.fallback=void 0!==fallback?fallback:"en",-1===supported_languages.indexOf(fallback)&&(this.fallback="en"),this.language=lang,-1===supported_languages.indexOf(lang)&&(this.language=this.fallback),this.timeHumanizer=humanizeDuration.humanizer({language:this.language,halfUnit:!1})},I18nService.prototype.getTimeUnits=function(millis){var diffFromAlarm=1e3*Math.round(millis/1e3),time={};return void 0!==this.timeHumanizer?time={millis:this.timeHumanizer(diffFromAlarm,{units:["ms"]}),seconds:this.timeHumanizer(diffFromAlarm,{units:["s"]}),minutes:this.timeHumanizer(diffFromAlarm,{units:["m","s"]}),hours:this.timeHumanizer(diffFromAlarm,{units:["h","m","s"]}),days:this.timeHumanizer(diffFromAlarm,{units:["d","h","m","s"]}),months:this.timeHumanizer(diffFromAlarm,{units:["mo","d","h","m","s"]}),years:this.timeHumanizer(diffFromAlarm,{units:["y","mo","d","h","m","s"]})}:console.error('i18nService has not been initialized. You must call i18nService.init("en") for example'),time},I18nService});var app=angular.module("timer");app.factory("progressBarService",function(){var ProgressBarService=function(){};return ProgressBarService.prototype.calculateProgressBar=function(startValue,remainingTime,endTimeAttr,coutdown){var endTimeValue,initialCountdown,displayProgressBar=0;return remainingTime/=1e3,null!==endTimeAttr?(endTimeValue=moment(endTimeAttr),initialCountdown=endTimeValue.diff(startValue,"seconds"),displayProgressBar=100*remainingTime/initialCountdown):displayProgressBar=100*remainingTime/coutdown,displayProgressBar=100-displayProgressBar,displayProgressBar=Math.round(10*displayProgressBar)/10,displayProgressBar>100&&(displayProgressBar=100),displayProgressBar},new ProgressBarService});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
