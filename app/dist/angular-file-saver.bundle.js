!function(root,factory){if("object"==typeof exports&&"object"==typeof module)module.exports=factory();else if("function"==typeof define&&define.amd)define([],factory);else{var a=factory();for(var i in a)("object"==typeof exports?exports:root)[i]=a[i]}}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";module.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",__webpack_require__(1)]).factory("FileSaverUtils",[__webpack_require__(2)]).factory("Blob",["$window",__webpack_require__(3)]).factory("SaveAs",[__webpack_require__(5)])},function(module,exports){"use strict";module.exports=function(Blob,SaveAs,FileSaverUtils){function save(blob,filename,disableAutoBOM){try{SaveAs(blob,filename,disableAutoBOM)}catch(err){FileSaverUtils.handleErrors(err.message)}}return{saveAs:function(data,filename,disableAutoBOM){return FileSaverUtils.isBlobInstance(data)||FileSaverUtils.handleErrors("Data argument should be a blob instance"),FileSaverUtils.isString(filename)||FileSaverUtils.handleErrors("Filename argument should be a string"),save(data,filename,disableAutoBOM)}}}},function(module,exports){"use strict";module.exports=function(){return{handleErrors:function(msg){throw new Error(msg)},isString:function(obj){return"string"==typeof obj||obj instanceof String},isUndefined:function(obj){return void 0===obj},isBlobInstance:function(obj){return obj instanceof Blob}}}},function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),module.exports=function($window){return $window.Blob}},function(module,exports){!function(view){"use strict";if(view.URL=view.URL||view.webkitURL,view.Blob&&view.URL)try{return void new Blob}catch(e){}var BlobBuilder=view.BlobBuilder||view.WebKitBlobBuilder||view.MozBlobBuilder||function(view){var get_class=function(object){return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1]},FakeBlobBuilder=function(){this.data=[]},FakeBlob=function(data,type,encoding){this.data=data,this.size=data.length,this.type=type,this.encoding=encoding},FBB_proto=FakeBlobBuilder.prototype,FB_proto=FakeBlob.prototype,FileReaderSync=view.FileReaderSync,FileException=function(type){this.code=this[this.name=type]},file_ex_codes="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),file_ex_code=file_ex_codes.length,real_URL=view.URL||view.webkitURL||view,real_create_object_URL=real_URL.createObjectURL,real_revoke_object_URL=real_URL.revokeObjectURL,URL=real_URL,btoa=view.btoa,atob=view.atob,ArrayBuffer=view.ArrayBuffer,Uint8Array=view.Uint8Array,origin=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(FakeBlob.fake=FB_proto.fake=!0;file_ex_code--;)FileException.prototype[file_ex_codes[file_ex_code]]=file_ex_code+1;return real_URL.createObjectURL||(URL=view.URL=function(uri){var uri_origin,uri_info=document.createElementNS("http://www.w3.org/1999/xhtml","a");return uri_info.href=uri,"origin"in uri_info||("data:"===uri_info.protocol.toLowerCase()?uri_info.origin=null:(uri_origin=uri.match(origin),uri_info.origin=uri_origin&&uri_origin[1])),uri_info}),URL.createObjectURL=function(blob){var data_URI_header,type=blob.type;return null===type&&(type="application/octet-stream"),blob instanceof FakeBlob?(data_URI_header="data:"+type,"base64"===blob.encoding?data_URI_header+";base64,"+blob.data:"URI"===blob.encoding?data_URI_header+","+decodeURIComponent(blob.data):btoa?data_URI_header+";base64,"+btoa(blob.data):data_URI_header+","+encodeURIComponent(blob.data)):real_create_object_URL?real_create_object_URL.call(real_URL,blob):void 0},URL.revokeObjectURL=function(object_URL){"data:"!==object_URL.substring(0,5)&&real_revoke_object_URL&&real_revoke_object_URL.call(real_URL,object_URL)},FBB_proto.append=function(data){var bb=this.data;if(Uint8Array&&(data instanceof ArrayBuffer||data instanceof Uint8Array)){for(var str="",buf=new Uint8Array(data),i=0,buf_len=buf.length;i<buf_len;i++)str+=String.fromCharCode(buf[i]);bb.push(str)}else if("Blob"===get_class(data)||"File"===get_class(data)){if(!FileReaderSync)throw new FileException("NOT_READABLE_ERR");var fr=new FileReaderSync;bb.push(fr.readAsBinaryString(data))}else data instanceof FakeBlob?"base64"===data.encoding&&atob?bb.push(atob(data.data)):"URI"===data.encoding?bb.push(decodeURIComponent(data.data)):"raw"===data.encoding&&bb.push(data.data):("string"!=typeof data&&(data+=""),bb.push(unescape(encodeURIComponent(data))))},FBB_proto.getBlob=function(type){return arguments.length||(type=null),new FakeBlob(this.data.join(""),type,"raw")},FBB_proto.toString=function(){return"[object BlobBuilder]"},FB_proto.slice=function(start,end,type){var args=arguments.length;return args<3&&(type=null),new FakeBlob(this.data.slice(start,args>1?end:this.data.length),type,this.encoding)},FB_proto.toString=function(){return"[object Blob]"},FB_proto.close=function(){this.size=0,delete this.data},FakeBlobBuilder}(view);view.Blob=function(blobParts,options){var type=options?options.type||"":"",builder=new BlobBuilder;if(blobParts)for(var i=0,len=blobParts.length;i<len;i++)Uint8Array&&blobParts[i]instanceof Uint8Array?builder.append(blobParts[i].buffer):builder.append(blobParts[i]);var blob=builder.getBlob(type);return!blob.slice&&blob.webkitSlice&&(blob.slice=blob.webkitSlice),blob};var getPrototypeOf=Object.getPrototypeOf||function(object){return object.__proto__};view.Blob.prototype=getPrototypeOf(new view.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(module,exports,__webpack_require__){"use strict";module.exports=function(){return __webpack_require__(6).saveAs||function(){}}},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,saveAs=saveAs||function(view){"use strict";if(!(void 0===view||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var doc=view.document,get_URL=function(){return view.URL||view.webkitURL||view},save_link=doc.createElementNS("http://www.w3.org/1999/xhtml","a"),can_use_save_link="download"in save_link,click=function(node){var event=new MouseEvent("click");node.dispatchEvent(event)},is_safari=/constructor/i.test(view.HTMLElement),is_chrome_ios=/CriOS\/[\d]+/.test(navigator.userAgent),throw_outside=function(ex){(view.setImmediate||view.setTimeout)(function(){throw ex},0)},revoke=function(file){var revoker=function(){"string"==typeof file?get_URL().revokeObjectURL(file):file.remove()};setTimeout(revoker,4e4)},dispatch=function(filesaver,event_types,event){event_types=[].concat(event_types);for(var i=event_types.length;i--;){var listener=filesaver["on"+event_types[i]];if("function"==typeof listener)try{listener.call(filesaver,event||filesaver)}catch(ex){throw_outside(ex)}}},auto_bom=function(blob){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)?new Blob([String.fromCharCode(65279),blob],{type:blob.type}):blob},FileSaver=function(blob,name,no_auto_bom){no_auto_bom||(blob=auto_bom(blob));var object_url,filesaver=this,type=blob.type,force="application/octet-stream"===type,dispatch_all=function(){dispatch(filesaver,"writestart progress write writeend".split(" "))};if(filesaver.readyState=filesaver.INIT,can_use_save_link)return object_url=get_URL().createObjectURL(blob),void setTimeout(function(){save_link.href=object_url,save_link.download=name,click(save_link),dispatch_all(),revoke(object_url),filesaver.readyState=filesaver.DONE});!function(){if((is_chrome_ios||force&&is_safari)&&view.FileReader){var reader=new FileReader;return reader.onloadend=function(){var url=is_chrome_ios?reader.result:reader.result.replace(/^data:[^;]*;/,"data:attachment/file;");view.open(url,"_blank")||(view.location.href=url),url=void 0,filesaver.readyState=filesaver.DONE,dispatch_all()},reader.readAsDataURL(blob),void(filesaver.readyState=filesaver.INIT)}if(object_url||(object_url=get_URL().createObjectURL(blob)),force)view.location.href=object_url;else{view.open(object_url,"_blank")||(view.location.href=object_url)}filesaver.readyState=filesaver.DONE,dispatch_all(),revoke(object_url)}()},FS_proto=FileSaver.prototype,saveAs=function(blob,name,no_auto_bom){return new FileSaver(blob,name||blob.name||"download",no_auto_bom)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(blob,name,no_auto_bom){return name=name||blob.name||"download",no_auto_bom||(blob=auto_bom(blob)),navigator.msSaveOrOpenBlob(blob,name)}:(FS_proto.abort=function(){},FS_proto.readyState=FS_proto.INIT=0,FS_proto.WRITING=1,FS_proto.DONE=2,FS_proto.error=FS_proto.onwritestart=FS_proto.onprogress=FS_proto.onwrite=FS_proto.onabort=FS_proto.onerror=FS_proto.onwriteend=null,saveAs)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);void 0!==module&&module.exports?module.exports.saveAs=saveAs:null!==__webpack_require__(7)&&null!==__webpack_require__(8)&&(__WEBPACK_AMD_DEFINE_ARRAY__=[],void 0!==(__WEBPACK_AMD_DEFINE_RESULT__=function(){return saveAs}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__))&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__))},function(module,exports){module.exports=function(){throw new Error("define cannot be used indirect")}},function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(exports,{})}])});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
