!function(t,e){"use strict";"function"==typeof define&&define.amd?define(["moment"],e):"object"==typeof module&&module.exports?module.exports=e(require("moment")):e(t.moment)}(this,function(t){"use strict";function e(t){return t>96?t-87:t>64?t-29:t-48}function r(t){var r,n=0,i=t.split("."),a=i[0],o=i[1]||"",s=1,l=0,u=1;for(45===t.charCodeAt(0)&&(n=1,u=-1),n;n<a.length;n++)r=e(a.charCodeAt(n)),l=60*l+r;for(n=0;n<o.length;n++)s/=60,r=e(o.charCodeAt(n)),l+=r*s;return l*u}function n(t){for(var e=0;e<t.length;e++)t[e]=r(t[e])}function i(t,e){for(var r=0;r<e;r++)t[r]=Math.round((t[r-1]||0)+6e4*t[r]);t[e-1]=1/0}function a(t,e){var r,n=[];for(r=0;r<e.length;r++)n[r]=t[e[r]];return n}function o(t){var e=t.split("|"),r=e[2].split(" "),o=e[3].split(""),s=e[4].split(" ");return n(r),n(o),n(s),i(s,o.length),{name:e[0],abbrs:a(e[1].split(" "),o),offsets:a(r,o),untils:s,population:0|e[5]}}function s(t){t&&this._set(o(t))}function l(t){var e=t.toTimeString(),r=e.match(/\([a-z ]+\)/i);r&&r[0]?(r=r[0].match(/[A-Z]/g),r=r?r.join(""):void 0):(r=e.match(/[A-Z]{3,5}/g),r=r?r[0]:void 0),"GMT"===r&&(r=void 0),this.at=+t,this.abbr=r,this.offset=t.getTimezoneOffset()}function u(t){this.zone=t,this.offsetScore=0,this.abbrScore=0}function f(t,e){for(var r,n;n=6e4*((e.at-t.at)/12e4|0);)r=new l(new Date(t.at+n)),r.offset===t.offset?t=r:e=r;return t}function c(){var t,e,r,n=(new Date).getFullYear()-2,i=new l(new Date(n,0,1)),a=[i];for(r=1;r<48;r++)e=new l(new Date(n,r,1)),e.offset!==i.offset&&(t=f(i,e),a.push(t),a.push(new l(new Date(t.at+6e4)))),i=e;for(r=0;r<4;r++)a.push(new l(new Date(n+r,0,1))),a.push(new l(new Date(n+r,6,1)));return a}function p(t,e){return t.offsetScore!==e.offsetScore?t.offsetScore-e.offsetScore:t.abbrScore!==e.abbrScore?t.abbrScore-e.abbrScore:e.zone.population-t.zone.population}function h(t,e){var r,i;for(n(e),r=0;r<e.length;r++)i=e[r],U[i]=U[i]||{},U[i][t]=!0}function d(t){var e,r,n,i=t.length,a={},o=[];for(e=0;e<i;e++){n=U[t[e].offset]||{};for(r in n)n.hasOwnProperty(r)&&(a[r]=!0)}for(e in a)a.hasOwnProperty(e)&&o.push(D[e]);return o}function g(){try{var t=Intl.DateTimeFormat().resolvedOptions().timeZone;if(t){var e=D[v(t)];if(e)return e;O("Moment Timezone found "+t+" from the Intl api, but did not have that data loaded.")}}catch(t){}var r,n,i,a=c(),o=a.length,s=d(a),l=[];for(n=0;n<s.length;n++){for(r=new u(b(s[n]),o),i=0;i<o;i++)r.scoreOffsetAt(a[i]);l.push(r)}return l.sort(p),l.length>0?l[0].zone.name:void 0}function m(t){return I&&!t||(I=g()),I}function v(t){return(t||"").toLowerCase().replace(/\//g,"_")}function y(t){var e,r,n,i;for("string"==typeof t&&(t=[t]),e=0;e<t.length;e++)n=t[e].split("|"),r=n[0],i=v(r),T[i]=t[e],D[i]=r,n[5]&&h(i,n[2].split(" "))}function b(t,e){t=v(t);var r,n=T[t];return n instanceof s?n:"string"==typeof n?(n=new s(n),T[t]=n,n):P[t]&&e!==b&&(r=b(P[t],b))?(n=T[t]=new s,n._set(r),n.name=D[t],n):null}function w(){var t,e=[];for(t in D)D.hasOwnProperty(t)&&(T[t]||T[P[t]])&&D[t]&&e.push(D[t]);return e.sort()}function C(t){var e,r,n,i;for("string"==typeof t&&(t=[t]),e=0;e<t.length;e++)r=t[e].split("|"),n=v(r[0]),i=v(r[1]),P[n]=i,D[n]=r[0],P[i]=n,D[i]=r[1]}function S(t){y(t.zones),C(t.links),k.dataVersion=t.version}function x(t){return x.didShowError||(x.didShowError=!0,O("moment.tz.zoneExists('"+t+"') has been deprecated in favor of !moment.tz.zone('"+t+"')")),!!b(t)}function $(t){return!(!t._a||void 0!==t._tzm)}function O(t){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(t)}function k(e){var r=Array.prototype.slice.call(arguments,0,-1),n=arguments[arguments.length-1],i=b(n),a=t.utc.apply(null,r);return i&&!t.isMoment(e)&&$(a)&&a.add(i.parse(a),"minutes"),a.tz(n),a}function E(t){return function(){return this._z?this._z.abbr(this):t.call(this)}}function F(t){return function(){return this._z=null,t.apply(this,arguments)}}var I,R="0.5.11",T={},P={},D={},U={},j=t.version.split("."),_=+j[0],z=+j[1];(_<2||2===_&&z<6)&&O("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+t.version+". See momentjs.com"),s.prototype={_set:function(t){this.name=t.name,this.abbrs=t.abbrs,this.untils=t.untils,this.offsets=t.offsets,this.population=t.population},_index:function(t){var e,r=+t,n=this.untils;for(e=0;e<n.length;e++)if(r<n[e])return e},parse:function(t){var e,r,n,i,a=+t,o=this.offsets,s=this.untils,l=s.length-1;for(i=0;i<l;i++)if(e=o[i],r=o[i+1],n=o[i?i-1:i],e<r&&k.moveAmbiguousForward?e=r:e>n&&k.moveInvalidForward&&(e=n),a<s[i]-6e4*e)return o[i];return o[l]},abbr:function(t){return this.abbrs[this._index(t)]},offset:function(t){return this.offsets[this._index(t)]}},u.prototype.scoreOffsetAt=function(t){this.offsetScore+=Math.abs(this.zone.offset(t.at)-t.offset),this.zone.abbr(t.at).replace(/[^A-Z]/g,"")!==t.abbr&&this.abbrScore++},k.version=R,k.dataVersion="",k._zones=T,k._links=P,k._names=D,k.add=y,k.link=C,k.load=S,k.zone=b,k.zoneExists=x,k.guess=m,k.names=w,k.Zone=s,k.unpack=o,k.unpackBase60=r,k.needsOffset=$,k.moveInvalidForward=!0,k.moveAmbiguousForward=!1;var N=t.fn;t.tz=k,t.defaultZone=null,t.updateOffset=function(e,r){var n,i=t.defaultZone;void 0===e._z&&(i&&$(e)&&!e._isUTC&&(e._d=t.utc(e._a)._d,e.utc().add(i.parse(e),"minutes")),e._z=i),e._z&&(n=e._z.offset(e),Math.abs(n)<16&&(n/=60),void 0!==e.utcOffset?e.utcOffset(-n,r):e.zone(n,r))},N.tz=function(e){return e?(this._z=b(e),this._z?t.updateOffset(this):O("Moment Timezone has no data for "+e+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},N.zoneName=E(N.zoneName),N.zoneAbbr=E(N.zoneAbbr),N.utc=F(N.utc),t.tz.setDefault=function(e){return(_<2||2===_&&z<9)&&O("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+t.version+"."),t.defaultZone=e?b(e):null,t};var A=t.momentProperties;return"[object Array]"===Object.prototype.toString.call(A)?(A.push("_z"),A.push("_a")):A&&(A._z=null),t}),angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function(t,e,r,n){t.$on("ngCart:change",function(){e.$save()}),angular.isObject(n.get("cart"))?e.$restore(n.get("cart")):e.init()}]).service("ngCart",["$rootScope","$location","$window","ngCartItem","store",function(t,e,r,n,i){this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(e,r,i,a,o,s,l){var u=this.getItemById(e);if("object"==typeof u)u.setQuantity(o,!1),t.$broadcast("ngCart:itemUpdated",u);else{var f=new n(e,r,i,a,o,s,l);this.$cart.items.push(f),t.$broadcast("ngCart:itemAdded",f)}t.$broadcast("ngCart:change",{})},this.addItemBtn=function(r,i,a,o,s,l){var u=l.skus;if(1===u.length){var f=this.getItemById(r);if("object"==typeof f)f.setQuantity(s,!1),t.$broadcast("ngCart:itemUpdated",f);else{var c=new n(r,i,a,o,s,l);this.$cart.items.push(c),t.$broadcast("ngCart:itemAdded",c)}t.$broadcast("ngCart:change",{})}else e.url("/store/"+l.id)},this.changeQuantity=function(e,r){var n=this.getItemById(e);"object"==typeof n?(n.setQuantity(r,!0),t.$broadcast("ngCart:itemUpdated",n)):console.log("nothing there"),t.$broadcast("ngCart:change",{})},this.getItemById=function(t){var e=this.getCart().items,r=!1;return angular.forEach(e,function(e){e.getId()===t&&(r=e)}),r},this.setShipping=function(e){return this.$cart.shipping=e,t.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(e){return this.$cart.taxRate=+parseFloat(e).toFixed(2),t.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(t){return this.$cart=t,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var t=0,e=this.getItems();return angular.forEach(e,function(e){t+=e.getQuantity()}),t},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getSubTotal=function(){var t=0;return angular.forEach(this.getCart().items,function(e){t+=e.getTotal()}),+parseFloat(t).toFixed(2)},this.totalCost=function(){return+parseFloat(this.getSubTotal()+this.getShipping()+this.getTax()).toFixed(2)},this.removeItem=function(e){var r=this.$cart.items.splice(e,1)[0]||{};t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.removeItemById=function(e){var r,n=this.getCart();angular.forEach(n.items,function(t,r){t.getId()===e&&(t=n.items.splice(r,1)[0]||{})}),this.setCart(n),t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.empty=function(){t.$broadcast("ngCart:change",{}),this.$cart.items=[],r.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var t=[];return angular.forEach(this.getItems(),function(e){t.push(e.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:t}},this.$restore=function(t){var e=this;e.init(),e.$cart.shipping=t.shipping,e.$cart.taxRate=t.taxRate,e.$cart.tax=t.tax,angular.forEach(t.items,function(t){e.$cart.items.push(new n(t.parent,t.sku,t.description,t.amount,t.quantity,t._data,t.attr))}),this.$save()},this.$save=function(){return i.set("cart",JSON.stringify(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function(t,e){var r=function(t,e,r,n,i,a,o){this.setId(t),this.setSku(e),this.setName(r),this.setPrice(n),this.setQuantity(i),this.setData(a),this.setAttr(o)};return r.prototype.setId=function(t){t?this.parent=t:e.error("An ID must be provided")},r.prototype.setSku=function(t){t?this.sku=t:e.error("A sku must be provided")},r.prototype.getId=function(){return this.parent},r.prototype.getSku=function(){return this.sku},r.prototype.setName=function(t){t?this.description=t:e.error("A name must be provided")},r.prototype.getName=function(){return this.description},r.prototype.setPrice=function(t){var r=parseFloat(t);r?r<=0?e.error("A price must be over 0"):this.amount=r:e.error("A price must be provided")},r.prototype.getPrice=function(){return this.amount},r.prototype.setQuantity=function(t,r){var n=parseInt(t);n%1===0?(r===!0?this.quantity+=n:this.quantity=n,this.quantity<1&&(this.quantity=1)):(this.quantity=1,e.info("Quantity must be an integer and was defaulted to 1"))},r.prototype.getQuantity=function(){return this.quantity},r.prototype.setData=function(t){t&&(this._data=t)},r.prototype.getData=function(){return this._data?this._data:void e.info("This item has no data")},r.prototype.setAttr=function(t){t&&(this.attr=t)},r.prototype.getAttr=function(){if(this.attr){if(this.attr.size)return this.attr.size;if(this.attr.color)return this.attr.size}},r.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},r.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},r}]).service("store",["$window",function(t){return{get:function(e){if(t.localStorage.getItem(e)){var r=angular.fromJson(t.localStorage.getItem(e));return JSON.parse(r)}return!1},set:function(e,r){return void 0===r?t.localStorage.removeItem(e):t.localStorage.setItem(e,angular.toJson(r)),t.localStorage.getItem(e)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function(t,e,r,n){t.loaded=!1,t.toggleCart=!1,t.ngCart=r,n(function(){t.loaded=!0});var i=r.getItems(),a=[];angular.forEach(i,function(t){"shippable"===t._data.product_type&&a.push(t)}),a.length>0?(t.shipBool=!0,t.$emit("setShippable",!0)):(t.shipBool=!1,t.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function(t,e,r){t.loaded=!1,t.toggleCart=!1,t.ngCart=e,r(function(){t.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function(t,e){t.ngCart=e}]).directive("ngcartAddBtn",["ngCart",function(t){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartBtn.html":e.templateUrl},link:function(e,r,n){e.attrs=n,e.inCart=function(){return t.getItemById(n.id)},e.inCart()?e.q=t.getItemById(n.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var i=1;i<=e.quantityMax;i++)e.qtyOpt.push(i)}}}]).directive("ngcartAddtocart",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocart.html":e.templateUrl},link:function(e,r,n){e.attrs=n,e.inCart=function(){return t.getItemById(n.id)},e.inCart()?e.q=t.getItemById(n.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];var i,a=firebase.database().ref("tickets/"+e.id+"/totalTickets");a.once("value").then(function(t){if(e.totalTix=t.val(),i=e.quantityMax<e.totalTix?e.quantityMax:e.totalTix,i>0)for(var r=1;r<=i;r++)e.qtyOpt.push(r)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/summary.html":e.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart-confirm.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart-collapse.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function(t,e,r,n){e.ngCart=r,e.checkout=function(){n.setService(e.service),n.setSettings(e.settings),n.checkout().success(function(e,r,n,i){t.$broadcast("ngCart:checkout_succeeded",e)}).error(function(e,r,n,i){t.$broadcast("ngCart:checkout_failed",{statusCode:r,error:e})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"template/ngCart/checkout.html":e.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function(t){this._obj={service:void 0,settings:void 0},this.setService=function(t){this._obj.service=t},this.setSettings=function(t){this._obj.settings=t},this.checkout=function(){var e=t.get("ngCart.fulfilment."+this._obj.service);return e.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function(t,e,r){this.checkout=function(){var n=t.defer();return e.info(r.toObject()),n.resolve({cart:r.toObject()}),n.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function(t,e){this.checkout=function(r){return t.post(r.url,{data:e.toObject(),options:r.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function(t,e){}]),angular.module("angular-parallax",[]).directive("parallax",["$window",function(t){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function(e,r,n){var i=function(){e.parallaxHorizontalOffset||(e.parallaxHorizontalOffset="0");var n=t.pageYOffset*(e.parallaxRatio?e.parallaxRatio:1.1);if(n<=t.innerHeight){var i=n<e.parallaxVerticalOffset?e.parallaxVerticalOffset:n,a=e.parallaxHorizontalOffset.indexOf("%")===-1?e.parallaxHorizontalOffset+"px":e.parallaxHorizontalOffset;r.css("transform","translate("+a+", "+i+"px)")}};i(),angular.element(t).bind("scroll",i),angular.element(t).bind("touchmove",i)}}}]).directive("parallaxBackground",["$window",function(t){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function(e,r,n){var i=function(){var n=e.parallaxVerticalOffset/100*r[0].offsetHeight,i=(r.prop("offsetTop")-t.pageYOffset)*(e.parallaxRatio?e.parallaxRatio:1.1)-(n||0);i>=e.parallaxStartPoint&&(i=e.parallaxStartPoint),r.css("background-position","50% "+i+"px")};angular.element(t).bind("load",function(t){i(),e.$apply()}),angular.element(t).bind("scroll",i),angular.element(t).bind("touchmove",i)}}}]),function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var i=r[n]={exports:{},id:n,loaded:!1};return t[n].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){"use strict";t.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",r(1)]).factory("FileSaverUtils",[r(2)]).factory("Blob",["$window",r(3)]).factory("SaveAs",[r(5)])},function(t,e){"use strict";t.exports=function(t,e,r){function n(t,n,i){try{e(t,n,i)}catch(t){r.handleErrors(t.message)}}return{saveAs:function(t,e,i){return r.isBlobInstance(t)||r.handleErrors("Data argument should be a blob instance"),r.isString(e)||r.handleErrors("Filename argument should be a string"),n(t,e,i)}}}},function(t,e){"use strict";t.exports=function(){return{handleErrors:function(t){throw new Error(t)},isString:function(t){return"string"==typeof t||t instanceof String},isUndefined:function(t){return"undefined"==typeof t},isBlobInstance:function(t){return t instanceof Blob}}}},function(t,e,r){"use strict";r(4),t.exports=function(t){return t.Blob}},function(t,e){!function(t){"use strict";if(t.URL=t.URL||t.webkitURL,t.Blob&&t.URL)try{return void new Blob}catch(t){}var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},r=function(){this.data=[]},n=function(t,e,r){this.data=t,this.size=t.length,this.type=e,this.encoding=r},i=r.prototype,a=n.prototype,o=t.FileReaderSync,s=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=l.length,f=t.URL||t.webkitURL||t,c=f.createObjectURL,p=f.revokeObjectURL,h=f,d=t.btoa,g=t.atob,m=t.ArrayBuffer,v=t.Uint8Array,y=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(n.fake=a.fake=!0;u--;)s.prototype[l[u]]=u+1;return f.createObjectURL||(h=t.URL=function(t){var e,r=document.createElementNS("http://www.w3.org/1999/xhtml","a");return r.href=t,"origin"in r||("data:"===r.protocol.toLowerCase()?r.origin=null:(e=t.match(y),r.origin=e&&e[1])),r}),h.createObjectURL=function(t){var e,r=t.type;return null===r&&(r="application/octet-stream"),t instanceof n?(e="data:"+r,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):d?e+";base64,"+d(t.data):e+","+encodeURIComponent(t.data)):c?c.call(f,t):void 0},h.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&p&&p.call(f,t)},i.append=function(t){var r=this.data;if(v&&(t instanceof m||t instanceof v)){for(var i="",a=new v(t),l=0,u=a.length;l<u;l++)i+=String.fromCharCode(a[l]);r.push(i)}else if("Blob"===e(t)||"File"===e(t)){if(!o)throw new s("NOT_READABLE_ERR");var f=new o;r.push(f.readAsBinaryString(t))}else t instanceof n?"base64"===t.encoding&&g?r.push(g(t.data)):"URI"===t.encoding?r.push(decodeURIComponent(t.data)):"raw"===t.encoding&&r.push(t.data):("string"!=typeof t&&(t+=""),r.push(unescape(encodeURIComponent(t))))},i.getBlob=function(t){return arguments.length||(t=null),new n(this.data.join(""),t,"raw")},i.toString=function(){return"[object BlobBuilder]"},a.slice=function(t,e,r){var i=arguments.length;return i<3&&(r=null),new n(this.data.slice(t,i>1?e:this.data.length),r,this.encoding)},a.toString=function(){return"[object Blob]"},a.close=function(){this.size=0,delete this.data},r}(t);t.Blob=function(t,r){var n=r?r.type||"":"",i=new e;if(t)for(var a=0,o=t.length;a<o;a++)Uint8Array&&t[a]instanceof Uint8Array?i.append(t[a].buffer):i.append(t[a]);var s=i.getBlob(n);return!s.slice&&s.webkitSlice&&(s.slice=s.webkitSlice),s};var r=Object.getPrototypeOf||function(t){return t.__proto__};t.Blob.prototype=r(new t.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(t,e,r){"use strict";t.exports=function(){return r(6).saveAs||function(){}}},function(t,e,r){var n,i,a=a||function(t){"use strict";if(!("undefined"==typeof t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,r=function(){return t.URL||t.webkitURL||t},n=e.createElementNS("http://www.w3.org/1999/xhtml","a"),i="download"in n,a=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},o=/constructor/i.test(t.HTMLElement),s=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",f=4e4,c=function(t){var e=function(){"string"==typeof t?r().revokeObjectURL(t):t.remove()};setTimeout(e,f)},p=function(t,e,r){e=[].concat(e);for(var n=e.length;n--;){var i=t["on"+e[n]];if("function"==typeof i)try{i.call(t,r||t)}catch(t){l(t)}}},h=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},d=function(e,l,f){f||(e=h(e));var d,g=this,m=e.type,v=m===u,y=function(){p(g,"writestart progress write writeend".split(" "))},b=function(){if((s||v&&o)&&t.FileReader){var n=new FileReader;return n.onloadend=function(){var e=s?n.result:n.result.replace(/^data:[^;]*;/,"data:attachment/file;"),r=t.open(e,"_blank");r||(t.location.href=e),e=void 0,g.readyState=g.DONE,y()},n.readAsDataURL(e),void(g.readyState=g.INIT)}if(d||(d=r().createObjectURL(e)),v)t.location.href=d;else{var i=t.open(d,"_blank");i||(t.location.href=d)}g.readyState=g.DONE,y(),c(d)};return g.readyState=g.INIT,i?(d=r().createObjectURL(e),void setTimeout(function(){n.href=d,n.download=l,a(n),y(),c(d),g.readyState=g.DONE})):void b()},g=d.prototype,m=function(t,e,r){return new d(t,e||t.name||"download",r)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,r){return e=e||t.name||"download",r||(t=h(t)),navigator.msSaveOrOpenBlob(t,e)}:(g.abort=function(){},g.readyState=g.INIT=0,g.WRITING=1,g.DONE=2,g.error=g.onwritestart=g.onprogress=g.onwrite=g.onabort=g.onerror=g.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=a:null!==r(7)&&null!==r(8)&&(n=[],i=function(){return a}.apply(e,n),!(void 0!==i&&(t.exports=i)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})}])});var uiroutermetatags;!function(t){function e(t,e,r,n){function i(t,e,r,i,a){n.prerenderReady=!1}function a(e,n){n.metaTags||t.debug('MetaTags - route: "'+n.name+'" does not contain any metatags'),r.update(n.metaTags)}function o(t,e,i,a,o,s){r.prerender.statusCode=500,n.prerenderReady=!0}function s(t,e,i){r.prerender.statusCode=404,n.prerenderReady=!0}e.MetaTags=r,e.$on("$stateChangeStart",i),e.$on("$stateChangeSuccess",a),e.$on("$stateChangeError",o),e.$on("$stateNotFound",s)}e.$inject=["$log","$rootScope","MetaTags","$window"];var r=angular.module("ui.router.metatags",["ui.router"]),n=function(){function t(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return t.prototype.setTitlePrefix=function(t){return this.prefix=t,this},t.prototype.setTitleSuffix=function(t){return this.suffix=t,this},t.prototype.setDefaultTitle=function(t){return this.defaultTitle=t,this},t.prototype.setDefaultDescription=function(t){return this.defaultDescription=t,this},t.prototype.setDefaultKeywords=function(t){return this.defaultKeywords=t,this},t.prototype.setDefaultRobots=function(t){return this.defaultRobots=t,this},t.prototype.setStaticProperties=function(t){return this.staticProperties=t,this},t.prototype.setOGURL=function(t){return this.enableOGURL=t,this},t.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},t}();r.provider("UIRouterMetatags",n);var i=function(){function t(t,e,r,n,i,a,o){this.$log=t,this.UIRouterMetatags=e,this.$interpolate=r,this.$injector=n,this.$state=i,this.$location=a,this.$window=o,this.prerender={}}return t.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],t.prototype.update=function(t){var e=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),t?(this.title=t.title?this.UIRouterMetatags.prefix+(this.getValue("title",t.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=t.description?this.getValue("description",t.description):this.UIRouterMetatags.defaultDescription,this.keywords=t.keywords?this.getValue("keywords",t.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=t.robots?this.getValue("robots",t.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(t.properties,function(t,r){var n=e.getValue(r,t);n&&(e.properties[r]=n)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),t&&t.prerender?(this.prerender.statusCode=t.prerender.statusCode?this.getValue("prerender.statusCode",t.prerender.statusCode):200,this.prerender.header=t.prerender.header?this.getValue("rerender.header",t.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(t){this.$log.error("error occured when extracting metatags:",t)}},t.prototype.getValue=function(t,e){try{return e?"number"==typeof e?e:"string"==typeof e&&0===e.trim().length?null:angular.isFunction(e)||Array.isArray(e)?this.$injector.invoke(e,this,this.$state.$current.locals.globals):this.$interpolate(e)(this.$state.$current.locals.globals):null}catch(e){return this.$log.error("error occured when trying to get the value of tag:",t,e),null}},t}();r.service("MetaTags",i),r.run(e)}(uiroutermetatags||(uiroutermetatags={}));var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(t,e){return t-e}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function(t,e){"use strict";function r(t,e){console.log("what is templateString? ",e);var r=e.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,t.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",r),r}function n(){function t(t,e){return t>e?1:t<e?-1:0}var e=t,r=t;"object"==typeof Intl?e=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(e=function(t,e){return(t+"").localeCompare(e,void 0,{sensitivity:"case"})});var n=function(t,n){return"number"==typeof t&&"number"==typeof n?r(t,n):t instanceof Date&&n instanceof Date?r(t.getTime(),n.getTime()):e(t,n)};return n}var i=n();return{scope:!0,controller:["$scope","tableSortConfig",function(e,r){e.pagination={template:r.paginationTemplate,perPageOptions:r.perPageOptions.concat(),perPage:r.perPageDefault,currentPage:1,getPageRangeString:function(t){var r=t!==e.filtering.filteredCount?e.filtering.filteredCount:t,n=Math.max((e.pagination.currentPage-1)*e.pagination.perPage+1,1),i=Math.min(e.pagination.currentPage*e.pagination.perPage,r);return 0===e.filtering.filteredCount?"":(i===r&&1===n?"":n+"-")+i}},console.log("what is pagination: ",e.pagination),e.filtering={template:r.filterTemplate,filterString:"",filterFunction:r.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",e.filtering),e.itemsArrayExpression="",e.itemNameSingular=r.itemNameSingular,e.itemNamePlural=r.itemNamePlural,e.noDataText=r.noDataText,e.wrappingElementClass=r.wrappingElementClass,e.sortExpression=[],e.headings=[];var n=function(e,r){return[t(e),null,!1,r?r:e]};this.setSortField=function(t,r,i,a){var o,s=n(t,i);if(s.push(a),1===e.sortExpression.length&&e.sortExpression[0][0]===s[0])e.sortExpression[0][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[0][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[0][2]=!0),e.$emit("tablesort:sortOrder",[{name:e.sortExpression[0][3],order:e.sortExpression[0][2]}]);else{for(o=0;o<e.headings.length;o+=1)e.headings[o].removeClass("tablesort-desc").removeClass("tablesort-asc");r.addClass("tablesort-asc"),e.sortExpression=[s],e.$emit("tablesort:sortOrder",[{name:s[3],order:s[2]}])}},this.addSortField=function(t,r,i,a){var o,s=!1,l=n(t,i);for(l.push(a),o=0;o<e.sortExpression.length;o+=1)e.sortExpression[o][0]===l[0]&&(e.sortExpression[o][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[o][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[o][2]=!0),s=!0);s||(r.addClass("tablesort-asc"),e.sortExpression.push(l)),e.$emit("tablesort:sortOrder",e.sortExpression.map(function(t){return{name:t[3],order:t[2]}}))},this.setTrackBy=function(t){e.trackBy=t},this.registerHeading=function(t){e.headings.push(t)},this.addFilterField=function(t,r){var i=n(t);e.filtering.filterFields.push(i)},this.setArrayExpr=function(t){e.itemsArrayExpression=t}}],link:function(n,a,o,s){if(o.tsItemName){var l="No "+n.itemNamePlural;n.itemNameSingular=o.tsItemName,o.tsItemNamePlural?n.itemNamePlural=o.tsItemNamePlural:n.itemNamePlural=o.tsItemName+"s",o.tsNoDataText||n.noDataText!==l||(n.noDataText="No "+n.itemNamePlural)}if(o.tsNoDataText&&(n.noDataText=o.tsNoDataText),o.tsWrappingElementClass&&(n.wrappingElementClass=o.tsWrappingElementClass),o.tsPerPageOptions&&(n.pagination.perPageOptions=n.$eval(o.tsPerPageOptions)),
o.tsPerPageDefault){var u=n.$eval(o.tsPerPageDefault);isNaN(u)||(n.pagination.perPage=u,n.pagination.perPageOptions.indexOf(n.pagination.perPage)===-1&&(n.pagination.perPageOptions.push(n.pagination.perPage),n.pagination.perPageOptions.sort(function(t,e){return t-e})))}if(o.tsFilterFields)for(var f=o.tsFilterFields.split(",").filter(function(t){return t&&""!==t.trim()}),c=0;c<f.length;c+=1)s.addFilterField(f[c]);var p;if("false"!==o.tsDisplayFiltering&&""!==n.filtering.template&&n.filtering.filterFields.length>0){var h=r(n,n.filtering.template);p=e(h)(n),a.parent()[0].insertBefore(p[0],a[0])}o.tsFilterFunction&&(n.filtering.filterFunction=n.$eval(o.tsFilterFunction)),angular.isFunction(n.filtering.filterFunction)||(0===n.filtering.filterFields.length?n.filtering.filterFunction=function(t){return!0}:n.filtering.filterFunction=function(t){for(var e=!1,r=0;r<n.filtering.filterFields.length;r+=1)if(!e){var i=(n.filtering.filterFields[r][0](t)||"").toString().toLowerCase();e=i.indexOf(n.filtering.filterString.toLowerCase())>-1}return e}),n.filterLimitFun=function(t){if(!o.tsFilterFunction&&""===n.filtering.filterString)return n.filtering.filteredCount=t.length,t;var e=t.filter(n.filtering.filterFunction);return n.filtering.filteredCount=e.length,e},n.sortFun=function(t,e){var r,a,o,s,l,u;for(r=0;r<n.sortExpression.length;r+=1){if(a=n.sortExpression[r][0](t),o=n.sortExpression[r][0](e),l=e[n.sortExpression[r][1]],l&&(a=l(a),o=l(o)),void 0!==a&&null!==a||(a=""),void 0!==o&&null!==o||(o=""),s=n.sortExpression[r][2],u=(n.sortExpression[r][4]||i)(a,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}if(n.trackBy){if(a=t[n.trackBy],o=e[n.trackBy],void 0!==a&&null!==a||(a=""),void 0!==o&&null!==o||(o=""),u=i(a,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}return 0},n.pageLimitFun=function(t){if("false"===o.tsDisplayPagination||""===n.pagination.template)return t;for(var e=(n.pagination.currentPage-1)*n.pagination.perPage,r=n.pagination.currentPage*n.pagination.perPage,i=[],a=0;a<t.length;a++)a>=e&&a<r&&i.push(t[a]);return i};var d;if("false"!==o.tsDisplayPagination&&""!==n.pagination.template){var g=r(n,n.pagination.template);d=e(g)(n),a.after(d)}var m;if(n.wrappingElementClass&&""!==n.wrappingElementClass&&(m=a.wrap("<div class='"+n.wrappingElementClass+"' />")),o.tsGetTableDataFunction){var v=t(o.tsGetTableDataFunction),y=v.assign,b=function(e,r,i){var a=t(n.itemsArrayExpression)(n);return e&&(a=a.sort(n.sortFun)),r&&(a=n.filterLimitFun(a)),i&&(a=n.pageLimitFun(a)),a};y(n.$parent,b)}n.$on("$destroy",function(){p&&p.remove(),d&&d.remove(),m&&m.replaceWith(a)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(t,e,r,n){var i=function(i){t.$apply(function(){i.shiftKey?n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy):n.setSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)})};e.bind("click",i),e.addClass("tablesort-sortable"),"tsDefault"in r&&"0"!==r.tsDefault&&(n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy),"descending"===r.tsDefault&&n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)),"tsFilter"in r&&n.addFilterField(r.tsCriteria,e),n.registerHeading(e)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function(t,e){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(r,n,i,a){for(var o=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],s=o[0],l="ts-repeat",u=0;u<o.length;u++)if(angular.isDefined(n.attr(o[u]))){s=o[u],l=s.replace(/^(data-)?ng/,"$1ts");break}var f="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",c=n.attr(s),p=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,h=c.match(/\s+track\s+by\s+\S+?\.(\S+)/),d=c.match(p);if(h&&a.setTrackBy(h[1]),c.search(/tablesort/)!==-1?(c=c.replace(/tablesort/,f),h&&(c=c.replace(h[0],"")+h[0])):c=c.replace(p,"$1 in $2 | "+f+"$3"),angular.isUndefined(i.tsHideNoData)){var g=e.startSymbol(),m=e.endSymbol(),v=angular.element(n[0]).clone();v.removeAttr(s),v.removeAttr(l),v.addClass("showIfLast"),v.children().remove(),v.append('<td colspan="'+n[0].childElementCount+'">'+g+"noDataText"+m+"</td>"),v=t(v)(r),n.parent().prepend(v)}a.setArrayExpr(d[2]),angular.element(n[0]).attr(s,c),t(n,null,1e6)(r)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(t,e){if(t)return e(t)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(t,e){if(t){var r=t.concat();return r.sort(e)}}}),tableSortModule.filter("parseInt",function(){return function(t){return parseInt(t)||null}}),tableSortModule.filter("parseFloat",function(){return function(t){return parseFloat(t)||null}}),tableSortModule.filter("parseDate",function(){return function(t){var e=Date.parse(t);return isNaN(e)?null:e}}),angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(t,e,r){function n(t,n){var i;r.$observe(t,function(){n=n||"fa-"+t,e.removeClass(a[t]),r[t]&&(i=[n,r[t]].join("-"),e.addClass(i),a[t]=i)})}function i(t,n){var i;r.$observe(t,function(){n=n||"fa-"+t,i=t in r&&"false"!==r[t]&&r[t]!==!1,e.toggleClass(n,i)})}var a={};n("name","fa"),n("rotate"),n("flip"),n("stack"),r.$observe("size",function(){var t;e.removeClass(a.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),a.size=t}),r.$observe("stack",function(){var t;e.removeClass(a.stack),"large"===r.stack?t="fa-stack-lg":isNaN(parseInt(r.stack,10))||(t="fa-stack-"+r.stack+"x"),e.addClass(t),a.stack=t}),i("border"),i("fw"),i("inverse"),i("spin"),e.toggleClass("fa-li",e.parent()&&"LI"===e.parent().prop("tagName")&&e.parent().parent()&&e.parent().parent().hasClass("fa-ul")&&e.parent().children()[0]===e[0]&&"false"!==r.list&&r.list!==!1),r.$observe("alt",function(){var t=r.alt,n=e.next(),i="fa-alt-text";t?(e.removeAttr("alt"),n&&n.hasClass(i)||(e.after('<span class="sr-only fa-alt-text"></span>'),n=e.next()),n.text(t)):n&&n.hasClass(i)&&n.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(t,e,r){function n(t,n){var a;r.$observe(t,function(){n=n||"fa-"+t,e.removeClass(i[t]),r[t]&&(a=[n,r[t]].join("-"),e.addClass(a),i[t]=a)})}var i={};n("size"),r.$observe("size",function(){var t;e.removeClass(i.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),i.size=t})}}}),function(t,e,r,n){"use strict";function i(e,r){this.options=t.extend({},o,r),this._defaults=o,this._name=a,this.$element=t(e),this.init()}var a="menuButton",o={propertyName:"value"};i.prototype={constructor:i,init:function(){this.toggle()},toggle:function(t,e){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},t.fn[a]=function(e){return this.each(function(){t.data(this,"plugin_"+a)?t.data(this,"plugin_"+a).toggle():t.data(this,"plugin_"+a,new i(this,e))})},t(r).on("click",function(e){t.each(t("[data-buttons=dropdown]"),function(r,n){t(e.target.offsetParent)[0]!=t(this)[0]&&t.data(this,"plugin_"+a)&&(t.data(this,"plugin_"+a).hideMenu(),t(this).find("ul").hide())})}),t(r).on("click","[data-buttons=dropdown]",function(e){var r=t(e.currentTarget);r.menuButton()}),t(r).on("click","[data-buttons=dropdown] > a",function(t){t.preventDefault()})}(jQuery,window,document),angular.module("angularPayments",[]),angular.module("angularPayments").factory("Common",[function(){var t={};return t.parseExpiry=function(t){var e,r,n,i;return t=t||"",t=t.replace(/\s/g,""),i=t.split("/",2),e=i[0],n=i[1],2===(null!=n?n.length:void 0)&&/^\d+$/.test(n)&&(r=(new Date).getFullYear(),r=r.toString().slice(0,2),n=r+n),e=parseInt(e,10),n=parseInt(n,10),{month:e,year:n}},t}]),angular.module("angularPayments").factory("Cards",[function(){var t=/(\d{1,4})/g,e=/(?:^|\s)(\d{4})$/,r=[{type:"maestro",pattern:/^(5018|5020|5038|6304|6759|676[1-3])/,format:t,inputFormat:e,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"dinersclub",pattern:/^(36|38|30[0-5])/,format:t,inputFormat:e,length:[14],cvcLength:[3],luhn:!0},{type:"laser",pattern:/^(6706|6771|6709)/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!0},{type:"jcb",pattern:/^35/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^62/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"discover",pattern:/^(6011|65|64[4-9]|622)/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^5[1-5]/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,inputFormat:/^(\d{4}|\d{4}\s\d{6})$/,length:[15],cvcLength:[3,4],luhn:!0},{type:"visa",pattern:/^4/,format:t,inputFormat:e,length:[13,14,15,16],cvcLength:[3],luhn:!0}],n=function(t){var e,n,i;for(t=(t+"").replace(/\D/g,""),n=0,i=r.length;n<i;n++)if(e=r[n],e.pattern.test(t))return e},i=function(t){var e,n,i;for(n=0,i=r.length;n<i;n++)if(e=r[n],e.type===t)return e};return{fromNumber:function(t){return n(t)},fromType:function(t){return i(t)},defaultFormat:function(){return t},defaultInputFormat:function(){return e}}}]),angular.module("angularPayments").factory("_Format",["Cards","Common","$filter",function(t,e,r){var n={},i=function(t){var e;return null!=t.prop("selectionStart")&&t.prop("selectionStart")!==t.prop("selectionEnd")||!("undefined"==typeof document||null===document||null==(e=document.selection)||"function"!=typeof e.createRange||!e.createRange().text)},a=function(e){var r,n,i,a,o,s,l;if(i=String.fromCharCode(e.which),r=angular.element(e.currentTarget),l=r.val(),n=t.fromNumber(l+i),a=(l.replace(/\D/g,"")+i).length,s=16,n&&(s=n.length[n.length.length-1]),!(a>=s)){if(!/^\d+$/.test(i)&&!e.meta&&e.keyCode>=46)return void e.preventDefault();if(null==r.prop("selectionStart")||r.prop("selectionStart")===l.length)return o=t.defaultInputFormat(),n&&(o=n.inputFormat),o.test(l)?(e.preventDefault(),r.val(l+" "+i)):o.test(l+i)?(e.preventDefault(),r.val(l+i+" ")):void 0}},o=function(e){var r,n,a,o;r=angular.element(e.currentTarget),a=String.fromCharCode(e.which),/^\d+$/.test(a)&&(i(r)||(o=(r.val()+a).replace(/\D/g,""),n=t.fromNumber(o),n?o.length<=n.length[n.length.length-1]||e.preventDefault():o.length<=16||e.preventDefault()))},s=function(t){var e,r;if(e=angular.element(t.currentTarget),r=e.val(),!t.meta&&8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length))return/\d\s$/.test(r)&&!t.meta&&t.keyCode>=46?(t.preventDefault(),e.val(r.replace(/\d\s$/,""))):/\s\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\d?$/,""))):void 0},l=function(e){var r,n,i,a;return(r=t.fromNumber(e))?(i=r.length[r.length.length-1],e=e.replace(/\D/g,""),e=e.slice(0,+i+1||9e9),r.format.global?null!=(a=e.match(r.format))?a.join(" "):void 0:(n=r.format.exec(e),null!=n&&n.shift(),null!=n?n.join(" "):void 0)):e},u=function(t){return setTimeout(function(){var e,r;return e=angular.element(t.target),r=e.val(),r=l(r),e.val(r)})},f=function(t){return null!=t?t.replace(/\s/g,""):t};n.card=function(t,e){t.bind("keypress",o),t.bind("keypress",a),t.bind("keydown",s),t.bind("paste",u),e.$parsers.push(f),e.$formatters.push(l)},_formatCVC=function(t){return $target=angular.element(t.currentTarget),digit=String.fromCharCode(t.which),!/^\d+$/.test(digit)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(val=$target.val()+digit,val.length<=4?void 0:void t.preventDefault())},n.cvc=function(t){t.bind("keypress",_formatCVC)},_restrictExpiry=function(t){var e,r,n;return e=angular.element(t.currentTarget),r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():i(e)?void 0:(n=e.val()+r,n=n.replace(/\D/g,""),n.length>6?void t.preventDefault():void 0)},_formatExpiry=function(t){var e,r,n;return r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(e=angular.element(t.currentTarget),n=e.val()+r,/^\d$/.test(n)&&"0"!==n&&"1"!==n?(t.preventDefault(),e.val("0"+n+" / ")):/^\d\d$/.test(n)?(t.preventDefault(),e.val(""+n+" / ")):void 0)},_formatForwardExpiry=function(t){var e,r,n;if(r=String.fromCharCode(t.which),/^\d+$/.test(r)||t.meta||!(t.keyCode>=46))return e=angular.element(t.currentTarget),n=e.val(),/^\d\d$/.test(n)?e.val(""+n+" / "):void 0},_formatForwardSlash=function(t){var e,r,n;if(r=String.fromCharCode(t.which),"/"===r)return e=angular.element(t.currentTarget),n=e.val(),/^\d$/.test(n)&&"0"!==n?e.val("0"+n+" / "):void 0},_formatBackExpiry=function(t){var e,r;if(!t.meta&&(e=angular.element(t.currentTarget),r=e.val(),8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length)))return/\d(\s|\/)+$/.test(r)?(t.preventDefault(),e.val(r.replace(/\d(\s|\/)*$/,""))):/\s\/\s?\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\/\s?\d?$/,""))):void 0};var c=function(t){if(null!=t){var n=e.parseExpiry(t),i=new Date(n.year,n.month-1);return r("date")(i,"MM/yyyy")}return null},p=function(t){if(null!=t){var n=e.parseExpiry(t),i=new Date(n.year,n.month-1);return r("date")(i,"MM / yyyy")}return null};return n.expiry=function(t,e){t.bind("keypress",_restrictExpiry),t.bind("keypress",_formatExpiry),t.bind("keypress",_formatForwardSlash),t.bind("keypress",_formatForwardExpiry),t.bind("keydown",_formatBackExpiry),e.$parsers.push(c),e.$formatters.push(p)},function(t,e,r){if(!n[t])throw types=Object.keys(n),errstr='Unknown type for formatting: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return n[t](e,r)}}]).directive("paymentsFormat",["$window","_Format",function(t,e){return{restrict:"A",require:"ngModel",link:function(t,r,n,i){e(n.paymentsFormat,r,i)}}}]),angular.module("angularPayments").factory("_Validate",["Cards","Common","$parse",function(t,e,r){var n=[].indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},i=function(t){var e,r,n,i,a,o;for(n=!0,i=0,r=(t+"").split("").reverse(),a=0,o=r.length;a<o;a++)e=r[a],e=parseInt(e,10),(n=!n)&&(e*=2),e>9&&(e-=9),i+=e;return i%10===0},a={};return a.cvc=function(e,i,a,o){var s,l;if(null==e||0==e.length)return!0;if(!/^\d+$/.test(e))return!1;var u;if(o.paymentsTypeModel){var f=r(o.paymentsTypeModel);u=f(a)}return u?(s=e.length,n.call(null!=(l=t.fromType(u))?l.cvcLength:void 0,s)>=0):e.length>=3&&e.length<=4},a.card=function(e,a,o,s){var l,u,f;s.paymentsTypeModel&&(f=r(s.paymentsTypeModel));var c=function(){f&&f.assign(o,null),a.$card=null};return null==e||0==e.length?(c(),!0):(e=(e+"").replace(/\s+|-/g,""),/^\d+$/.test(e)&&(l=t.fromNumber(e))?(a.$card=angular.copy(l),f&&f.assign(o,l.type),ret=(u=e.length,n.call(l.length,u)>=0&&(l.luhn===!1||i(e))),ret):(c(),!1))},a.expiry=function(t){if(null==t||0==t.length)return!0;obj=e.parseExpiry(t),month=obj.month,year=obj.year;var r,n,i;return!(!month||!year)&&(!!/^\d+$/.test(month)&&(!!/^\d+$/.test(year)&&(parseInt(month,10)<=12&&(2===year.length&&(i=(new Date).getFullYear(),i=i.toString().slice(0,2),year=i+year),n=new Date(year,month),r=new Date,n.setMonth(n.getMonth()-1),n.setMonth(n.getMonth()+1,1),n>r))))},function(t,e,r,n,i){if(!a[t])throw types=Object.keys(a),errstr='Unknown type for validation: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return a[t](e,r,n,i)}}]).factory("_ValidateWatch",["_Validate",function(t){var e={};return e.cvc=function(e,r,n,i){i.paymentsTypeModel&&n.$watch(i.paymentsTypeModel,function(a,o){if(a!=o){var s=t(e,r.$modelValue,r,n,i);r.$setValidity(e,s)}})},function(t,r,n,i){if(e[t])return e[t](t,r,n,i)}}]).directive("paymentsValidate",["$window","_Validate","_ValidateWatch",function(t,e,r){return{restrict:"A",require:"ngModel",link:function(t,n,i,a){var o=i.paymentsValidate;r(o,a,t,i);var s=function(r){var n=e(o,r,a,t,i);return a.$setValidity(o,n),n?r:void 0};a.$formatters.push(s),a.$parsers.push(s)}}}]),angular.module("angularPayments").directive("stripeForm",["$window","$parse","Common",function(t,e,r){return _getDataToSend=function(t){var e=["number","expMonth","expYear","cvc","name","addressLine1","addressLine2","addressCity","addressState","addressZip","addressCountry"],r=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},n={};for(i in e)t.hasOwnProperty(e[i])&&(n[r(e[i])]=angular.copy(t[e[i]]));return n.number=(n.number||"").replace(/ /g,""),n},{restrict:"A",link:function(e,n,i){if(!t.Stripe)throw"stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html.";var a=angular.element(n);a.bind("submit",function(){expMonthUsed=!!e.expMonth,expYearUsed=!!e.expYear,expMonthUsed&&expYearUsed||(exp=r.parseExpiry(e.expiry),e.expMonth=exp.month,e.expYear=exp.year);var n=a.find("button");n.prop("disabled",!0),a.hasClass("ng-valid")?t.Stripe.createToken(_getDataToSend(e),function(){var t=arguments;e.$apply(function(){e[i.stripeForm].apply(e,t)}),n.prop("disabled",!1)}):(e.$apply(function(){e[i.stripeForm].apply(e,[400,{error:"Invalid form submitted."}])}),n.prop("disabled",!1)),e.expMonth=null,e.expYear=null})}}}]),!function(t,e,r){"use strict";function n(e){if(this.support=!("undefined"==typeof File||"undefined"==typeof Blob||"undefined"==typeof FileList||!Blob.prototype.slice&&!Blob.prototype.webkitSlice&&!Blob.prototype.mozSlice),this.support){this.supportDirectory=/Chrome/.test(t.navigator.userAgent),this.files=[],this.defaults={chunkSize:1048576,forceChunkSize:!1,simultaneousUploads:3,singleFile:!1,fileParameterName:"file",progressCallbacksInterval:500,speedSmoothingFactor:.1,query:{},headers:{},withCredentials:!1,preprocess:null,method:"multipart",testMethod:"GET",uploadMethod:"POST",prioritizeFirstAndLastChunk:!1,allowDuplicateUploads:!1,target:"/",testChunks:!0,generateUniqueIdentifier:null,maxChunkRetries:0,chunkRetryInterval:null,permanentErrors:[404,413,415,500,501],successStatuses:[200,201,202],onDropStopPropagation:!1,initFileFn:null,readFileFn:a},this.opts={},this.events={};var r=this;this.onDrop=function(t){r.opts.onDropStopPropagation&&t.stopPropagation(),t.preventDefault();var e=t.dataTransfer;e.items&&e.items[0]&&e.items[0].webkitGetAsEntry?r.webkitReadDataTransfer(t):r.addFiles(e.files,t)},this.preventEvent=function(t){t.preventDefault()},this.opts=n.extend({},this.defaults,e||{})}}function i(t,e){this.flowObj=t,this.bytes=null,this.file=e,this.name=e.fileName||e.name,this.size=e.size,this.relativePath=e.relativePath||e.webkitRelativePath||this.name,this.uniqueIdentifier=t.generateUniqueIdentifier(e),this.chunks=[],this.paused=!1,this.error=!1,this.averageSpeed=0,this.currentSpeed=0,this._lastProgressCallback=Date.now(),this._prevUploadedSize=0,this._prevProgress=0,this.bootstrap()}function a(t,e,r,n,i){var a="slice";t.file.slice?a="slice":t.file.mozSlice?a="mozSlice":t.file.webkitSlice&&(a="webkitSlice"),i.readFinished(t.file[a](e,r,n))}function o(t,e,r){this.flowObj=t,this.fileObj=e,this.offset=r,this.tested=!1,this.retries=0,this.pendingRetry=!1,this.preprocessState=0,this.readState=0,this.loaded=0,this.total=0,this.chunkSize=this.flowObj.opts.chunkSize,this.startByte=this.offset*this.chunkSize,this.computeEndByte=function(){var t=Math.min(this.fileObj.size,(this.offset+1)*this.chunkSize);return this.fileObj.size-t<this.chunkSize&&!this.flowObj.opts.forceChunkSize&&(t=this.fileObj.size),t},this.endByte=this.computeEndByte(),this.xhr=null;var n=this;this.event=function(t,e){e=Array.prototype.slice.call(arguments),e.unshift(n),n.fileObj.chunkEvent.apply(n.fileObj,e)},this.progressHandler=function(t){t.lengthComputable&&(n.loaded=t.loaded,n.total=t.total),n.event("progress",t)},this.testHandler=function(t){var e=n.status(!0);"error"===e?(n.event(e,n.message()),n.flowObj.uploadNextChunk()):"success"===e?(n.tested=!0,n.event(e,n.message()),n.flowObj.uploadNextChunk()):n.fileObj.paused||(n.tested=!0,n.send())},this.doneHandler=function(t){var e=n.status();if("success"===e||"error"===e)delete this.data,n.event(e,n.message()),n.flowObj.uploadNextChunk();else{n.event("retry",n.message()),n.pendingRetry=!0,n.abort(),n.retries++;var r=n.flowObj.opts.chunkRetryInterval;null!==r?setTimeout(function(){n.send()},r):n.send()}}}function s(t,e){var r=t.indexOf(e);r>-1&&t.splice(r,1)}function l(t,e){return"function"==typeof t&&(e=Array.prototype.slice.call(arguments),t=t.apply(null,e.slice(1))),t}function u(t,e){setTimeout(t.bind(e),0)}function f(t,e){return c(arguments,function(e){e!==t&&c(e,function(e,r){t[r]=e})}),t}function c(t,e,r){if(t){var n;if("undefined"!=typeof t.length){for(n=0;n<t.length;n++)if(e.call(r,t[n],n)===!1)return}else for(n in t)if(t.hasOwnProperty(n)&&e.call(r,t[n],n)===!1)return}}var p=t.navigator.msPointerEnabled;n.prototype={on:function(t,e){t=t.toLowerCase(),this.events.hasOwnProperty(t)||(this.events[t]=[]),this.events[t].push(e)},off:function(t,e){t!==r?(t=t.toLowerCase(),e!==r?this.events.hasOwnProperty(t)&&s(this.events[t],e):delete this.events[t]):this.events={}},fire:function(t,e){e=Array.prototype.slice.call(arguments),t=t.toLowerCase();var r=!1;return this.events.hasOwnProperty(t)&&c(this.events[t],function(t){r=t.apply(this,e.slice(1))===!1||r},this),"catchall"!=t&&(e.unshift("catchAll"),r=this.fire.apply(this,e)===!1||r),!r},webkitReadDataTransfer:function(t){function e(t){t.readEntries(function(a){a.length?(o+=a.length,c(a,function(t){if(t.isFile){var i=t.fullPath;t.file(function(t){r(t,i)},n)}else t.isDirectory&&e(t.createReader())}),e(t)):i()},n)}function r(t,e){t.relativePath=e.substring(1),s.push(t),i()}function n(t){throw t}function i(){0==--o&&a.addFiles(s,t)}var a=this,o=t.dataTransfer.items.length,s=[];c(t.dataTransfer.items,function(t){var n=t.webkitGetAsEntry();return n?void(n.isFile?r(t.getAsFile(),n.fullPath):e(n.createReader())):void i()})},generateUniqueIdentifier:function(t){var e=this.opts.generateUniqueIdentifier;if("function"==typeof e)return e(t);var r=t.relativePath||t.webkitRelativePath||t.fileName||t.name;return t.size+"-"+r.replace(/[^0-9a-zA-Z_-]/gim,"")},uploadNextChunk:function(t){var e=!1;if(this.opts.prioritizeFirstAndLastChunk&&(c(this.files,function(t){return!t.paused&&t.chunks.length&&"pending"===t.chunks[0].status()?(t.chunks[0].send(),e=!0,!1):!t.paused&&t.chunks.length>1&&"pending"===t.chunks[t.chunks.length-1].status()?(t.chunks[t.chunks.length-1].send(),e=!0,!1):void 0}),e))return e;if(c(this.files,function(t){return t.paused||c(t.chunks,function(t){return"pending"===t.status()?(t.send(),e=!0,!1):void 0}),!e&&void 0}),e)return!0;var r=!1;return c(this.files,function(t){return t.isComplete()?void 0:(r=!0,!1)}),r||t||u(function(){this.fire("complete")},this),!1},assignBrowse:function(t,r,n,i){t instanceof Element&&(t=[t]),c(t,function(t){var a;"INPUT"===t.tagName&&"file"===t.type?a=t:(a=e.createElement("input"),a.setAttribute("type","file"),f(a.style,{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}),t.appendChild(a),t.addEventListener("click",function(){a.click()},!1)),this.opts.singleFile||n||a.setAttribute("multiple","multiple"),r&&a.setAttribute("webkitdirectory","webkitdirectory"),c(i,function(t,e){a.setAttribute(e,t)});var o=this;a.addEventListener("change",function(t){t.target.value&&(o.addFiles(t.target.files,t),t.target.value="")},!1)},this)},assignDrop:function(t){"undefined"==typeof t.length&&(t=[t]),c(t,function(t){t.addEventListener("dragover",this.preventEvent,!1),t.addEventListener("dragenter",this.preventEvent,!1),t.addEventListener("drop",this.onDrop,!1)},this)},unAssignDrop:function(t){"undefined"==typeof t.length&&(t=[t]),c(t,function(t){t.removeEventListener("dragover",this.preventEvent),t.removeEventListener("dragenter",this.preventEvent),t.removeEventListener("drop",this.onDrop)},this)},isUploading:function(){var t=!1;return c(this.files,function(e){return e.isUploading()?(t=!0,!1):void 0}),t},_shouldUploadNext:function(){var t=0,e=!0,r=this.opts.simultaneousUploads;return c(this.files,function(n){c(n.chunks,function(n){return"uploading"===n.status()&&(t++,t>=r)?(e=!1,!1):void 0})}),e&&t},upload:function(){var t=this._shouldUploadNext();if(t!==!1){this.fire("uploadStart");for(var e=!1,r=1;r<=this.opts.simultaneousUploads-t;r++)e=this.uploadNextChunk(!0)||e;e||u(function(){this.fire("complete")},this)}},resume:function(){c(this.files,function(t){t.resume()})},pause:function(){c(this.files,function(t){t.pause()})},cancel:function(){for(var t=this.files.length-1;t>=0;t--)this.files[t].cancel()},progress:function(){var t=0,e=0;return c(this.files,function(r){t+=r.progress()*r.size,e+=r.size}),e>0?t/e:0},addFile:function(t,e){this.addFiles([t],e)},addFiles:function(t,e){var r=[];c(t,function(t){if((!p||p&&t.size>0)&&(t.size%4096!==0||"."!==t.name&&"."!==t.fileName)&&(this.opts.allowDuplicateUploads||!this.getFromUniqueIdentifier(this.generateUniqueIdentifier(t)))){var n=new i(this,t);this.fire("fileAdded",n,e)&&r.push(n)}},this),this.fire("filesAdded",r,e)&&(c(r,function(t){this.opts.singleFile&&this.files.length>0&&this.removeFile(this.files[0]),this.files.push(t)},this),this.fire("filesSubmitted",r,e))},removeFile:function(t){for(var e=this.files.length-1;e>=0;e--)this.files[e]===t&&(this.files.splice(e,1),t.abort(),this.fire("fileRemoved",t))},getFromUniqueIdentifier:function(t){var e=!1;return c(this.files,function(r){r.uniqueIdentifier===t&&(e=r)}),e},getSize:function(){var t=0;return c(this.files,function(e){t+=e.size}),t},sizeUploaded:function(){var t=0;return c(this.files,function(e){t+=e.sizeUploaded()}),t},timeRemaining:function(){var t=0,e=0;return c(this.files,function(r){r.paused||r.error||(t+=r.size-r.sizeUploaded(),e+=r.averageSpeed)}),t&&!e?Number.POSITIVE_INFINITY:t||e?Math.floor(t/e):0}},i.prototype={measureSpeed:function(){var t=Date.now()-this._lastProgressCallback;if(t){var e=this.flowObj.opts.speedSmoothingFactor,r=this.sizeUploaded();this.currentSpeed=Math.max((r-this._prevUploadedSize)/t*1e3,0),this.averageSpeed=e*this.currentSpeed+(1-e)*this.averageSpeed,this._prevUploadedSize=r}},chunkEvent:function(t,e,r){switch(e){case"progress":if(Date.now()-this._lastProgressCallback<this.flowObj.opts.progressCallbacksInterval)break;this.measureSpeed(),this.flowObj.fire("fileProgress",this,t),this.flowObj.fire("progress"),this._lastProgressCallback=Date.now();break;case"error":this.error=!0,this.abort(!0),this.flowObj.fire("fileError",this,r,t),this.flowObj.fire("error",r,this,t);break;case"success":if(this.error)return;this.measureSpeed(),this.flowObj.fire("fileProgress",this,t),this.flowObj.fire("progress"),this._lastProgressCallback=Date.now(),this.isComplete()&&(this.currentSpeed=0,this.averageSpeed=0,this.flowObj.fire("fileSuccess",this,r,t));break;case"retry":this.flowObj.fire("fileRetry",this,t)}},pause:function(){this.paused=!0,this.abort()},resume:function(){this.paused=!1,this.flowObj.upload()},abort:function(t){this.currentSpeed=0,this.averageSpeed=0;var e=this.chunks;t&&(this.chunks=[]),c(e,function(t){"uploading"===t.status()&&(t.abort(),this.flowObj.uploadNextChunk())},this)},cancel:function(){this.flowObj.removeFile(this)},retry:function(){this.bootstrap(),this.flowObj.upload()},bootstrap:function(){"function"==typeof this.flowObj.opts.initFileFn&&this.flowObj.opts.initFileFn(this),this.abort(!0),this.error=!1,this._prevProgress=0;for(var t=this.flowObj.opts.forceChunkSize?Math.ceil:Math.floor,e=Math.max(t(this.size/this.flowObj.opts.chunkSize),1),r=0;e>r;r++)this.chunks.push(new o(this.flowObj,this,r))},progress:function(){if(this.error)return 1;if(1===this.chunks.length)return this._prevProgress=Math.max(this._prevProgress,this.chunks[0].progress()),this._prevProgress;var t=0;c(this.chunks,function(e){t+=e.progress()*(e.endByte-e.startByte)});var e=t/this.size;return this._prevProgress=Math.max(this._prevProgress,e>.9999?1:e),this._prevProgress},isUploading:function(){var t=!1;return c(this.chunks,function(e){return"uploading"===e.status()?(t=!0,!1):void 0}),t},isComplete:function(){var t=!1;return c(this.chunks,function(e){var r=e.status();return"pending"===r||"uploading"===r||"reading"===r||1===e.preprocessState||1===e.readState?(t=!0,!1):void 0}),!t},sizeUploaded:function(){var t=0;return c(this.chunks,function(e){t+=e.sizeUploaded()}),t},timeRemaining:function(){if(this.paused||this.error)return 0;var t=this.size-this.sizeUploaded();return t&&!this.averageSpeed?Number.POSITIVE_INFINITY:t||this.averageSpeed?Math.floor(t/this.averageSpeed):0},getType:function(){return this.file.type&&this.file.type.split("/")[1]},getExtension:function(){return this.name.substr((~-this.name.lastIndexOf(".")>>>0)+2).toLowerCase()}},o.prototype={getParams:function(){return{flowChunkNumber:this.offset+1,flowChunkSize:this.flowObj.opts.chunkSize,flowCurrentChunkSize:this.endByte-this.startByte,flowTotalSize:this.fileObj.size,flowIdentifier:this.fileObj.uniqueIdentifier,flowFilename:this.fileObj.name,flowRelativePath:this.fileObj.relativePath,flowTotalChunks:this.fileObj.chunks.length}},getTarget:function(t,e){return t+=t.indexOf("?")<0?"?":"&",t+e.join("&")},test:function(){this.xhr=new XMLHttpRequest,this.xhr.addEventListener("load",this.testHandler,!1),this.xhr.addEventListener("error",this.testHandler,!1);var t=l(this.flowObj.opts.testMethod,this.fileObj,this),e=this.prepareXhrRequest(t,!0);this.xhr.send(e)},preprocessFinished:function(){this.endByte=this.computeEndByte(),this.preprocessState=2,this.send()},readFinished:function(t){this.readState=2,this.bytes=t,this.send()},send:function(){var t=this.flowObj.opts.preprocess,e=this.flowObj.opts.readFileFn;if("function"==typeof t)switch(this.preprocessState){case 0:return this.preprocessState=1,void t(this);case 1:return}switch(this.readState){case 0:return this.readState=1,void e(this.fileObj,this.startByte,this.endByte,this.fileObj.file.type,this);case 1:return}if(this.flowObj.opts.testChunks&&!this.tested)return void this.test();this.loaded=0,this.total=0,this.pendingRetry=!1,this.xhr=new XMLHttpRequest,this.xhr.upload.addEventListener("progress",this.progressHandler,!1),this.xhr.addEventListener("load",this.doneHandler,!1),this.xhr.addEventListener("error",this.doneHandler,!1);var r=l(this.flowObj.opts.uploadMethod,this.fileObj,this),n=this.prepareXhrRequest(r,!1,this.flowObj.opts.method,this.bytes);this.xhr.send(n)},abort:function(){var t=this.xhr;this.xhr=null,t&&t.abort()},status:function(t){return 1===this.readState?"reading":this.pendingRetry||1===this.preprocessState?"uploading":this.xhr?this.xhr.readyState<4?"uploading":this.flowObj.opts.successStatuses.indexOf(this.xhr.status)>-1?"success":this.flowObj.opts.permanentErrors.indexOf(this.xhr.status)>-1||!t&&this.retries>=this.flowObj.opts.maxChunkRetries?"error":(this.abort(),"pending"):"pending"},message:function(){return this.xhr?this.xhr.responseText:""},progress:function(){if(this.pendingRetry)return 0;var t=this.status();return"success"===t||"error"===t?1:"pending"===t?0:this.total>0?this.loaded/this.total:0},sizeUploaded:function(){var t=this.endByte-this.startByte;return"success"!==this.status()&&(t=this.progress()*t),t},prepareXhrRequest:function(t,e,r,n){var i=l(this.flowObj.opts.query,this.fileObj,this,e);i=f(i,this.getParams());var a=l(this.flowObj.opts.target,this.fileObj,this,e),o=null;if("GET"===t||"octet"===r){var s=[];c(i,function(t,e){s.push([encodeURIComponent(e),encodeURIComponent(t)].join("="))}),a=this.getTarget(a,s),o=n||null}else o=new FormData,c(i,function(t,e){o.append(e,t)}),o.append(this.flowObj.opts.fileParameterName,n,this.fileObj.file.name);return this.xhr.open(t,a,!0),this.xhr.withCredentials=this.flowObj.opts.withCredentials,c(l(this.flowObj.opts.headers,this.fileObj,this,e),function(t,e){this.xhr.setRequestHeader(e,t)},this),o}},n.evalOpts=l,n.extend=f,n.each=c,n.FlowFile=i,n.FlowChunk=o,n.version="2.11.2","object"==typeof module&&module&&"object"==typeof module.exports?module.exports=n:(t.Flow=n,
"function"==typeof define&&define.amd&&define("flow",[],function(){return n}))}(window,document),angular.module("flow.provider",[]).provider("flowFactory",function(){"use strict";this.defaults={},this.factory=function(t){return new Flow(t)},this.events=[],this.on=function(t,e){this.events.push([t,e])},this.$get=function(){var t=this.factory,e=this.defaults,r=this.events;return{create:function(n){var i=t(angular.extend({},e,n));return angular.forEach(r,function(t){i.on(t[0],t[1])}),i}}}}),angular.module("flow.init",["flow.provider"]).controller("flowCtrl",["$scope","$attrs","$parse","flowFactory",function(t,e,r,n){var i=angular.extend({},t.$eval(e.flowInit)),a=t.$eval(e.flowObject)||n.create(i),o=function(e){var r=Array.prototype.slice.call(arguments);r.shift();var n=t.$broadcast.apply(t,["flow::"+e,a].concat(r));return{progress:1,filesSubmitted:1,fileSuccess:1,fileError:1,complete:1}[e]&&t.$apply(),!n.defaultPrevented&&void 0};a.on("catchAll",o),t.$on("$destroy",function(){a.off("catchAll",o)}),t.$flow=a,e.hasOwnProperty("flowName")&&(r(e.flowName).assign(t,a),t.$on("$destroy",function(){r(e.flowName).assign(t)}))}]).directive("flowInit",[function(){return{scope:!0,controller:"flowCtrl"}}]),angular.module("flow.btn",["flow.init"]).directive("flowBtn",[function(){return{restrict:"EA",scope:!1,require:"^flowInit",link:function(t,e,r){var n=r.hasOwnProperty("flowDirectory"),i=r.hasOwnProperty("flowSingleFile"),a=r.hasOwnProperty("flowAttrs")&&t.$eval(r.flowAttrs);t.$flow.assignBrowse(e,n,i,a)}}}]),angular.module("flow.dragEvents",["flow.init"]).directive("flowPreventDrop",function(){return{scope:!1,link:function(t,e,r){e.bind("drop dragover",function(t){t.preventDefault()})}}}).directive("flowDragEnter",["$timeout",function(t){return{scope:!1,link:function(e,r,n){function i(t){var e=!1,r=t.dataTransfer||t.originalEvent.dataTransfer;return angular.forEach(r&&r.types,function(t){"Files"===t&&(e=!0)}),e}var a,o=!1;r.bind("dragover",function(r){i(r)&&(o||(e.$apply(n.flowDragEnter),o=!0),t.cancel(a),r.preventDefault())}),r.bind("dragleave drop",function(r){t.cancel(a),a=t(function(){e.$eval(n.flowDragLeave),a=null,o=!1},100)})}}}]),angular.module("flow.drop",["flow.init"]).directive("flowDrop",function(){return{scope:!1,require:"^flowInit",link:function(t,e,r){function n(){t.$flow.assignDrop(e)}function i(){t.$flow.unAssignDrop(e)}r.flowDropEnabled?t.$watch(r.flowDropEnabled,function(t){t?n():i()}):n()}}}),!function(t){"use strict";function e(t){return t.charAt(0).toUpperCase()+t.slice(1)}var r=t.module("flow.events",["flow.init"]),n={fileSuccess:["$file","$message"],fileProgress:["$file"],fileAdded:["$file","$event"],filesAdded:["$files","$event"],filesSubmitted:["$files","$event"],fileRetry:["$file"],fileError:["$file","$message"],uploadStart:[],complete:[],progress:[],error:["$message","$file"]};t.forEach(n,function(n,i){var a="flow"+e(i);"flowUploadStart"==a&&(a="flowUploadStarted"),r.directive(a,[function(){return{require:"^flowInit",controller:["$scope","$attrs",function(e,r){e.$on("flow::"+i,function(){var i=Array.prototype.slice.call(arguments),o=i.shift();if(e.$flow===i.shift()){var s={};t.forEach(n,function(t,e){s[t]=i[e]}),e.$eval(r[a],s)===!1&&o.preventDefault()}})}]}}])})}(angular),angular.module("flow.img",["flow.init"]).directive("flowImg",[function(){return{scope:!1,require:"^flowInit",link:function(t,e,r){var n=r.flowImg;t.$watch(n,function(e){if(e){var n=new FileReader;n.readAsDataURL(e.file),n.onload=function(e){t.$apply(function(){r.$set("src",e.target.result)})}}})}}}]),angular.module("flow.transfers",["flow.init"]).directive("flowTransfers",[function(){return{scope:!0,require:"^flowInit",link:function(t){t.transfers=t.$flow.files}}}]),angular.module("flow",["flow.provider","flow.init","flow.events","flow.btn","flow.drop","flow.transfers","flow.img","flow.dragEvents"]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
