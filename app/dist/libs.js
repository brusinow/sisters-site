"use strict";angular.module("angular-parallax",[]).directive("parallax",["$window",function(t){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function(e,r,n){var a=function(){e.parallaxHorizontalOffset||(e.parallaxHorizontalOffset="0");var n=t.pageYOffset*(e.parallaxRatio?e.parallaxRatio:1.1);if(n<=t.innerHeight){var a=n<e.parallaxVerticalOffset?e.parallaxVerticalOffset:n,i=e.parallaxHorizontalOffset.indexOf("%")===-1?e.parallaxHorizontalOffset+"px":e.parallaxHorizontalOffset;r.css("transform","translate("+i+", "+a+"px)")}};a(),angular.element(t).bind("scroll",a),angular.element(t).bind("touchmove",a)}}}]).directive("parallaxBackground",["$window",function(t){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function(e,r,n){var a=function(){var n=e.parallaxVerticalOffset/100*r[0].offsetHeight,a=(r.prop("offsetTop")-t.pageYOffset)*(e.parallaxRatio?e.parallaxRatio:1.1)-(n||0);a>=e.parallaxStartPoint&&(a=e.parallaxStartPoint),r.css("background-position","50% "+a+"px")};angular.element(t).bind("load",function(t){a(),e.$apply()}),angular.element(t).bind("scroll",a),angular.element(t).bind("touchmove",a)}}}]),angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function(t,e,r,n){t.$on("ngCart:change",function(){e.$save()}),angular.isObject(n.get("cart"))?e.$restore(n.get("cart")):e.init()}]).service("ngCart",["$rootScope","$http","$location","$state","$window","ngCartItem","store",function(t,e,r,n,a,i,o){var s;this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(r,n,a,o,l,u,c){var p=this,f=6e4,d=this.getItemBySku(n);if("object"==typeof d){var g,h=d.getQuantity();if("ticket"===d._data.product_type){g=l-h;var u={ticketId:d.parent,ticketCount:g};e.post("/store/changeSessionTicket",u).then(function(){console.log("success"),clearTimeout(s),t.$broadcast("setTimer",!0),console.log("should be restarting timer"),s=setTimeout(function(){p.removeTickets(),t.$broadcast("setTimer",!1)},f),d.setQuantity(l,!1),t.$broadcast("ngCart:itemUpdated",d)},function(e){console.log(e),t.$broadcast("lowCount",{bool:!0,originalVal:h})})}else d.setQuantity(l,!1),t.$broadcast("ngCart:itemUpdated",d)}else{var m=new i(r,n,a,o,l,u,c);if("ticket"===m._data.product_type){console.log("A ticket was added! ",m);var u={ticketId:m.parent,ticketCount:m.quantity};e.post("/store/addSessionTicket",u).then(function(){t.$broadcast("setTimer",!0),s=setTimeout(function(){p.removeTickets(),t.$broadcast("setTimer",!1)},f)},function(t){console.log(t)})}this.$cart.items.push(m),t.$broadcast("ngCart:itemAdded",m)}t.$broadcast("ngCart:change",{})},this.addItemBtn=function(e,n,a,o,s,l){var u=0,c=JSON.parse(n);for(var p in c)console.log("prop: ",c[p]),u++;if(console.log("count is : ",u),u<2){var f=this.getItemBySku(n);if("object"==typeof f)f.setQuantity(s,!1),t.$broadcast("ngCart:itemUpdated",f);else{var d=new i(e,n,a,o,s,l);this.$cart.items.push(d),t.$broadcast("ngCart:itemAdded",d)}t.$broadcast("ngCart:change",{})}else r.url("/store/"+e)},this.changeQuantity=function(e,r){var n=this.getItemBySku(e);"object"==typeof n?(n.setQuantity(r,!0),t.$broadcast("ngCart:itemUpdated",n)):console.log("nothing there"),t.$broadcast("ngCart:change",{})},this.getItemById=function(t){var e=this.getCart().items,r=!1;return angular.forEach(e,function(e){e.getId()===t&&(r=e)}),r},this.getItemBySku=function(t){var e=this.getCart().items,r=!1;return angular.forEach(e,function(e){e.getSku()===t&&(r=e)}),r},this.setShipping=function(e){return this.$cart.shipping=e,t.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(e){return this.$cart.taxRate=+parseFloat(e).toFixed(2),t.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(t){return this.$cart=t,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var t=0,e=this.getItems();return angular.forEach(e,function(e){t+=e.getQuantity()}),t},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getCartTotal=function(){var t=0;return angular.forEach(this.getCart().items,function(e){t+=e.getTotal()}),parseFloat(t)},this.getSubTotal=function(){var t=0;angular.forEach(this.getCart().items,function(e){t+=e.getTotal()});var e=this.getShipping()||0;return t+=e,parseFloat(t)},this.removeTickets=function(){var t=this;angular.forEach(this.getCart().items,function(e,r){"ticket"===e._data.product_type&&t.removeItem(r)})},this.totalCost=function(){return+parseInt(this.getCartTotal()+this.getShipping()+this.getTax())},this.removeItem=function(e){var r=this.$cart.items.splice(e,1)[0]||{};t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.removeItemById=function(e){var r,n=this.getCart();angular.forEach(n.items,function(t,r){t.getId()===e&&(t=n.items.splice(r,1)[0]||{})}),this.setCart(n),t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.empty=function(){t.$broadcast("ngCart:change",{}),this.$cart.items=[],a.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var t=[];return angular.forEach(this.getItems(),function(e){t.push(e.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:t}},this.$restore=function(t){var e=this;e.init(),e.$cart.shipping=t.shipping,e.$cart.taxRate=t.taxRate,e.$cart.tax=t.tax,angular.forEach(t.items,function(t){console.log("item: ",t),e.$cart.items.push(new i(t.parent,t.sku,t.description,t.amount,t.quantity,t._data,t.attr))}),this.$save()},this.$save=function(){return o.set("cart",angular.toJson(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function(t,e){var r=function(t,e,r,n,a,i,o){console.log("what is id? ",t),console.log("what is data? ",i),this.setId(t),this.setSku(e),this.setName(r),this.setPrice(n),this.setQuantity(a),this.setData(i),this.setAttr(o||i.attr)};return r.prototype.setId=function(t){t?this.parent=t:e.error("An ID must be provided")},r.prototype.setSku=function(t){t?this.sku=t:e.error("A sku must be provided")},r.prototype.getId=function(){return this.parent},r.prototype.getSku=function(){return this.sku},r.prototype.setName=function(t){t?this.description=t:e.error("A name must be provided")},r.prototype.getName=function(){return this.description},r.prototype.setPrice=function(t){var r=parseFloat(t);r?r<=0?e.error("A price must be over 0"):this.amount=r:e.error("A price must be provided")},r.prototype.getPrice=function(){return this.amount},r.prototype.setQuantity=function(t,r){var n=parseInt(t);n%1===0?(r===!0?this.quantity+=n:this.quantity=n,this.quantity<1&&(this.quantity=1)):(this.quantity=1,e.info("Quantity must be an integer and was defaulted to 1"))},r.prototype.getQuantity=function(){return this.quantity},r.prototype.setData=function(t){console.log("setting data"),t&&(this._data=t)},r.prototype.getData=function(){return this._data?this._data:void e.info("This item has no data")},r.prototype.setAttr=function(t){t&&(this.attr=t)},r.prototype.getAttr=function(){return!!this.attr&&this.attr},r.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},r.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},r}]).service("store",["$window",function(t){return{get:function(e){if(t.localStorage.getItem(e)){var r=angular.fromJson(t.localStorage.getItem(e));return JSON.parse(r)}return!1},set:function(e,r){return void 0===r?t.localStorage.removeItem(e):t.localStorage.setItem(e,angular.toJson(r)),t.localStorage.getItem(e)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function(t,e,r,n){t.loaded=!1,t.toggleCart=!1,t.ngCart=r,n(function(){t.loaded=!0});var a=r.getItems();console.log("items before filtering shippable: ",a);var i=[];angular.forEach(a,function(t){t._data.shippable===!0&&i.push(t)}),i.length>0?(console.log("should be set shippable!!!!"),t.shipBool=!0,t.$emit("setShippable",!0)):(console.log("should not be shippable!!!!"),t.shipBool=!1,t.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function(t,e,r){t.loaded=!1,t.toggleCart=!1,t.ngCart=e,r(function(){t.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function(t,e){t.ngCart=e}]).directive("ngcartAddBtn",["ngCart",function(t){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartBtn.html":e.templateUrl},link:function(e,r,n){e.attrs=n,e.inCart=function(){return t.getItemBySku(n.sku)},e.inCart()?e.q=t.getItemBySku(n.sku).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var a=1;a<=e.quantityMax;a++)e.qtyOpt.push(a)}}}]).directive("ngcartAddtocart",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocart.html":e.templateUrl},link:function(e,r,n){e.attrs=n,e.inCart=function(){return t.getItemBySku(n.sku)},e.inCart()?e.q=t.getItemBySku(n.sku).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var a=1;a<=e.quantityMax;a++)e.qtyOpt.push(a)}}}]).directive("ngcartAddtocartProduct",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",attr:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartProduct.html":e.templateUrl},link:function(e,r,n){e.attrs=n,e.inCart=function(){return t.getItemBySku(n.sku)},e.inCart()?e.q=t.getItemBySku(n.sku).getQuantity():e.q=parseInt(e.quantity),e.updateQ=function(t){console.log("count should be: ",t),e.qtyOpt=[];for(var r=1;r<=t;r++)e.qtyOpt.push(r)},e.updateQ(e.quantityMax),e.$on("changeQ",function(t,r){console.log("data in $on? ",r),console.log("updating in directive!"),e.updateQ(r.count)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/summary.html":e.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart-confirm.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart-collapse.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function(t,e,r,n){e.ngCart=r,e.checkout=function(){n.setService(e.service),n.setSettings(e.settings),n.checkout().success(function(e,r,n,a){t.$broadcast("ngCart:checkout_succeeded",e)}).error(function(e,r,n,a){t.$broadcast("ngCart:checkout_failed",{statusCode:r,error:e})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"template/ngCart/checkout.html":e.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function(t){this._obj={service:void 0,settings:void 0},this.setService=function(t){this._obj.service=t},this.setSettings=function(t){this._obj.settings=t},this.checkout=function(){var e=t.get("ngCart.fulfilment."+this._obj.service);return e.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function(t,e,r){this.checkout=function(){var n=t.defer();return e.info(r.toObject()),n.resolve({cart:r.toObject()}),n.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function(t,e){this.checkout=function(r){return t.post(r.url,{data:e.toObject(),options:r.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function(t,e){}]),function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var n in r)("object"==typeof exports?exports:t)[n]=r[n]}}(this,function(){return function(t){function e(n){if(r[n])return r[n].exports;var a=r[n]={exports:{},id:n,loaded:!1};return t[n].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){t.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",r(1)]).factory("FileSaverUtils",[r(2)]).factory("Blob",["$window",r(3)]).factory("SaveAs",[r(5)])},function(t,e){t.exports=function(t,e,r){function n(t,n,a){try{e(t,n,a)}catch(t){r.handleErrors(t.message)}}return{saveAs:function(t,e,a){return r.isBlobInstance(t)||r.handleErrors("Data argument should be a blob instance"),r.isString(e)||r.handleErrors("Filename argument should be a string"),n(t,e,a)}}}},function(t,e){t.exports=function(){return{handleErrors:function(t){throw new Error(t)},isString:function(t){return"string"==typeof t||t instanceof String},isUndefined:function(t){return"undefined"==typeof t},isBlobInstance:function(t){return t instanceof Blob}}}},function(t,e,r){r(4),t.exports=function(t){return t.Blob}},function(t,e){!function(t){if(t.URL=t.URL||t.webkitURL,t.Blob&&t.URL)try{return void new Blob}catch(t){}var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},r=function(){this.data=[]},n=function(t,e,r){this.data=t,this.size=t.length,this.type=e,this.encoding=r},a=r.prototype,i=n.prototype,o=t.FileReaderSync,s=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=l.length,c=t.URL||t.webkitURL||t,p=c.createObjectURL,f=c.revokeObjectURL,d=c,g=t.btoa,h=t.atob,m=t.ArrayBuffer,v=t.Uint8Array,y=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(n.fake=i.fake=!0;u--;)s.prototype[l[u]]=u+1;return c.createObjectURL||(d=t.URL=function(t){var e,r=document.createElementNS("http://www.w3.org/1999/xhtml","a");return r.href=t,"origin"in r||("data:"===r.protocol.toLowerCase()?r.origin=null:(e=t.match(y),r.origin=e&&e[1])),r}),d.createObjectURL=function(t){var e,r=t.type;return null===r&&(r="application/octet-stream"),t instanceof n?(e="data:"+r,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):g?e+";base64,"+g(t.data):e+","+encodeURIComponent(t.data)):p?p.call(c,t):void 0},d.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&f&&f.call(c,t)},a.append=function(t){var r=this.data;if(v&&(t instanceof m||t instanceof v)){for(var a="",i=new v(t),l=0,u=i.length;l<u;l++)a+=String.fromCharCode(i[l]);r.push(a)}else if("Blob"===e(t)||"File"===e(t)){if(!o)throw new s("NOT_READABLE_ERR");var c=new o;r.push(c.readAsBinaryString(t))}else t instanceof n?"base64"===t.encoding&&h?r.push(h(t.data)):"URI"===t.encoding?r.push(decodeURIComponent(t.data)):"raw"===t.encoding&&r.push(t.data):("string"!=typeof t&&(t+=""),r.push(unescape(encodeURIComponent(t))))},a.getBlob=function(t){return arguments.length||(t=null),new n(this.data.join(""),t,"raw")},a.toString=function(){return"[object BlobBuilder]"},i.slice=function(t,e,r){var a=arguments.length;return a<3&&(r=null),new n(this.data.slice(t,a>1?e:this.data.length),r,this.encoding)},i.toString=function(){return"[object Blob]"},i.close=function(){this.size=0,delete this.data},r}(t);t.Blob=function(t,r){var n=r?r.type||"":"",a=new e;if(t)for(var i=0,o=t.length;i<o;i++)Uint8Array&&t[i]instanceof Uint8Array?a.append(t[i].buffer):a.append(t[i]);var s=a.getBlob(n);return!s.slice&&s.webkitSlice&&(s.slice=s.webkitSlice),s};var r=Object.getPrototypeOf||function(t){return t.__proto__};t.Blob.prototype=r(new t.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(t,e,r){t.exports=function(){return r(6).saveAs||function(){}}},function(t,e,r){var n,a,i=i||function(t){if(!("undefined"==typeof t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,r=function(){return t.URL||t.webkitURL||t},n=e.createElementNS("http://www.w3.org/1999/xhtml","a"),a="download"in n,i=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},o=/constructor/i.test(t.HTMLElement),s=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",c=4e4,p=function(t){var e=function(){"string"==typeof t?r().revokeObjectURL(t):t.remove()};setTimeout(e,c)},f=function(t,e,r){e=[].concat(e);for(var n=e.length;n--;){var a=t["on"+e[n]];if("function"==typeof a)try{a.call(t,r||t)}catch(t){l(t)}}},d=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},g=function(e,l,c){c||(e=d(e));var g,h=this,m=e.type,v=m===u,y=function(){f(h,"writestart progress write writeend".split(" "))},b=function(){if((s||v&&o)&&t.FileReader){var n=new FileReader;return n.onloadend=function(){var e=s?n.result:n.result.replace(/^data:[^;]*;/,"data:attachment/file;"),r=t.open(e,"_blank");r||(t.location.href=e),e=void 0,h.readyState=h.DONE,y()},n.readAsDataURL(e),void(h.readyState=h.INIT)}if(g||(g=r().createObjectURL(e)),v)t.location.href=g;else{var a=t.open(g,"_blank");a||(t.location.href=g)}h.readyState=h.DONE,y(),p(g)};return h.readyState=h.INIT,a?(g=r().createObjectURL(e),void setTimeout(function(){n.href=g,n.download=l,i(n),y(),p(g),h.readyState=h.DONE})):void b()},h=g.prototype,m=function(t,e,r){return new g(t,e||t.name||"download",r)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,r){return e=e||t.name||"download",r||(t=d(t)),navigator.msSaveOrOpenBlob(t,e)}:(h.abort=function(){},h.readyState=h.INIT=0,h.WRITING=1,h.DONE=2,h.error=h.onwritestart=h.onprogress=h.onwrite=h.onabort=h.onerror=h.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=i:null!==r(7)&&null!==r(8)&&(n=[],a=function(){return i}.apply(e,n),!(void 0!==a&&(t.exports=a)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})}])});var uiroutermetatags;!function(t){function e(t,e,r,n){function a(t,e,r,a,i){n.prerenderReady=!1}function i(e,n){n.metaTags||t.debug('MetaTags - route: "'+n.name+'" does not contain any metatags'),r.update(n.metaTags)}function o(t,e,a,i,o,s){r.prerender.statusCode=500,n.prerenderReady=!0}function s(t,e,a){r.prerender.statusCode=404,n.prerenderReady=!0}e.MetaTags=r,e.$on("$stateChangeStart",a),e.$on("$stateChangeSuccess",i),e.$on("$stateChangeError",o),e.$on("$stateNotFound",s)}e.$inject=["$log","$rootScope","MetaTags","$window"];var r=angular.module("ui.router.metatags",["ui.router"]),n=function(){function t(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return t.prototype.setTitlePrefix=function(t){return this.prefix=t,this},t.prototype.setTitleSuffix=function(t){return this.suffix=t,this},t.prototype.setDefaultTitle=function(t){return this.defaultTitle=t,this},t.prototype.setDefaultDescription=function(t){return this.defaultDescription=t,this},t.prototype.setDefaultKeywords=function(t){return this.defaultKeywords=t,this},t.prototype.setDefaultRobots=function(t){return this.defaultRobots=t,this},t.prototype.setStaticProperties=function(t){return this.staticProperties=t,this},t.prototype.setOGURL=function(t){return this.enableOGURL=t,this},t.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},t}();r.provider("UIRouterMetatags",n);var a=function(){function t(t,e,r,n,a,i,o){this.$log=t,this.UIRouterMetatags=e,this.$interpolate=r,this.$injector=n,this.$state=a,this.$location=i,this.$window=o,this.prerender={}}return t.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],t.prototype.update=function(t){var e=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),t?(this.title=t.title?this.UIRouterMetatags.prefix+(this.getValue("title",t.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=t.description?this.getValue("description",t.description):this.UIRouterMetatags.defaultDescription,this.keywords=t.keywords?this.getValue("keywords",t.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=t.robots?this.getValue("robots",t.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(t.properties,function(t,r){var n=e.getValue(r,t);n&&(e.properties[r]=n)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),t&&t.prerender?(this.prerender.statusCode=t.prerender.statusCode?this.getValue("prerender.statusCode",t.prerender.statusCode):200,this.prerender.header=t.prerender.header?this.getValue("rerender.header",t.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(t){this.$log.error("error occured when extracting metatags:",t)}},t.prototype.getValue=function(t,e){try{return e?"number"==typeof e?e:"string"==typeof e&&0===e.trim().length?null:angular.isFunction(e)||Array.isArray(e)?this.$injector.invoke(e,this,this.$state.$current.locals.globals):this.$interpolate(e)(this.$state.$current.locals.globals):null}catch(e){return this.$log.error("error occured when trying to get the value of tag:",t,e),null}},t}();r.service("MetaTags",a),r.run(e)}(uiroutermetatags||(uiroutermetatags={}));var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(t,e){return t-e}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function(t,e){function r(t,e){console.log("what is templateString? ",e);var r=e.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,t.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",r),r}function n(){function t(t,e){return t>e?1:t<e?-1:0}var e=t,r=t;"object"==typeof Intl?e=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(e=function(t,e){return(t+"").localeCompare(e,void 0,{sensitivity:"case"})});var n=function(t,n){return"number"==typeof t&&"number"==typeof n?r(t,n):t instanceof Date&&n instanceof Date?r(t.getTime(),n.getTime()):e(t,n)};return n}var a=n();return{scope:!0,controller:["$scope","tableSortConfig",function(e,r){e.pagination={template:r.paginationTemplate,perPageOptions:r.perPageOptions.concat(),perPage:r.perPageDefault,currentPage:1,getPageRangeString:function(t){var r=t!==e.filtering.filteredCount?e.filtering.filteredCount:t,n=Math.max((e.pagination.currentPage-1)*e.pagination.perPage+1,1),a=Math.min(e.pagination.currentPage*e.pagination.perPage,r);return 0===e.filtering.filteredCount?"":(a===r&&1===n?"":n+"-")+a}},console.log("what is pagination: ",e.pagination),e.filtering={template:r.filterTemplate,filterString:"",filterFunction:r.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",e.filtering),e.itemsArrayExpression="",e.itemNameSingular=r.itemNameSingular,e.itemNamePlural=r.itemNamePlural,e.noDataText=r.noDataText,e.wrappingElementClass=r.wrappingElementClass,e.sortExpression=[],e.headings=[];var n=function(e,r){return[t(e),null,!1,r?r:e]};this.setSortField=function(t,r,a,i){var o,s=n(t,a);if(s.push(i),1===e.sortExpression.length&&e.sortExpression[0][0]===s[0])e.sortExpression[0][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[0][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[0][2]=!0),e.$emit("tablesort:sortOrder",[{name:e.sortExpression[0][3],order:e.sortExpression[0][2]}]);else{for(o=0;o<e.headings.length;o+=1)e.headings[o].removeClass("tablesort-desc").removeClass("tablesort-asc");r.addClass("tablesort-asc"),e.sortExpression=[s],e.$emit("tablesort:sortOrder",[{name:s[3],order:s[2]}])}},this.addSortField=function(t,r,a,i){var o,s=!1,l=n(t,a);for(l.push(i),o=0;o<e.sortExpression.length;o+=1)e.sortExpression[o][0]===l[0]&&(e.sortExpression[o][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[o][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[o][2]=!0),s=!0);s||(r.addClass("tablesort-asc"),e.sortExpression.push(l)),e.$emit("tablesort:sortOrder",e.sortExpression.map(function(t){return{name:t[3],order:t[2]}}))},this.setTrackBy=function(t){e.trackBy=t},this.registerHeading=function(t){e.headings.push(t)},this.addFilterField=function(t,r){var a=n(t);e.filtering.filterFields.push(a)},this.setArrayExpr=function(t){e.itemsArrayExpression=t}}],link:function(n,i,o,s){if(o.tsItemName){var l="No "+n.itemNamePlural;n.itemNameSingular=o.tsItemName,o.tsItemNamePlural?n.itemNamePlural=o.tsItemNamePlural:n.itemNamePlural=o.tsItemName+"s",o.tsNoDataText||n.noDataText!==l||(n.noDataText="No "+n.itemNamePlural)}if(o.tsNoDataText&&(n.noDataText=o.tsNoDataText),o.tsWrappingElementClass&&(n.wrappingElementClass=o.tsWrappingElementClass),o.tsPerPageOptions&&(n.pagination.perPageOptions=n.$eval(o.tsPerPageOptions)),o.tsPerPageDefault){var u=n.$eval(o.tsPerPageDefault);isNaN(u)||(n.pagination.perPage=u,n.pagination.perPageOptions.indexOf(n.pagination.perPage)===-1&&(n.pagination.perPageOptions.push(n.pagination.perPage),n.pagination.perPageOptions.sort(function(t,e){return t-e})))}if(o.tsFilterFields)for(var c=o.tsFilterFields.split(",").filter(function(t){return t&&""!==t.trim()}),p=0;p<c.length;p+=1)s.addFilterField(c[p]);var f;if("false"!==o.tsDisplayFiltering&&""!==n.filtering.template&&n.filtering.filterFields.length>0){var d=r(n,n.filtering.template);f=e(d)(n),i.parent()[0].insertBefore(f[0],i[0])}o.tsFilterFunction&&(n.filtering.filterFunction=n.$eval(o.tsFilterFunction)),angular.isFunction(n.filtering.filterFunction)||(0===n.filtering.filterFields.length?n.filtering.filterFunction=function(t){return!0}:n.filtering.filterFunction=function(t){for(var e=!1,r=0;r<n.filtering.filterFields.length;r+=1)if(!e){var a=(n.filtering.filterFields[r][0](t)||"").toString().toLowerCase();e=a.indexOf(n.filtering.filterString.toLowerCase())>-1}return e}),n.filterLimitFun=function(t){if(!o.tsFilterFunction&&""===n.filtering.filterString)return n.filtering.filteredCount=t.length,t;var e=t.filter(n.filtering.filterFunction);return n.filtering.filteredCount=e.length,e},n.sortFun=function(t,e){var r,i,o,s,l,u;for(r=0;r<n.sortExpression.length;r+=1){if(i=n.sortExpression[r][0](t),o=n.sortExpression[r][0](e),l=e[n.sortExpression[r][1]],l&&(i=l(i),o=l(o)),void 0!==i&&null!==i||(i=""),void 0!==o&&null!==o||(o=""),s=n.sortExpression[r][2],u=(n.sortExpression[r][4]||a)(i,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}if(n.trackBy){if(i=t[n.trackBy],o=e[n.trackBy],void 0!==i&&null!==i||(i=""),void 0!==o&&null!==o||(o=""),u=a(i,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}return 0},n.pageLimitFun=function(t){if("false"===o.tsDisplayPagination||""===n.pagination.template)return t;for(var e=(n.pagination.currentPage-1)*n.pagination.perPage,r=n.pagination.currentPage*n.pagination.perPage,a=[],i=0;i<t.length;i++)i>=e&&i<r&&a.push(t[i]);return a};var g;if("false"!==o.tsDisplayPagination&&""!==n.pagination.template){var h=r(n,n.pagination.template);g=e(h)(n),i.after(g)}var m;if(n.wrappingElementClass&&""!==n.wrappingElementClass&&(m=i.wrap("<div class='"+n.wrappingElementClass+"' />")),o.tsGetTableDataFunction){var v=t(o.tsGetTableDataFunction),y=v.assign,b=function(e,r,a){var i=t(n.itemsArrayExpression)(n);return e&&(i=i.sort(n.sortFun)),r&&(i=n.filterLimitFun(i)),a&&(i=n.pageLimitFun(i)),i};y(n.$parent,b)}n.$on("$destroy",function(){f&&f.remove(),g&&g.remove(),m&&m.replaceWith(i)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(t,e,r,n){var a=function(a){t.$apply(function(){a.shiftKey?n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy):n.setSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)})};e.bind("click",a),e.addClass("tablesort-sortable"),"tsDefault"in r&&"0"!==r.tsDefault&&(n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy),"descending"===r.tsDefault&&n.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)),"tsFilter"in r&&n.addFilterField(r.tsCriteria,e),n.registerHeading(e)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function(t,e){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(r,n,a,i){for(var o=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],s=o[0],l="ts-repeat",u=0;u<o.length;u++)if(angular.isDefined(n.attr(o[u]))){s=o[u],l=s.replace(/^(data-)?ng/,"$1ts");break}var c="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",p=n.attr(s),f=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,d=p.match(/\s+track\s+by\s+\S+?\.(\S+)/),g=p.match(f);if(d&&i.setTrackBy(d[1]),p.search(/tablesort/)!==-1?(p=p.replace(/tablesort/,c),
d&&(p=p.replace(d[0],"")+d[0])):p=p.replace(f,"$1 in $2 | "+c+"$3"),angular.isUndefined(a.tsHideNoData)){var h=e.startSymbol(),m=e.endSymbol(),v=angular.element(n[0]).clone();v.removeAttr(s),v.removeAttr(l),v.addClass("showIfLast"),v.children().remove(),v.append('<td colspan="'+n[0].childElementCount+'">'+h+"noDataText"+m+"</td>"),v=t(v)(r),n.parent().prepend(v)}i.setArrayExpr(g[2]),angular.element(n[0]).attr(s,p),t(n,null,1e6)(r)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(t,e){if(t)return e(t)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(t,e){if(t){var r=t.concat();return r.sort(e)}}}),tableSortModule.filter("parseInt",function(){return function(t){return parseInt(t)||null}}),tableSortModule.filter("parseFloat",function(){return function(t){return parseFloat(t)||null}}),tableSortModule.filter("parseDate",function(){return function(t){var e=Date.parse(t);return isNaN(e)?null:e}}),angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(t,e,r){function n(t,n){var a;r.$observe(t,function(){n=n||"fa-"+t,e.removeClass(i[t]),r[t]&&(a=[n,r[t]].join("-"),e.addClass(a),i[t]=a)})}function a(t,n){var a;r.$observe(t,function(){n=n||"fa-"+t,a=t in r&&"false"!==r[t]&&r[t]!==!1,e.toggleClass(n,a)})}var i={};n("name","fa"),n("rotate"),n("flip"),n("stack"),r.$observe("size",function(){var t;e.removeClass(i.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),i.size=t}),r.$observe("stack",function(){var t;e.removeClass(i.stack),"large"===r.stack?t="fa-stack-lg":isNaN(parseInt(r.stack,10))||(t="fa-stack-"+r.stack+"x"),e.addClass(t),i.stack=t}),a("border"),a("fw"),a("inverse"),a("spin"),e.toggleClass("fa-li",e.parent()&&"LI"===e.parent().prop("tagName")&&e.parent().parent()&&e.parent().parent().hasClass("fa-ul")&&e.parent().children()[0]===e[0]&&"false"!==r.list&&r.list!==!1),r.$observe("alt",function(){var t=r.alt,n=e.next(),a="fa-alt-text";t?(e.removeAttr("alt"),n&&n.hasClass(a)||(e.after('<span class="sr-only fa-alt-text"></span>'),n=e.next()),n.text(t)):n&&n.hasClass(a)&&n.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(t,e,r){function n(t,n){var i;r.$observe(t,function(){n=n||"fa-"+t,e.removeClass(a[t]),r[t]&&(i=[n,r[t]].join("-"),e.addClass(i),a[t]=i)})}var a={};n("size"),r.$observe("size",function(){var t;e.removeClass(a.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),a.size=t})}}}),function(t,e,r,n){function a(e,r){this.options=t.extend({},o,r),this._defaults=o,this._name=i,this.$element=t(e),this.init()}var i="menuButton",o={propertyName:"value"};a.prototype={constructor:a,init:function(){this.toggle()},toggle:function(t,e){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},t.fn[i]=function(e){return this.each(function(){t.data(this,"plugin_"+i)?t.data(this,"plugin_"+i).toggle():t.data(this,"plugin_"+i,new a(this,e))})},t(r).on("click",function(e){t.each(t("[data-buttons=dropdown]"),function(r,n){t(e.target.offsetParent)[0]!=t(this)[0]&&t.data(this,"plugin_"+i)&&(t.data(this,"plugin_"+i).hideMenu(),t(this).find("ul").hide())})}),t(r).on("click","[data-buttons=dropdown]",function(e){var r=t(e.currentTarget);r.menuButton()}),t(r).on("click","[data-buttons=dropdown] > a",function(t){t.preventDefault()})}(jQuery,window,document),angular.module("angularPayments",[]),angular.module("angularPayments").factory("Common",[function(){var t={};return t.parseExpiry=function(t){var e,r,n,a;return t=t||"",t=t.replace(/\s/g,""),a=t.split("/",2),e=a[0],n=a[1],2===(null!=n?n.length:void 0)&&/^\d+$/.test(n)&&(r=(new Date).getFullYear(),r=r.toString().slice(0,2),n=r+n),e=parseInt(e,10),n=parseInt(n,10),{month:e,year:n}},t}]),angular.module("angularPayments").factory("Cards",[function(){var t=/(\d{1,4})/g,e=/(?:^|\s)(\d{4})$/,r=[{type:"maestro",pattern:/^(5018|5020|5038|6304|6759|676[1-3])/,format:t,inputFormat:e,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"dinersclub",pattern:/^(36|38|30[0-5])/,format:t,inputFormat:e,length:[14],cvcLength:[3],luhn:!0},{type:"laser",pattern:/^(6706|6771|6709)/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!0},{type:"jcb",pattern:/^35/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^62/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"discover",pattern:/^(6011|65|64[4-9]|622)/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^5[1-5]/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,inputFormat:/^(\d{4}|\d{4}\s\d{6})$/,length:[15],cvcLength:[3,4],luhn:!0},{type:"visa",pattern:/^4/,format:t,inputFormat:e,length:[13,14,15,16],cvcLength:[3],luhn:!0}],n=function(t){var e,n,a;for(t=(t+"").replace(/\D/g,""),n=0,a=r.length;n<a;n++)if(e=r[n],e.pattern.test(t))return e},a=function(t){var e,n,a;for(n=0,a=r.length;n<a;n++)if(e=r[n],e.type===t)return e};return{fromNumber:function(t){return n(t)},fromType:function(t){return a(t)},defaultFormat:function(){return t},defaultInputFormat:function(){return e}}}]),angular.module("angularPayments").factory("_Format",["Cards","Common","$filter",function(t,e,r){var n={},a=function(t){var e;return null!=t.prop("selectionStart")&&t.prop("selectionStart")!==t.prop("selectionEnd")||!("undefined"==typeof document||null===document||null==(e=document.selection)||"function"!=typeof e.createRange||!e.createRange().text)},i=function(e){var r,n,a,i,o,s,l;if(a=String.fromCharCode(e.which),r=angular.element(e.currentTarget),l=r.val(),n=t.fromNumber(l+a),i=(l.replace(/\D/g,"")+a).length,s=16,n&&(s=n.length[n.length.length-1]),!(i>=s)){if(!/^\d+$/.test(a)&&!e.meta&&e.keyCode>=46)return void e.preventDefault();if(null==r.prop("selectionStart")||r.prop("selectionStart")===l.length)return o=t.defaultInputFormat(),n&&(o=n.inputFormat),o.test(l)?(e.preventDefault(),r.val(l+" "+a)):o.test(l+a)?(e.preventDefault(),r.val(l+a+" ")):void 0}},o=function(e){var r,n,i,o;r=angular.element(e.currentTarget),i=String.fromCharCode(e.which),/^\d+$/.test(i)&&(a(r)||(o=(r.val()+i).replace(/\D/g,""),n=t.fromNumber(o),n?o.length<=n.length[n.length.length-1]||e.preventDefault():o.length<=16||e.preventDefault()))},s=function(t){var e,r;if(e=angular.element(t.currentTarget),r=e.val(),!t.meta&&8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length))return/\d\s$/.test(r)&&!t.meta&&t.keyCode>=46?(t.preventDefault(),e.val(r.replace(/\d\s$/,""))):/\s\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\d?$/,""))):void 0},l=function(e){var r,n,a,i;return(r=t.fromNumber(e))?(a=r.length[r.length.length-1],e=e.replace(/\D/g,""),e=e.slice(0,+a+1||9e9),r.format.global?null!=(i=e.match(r.format))?i.join(" "):void 0:(n=r.format.exec(e),null!=n&&n.shift(),null!=n?n.join(" "):void 0)):e},u=function(t){return setTimeout(function(){var e,r;return e=angular.element(t.target),r=e.val(),r=l(r),e.val(r)})},c=function(t){return null!=t?t.replace(/\s/g,""):t};n.card=function(t,e){t.bind("keypress",o),t.bind("keypress",i),t.bind("keydown",s),t.bind("paste",u),e.$parsers.push(c),e.$formatters.push(l)},_formatCVC=function(t){return $target=angular.element(t.currentTarget),digit=String.fromCharCode(t.which),!/^\d+$/.test(digit)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(val=$target.val()+digit,val.length<=4?void 0:void t.preventDefault())},n.cvc=function(t){t.bind("keypress",_formatCVC)},_restrictExpiry=function(t){var e,r,n;return e=angular.element(t.currentTarget),r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():a(e)?void 0:(n=e.val()+r,n=n.replace(/\D/g,""),n.length>6?void t.preventDefault():void 0)},_formatExpiry=function(t){var e,r,n;return r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(e=angular.element(t.currentTarget),n=e.val()+r,/^\d$/.test(n)&&"0"!==n&&"1"!==n?(t.preventDefault(),e.val("0"+n+" / ")):/^\d\d$/.test(n)?(t.preventDefault(),e.val(""+n+" / ")):void 0)},_formatForwardExpiry=function(t){var e,r,n;if(r=String.fromCharCode(t.which),/^\d+$/.test(r)||t.meta||!(t.keyCode>=46))return e=angular.element(t.currentTarget),n=e.val(),/^\d\d$/.test(n)?e.val(""+n+" / "):void 0},_formatForwardSlash=function(t){var e,r,n;if(r=String.fromCharCode(t.which),"/"===r)return e=angular.element(t.currentTarget),n=e.val(),/^\d$/.test(n)&&"0"!==n?e.val("0"+n+" / "):void 0},_formatBackExpiry=function(t){var e,r;if(!t.meta&&(e=angular.element(t.currentTarget),r=e.val(),8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length)))return/\d(\s|\/)+$/.test(r)?(t.preventDefault(),e.val(r.replace(/\d(\s|\/)*$/,""))):/\s\/\s?\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\/\s?\d?$/,""))):void 0};var p=function(t){if(null!=t){var n=e.parseExpiry(t),a=new Date(n.year,n.month-1);return r("date")(a,"MM/yyyy")}return null},f=function(t){if(null!=t){var n=e.parseExpiry(t),a=new Date(n.year,n.month-1);return r("date")(a,"MM / yyyy")}return null};return n.expiry=function(t,e){t.bind("keypress",_restrictExpiry),t.bind("keypress",_formatExpiry),t.bind("keypress",_formatForwardSlash),t.bind("keypress",_formatForwardExpiry),t.bind("keydown",_formatBackExpiry),e.$parsers.push(p),e.$formatters.push(f)},function(t,e,r){if(!n[t])throw types=Object.keys(n),errstr='Unknown type for formatting: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return n[t](e,r)}}]).directive("paymentsFormat",["$window","_Format",function(t,e){return{restrict:"A",require:"ngModel",link:function(t,r,n,a){e(n.paymentsFormat,r,a)}}}]),angular.module("angularPayments").factory("_Validate",["Cards","Common","$parse",function(t,e,r){var n=[].indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},a=function(t){var e,r,n,a,i,o;for(n=!0,a=0,r=(t+"").split("").reverse(),i=0,o=r.length;i<o;i++)e=r[i],e=parseInt(e,10),(n=!n)&&(e*=2),e>9&&(e-=9),a+=e;return a%10===0},i={};return i.cvc=function(e,a,i,o){var s,l;if(null==e||0==e.length)return!0;if(!/^\d+$/.test(e))return!1;var u;if(o.paymentsTypeModel){var c=r(o.paymentsTypeModel);u=c(i)}return u?(s=e.length,n.call(null!=(l=t.fromType(u))?l.cvcLength:void 0,s)>=0):e.length>=3&&e.length<=4},i.card=function(e,i,o,s){var l,u,c;s.paymentsTypeModel&&(c=r(s.paymentsTypeModel));var p=function(){c&&c.assign(o,null),i.$card=null};return null==e||0==e.length?(p(),!0):(e=(e+"").replace(/\s+|-/g,""),/^\d+$/.test(e)&&(l=t.fromNumber(e))?(i.$card=angular.copy(l),c&&c.assign(o,l.type),ret=(u=e.length,n.call(l.length,u)>=0&&(l.luhn===!1||a(e))),ret):(p(),!1))},i.expiry=function(t){if(null==t||0==t.length)return!0;obj=e.parseExpiry(t),month=obj.month,year=obj.year;var r,n,a;return!(!month||!year)&&(!!/^\d+$/.test(month)&&(!!/^\d+$/.test(year)&&(parseInt(month,10)<=12&&(2===year.length&&(a=(new Date).getFullYear(),a=a.toString().slice(0,2),year=a+year),n=new Date(year,month),r=new Date,n.setMonth(n.getMonth()-1),n.setMonth(n.getMonth()+1,1),n>r))))},function(t,e,r,n,a){if(!i[t])throw types=Object.keys(i),errstr='Unknown type for validation: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return i[t](e,r,n,a)}}]).factory("_ValidateWatch",["_Validate",function(t){var e={};return e.cvc=function(e,r,n,a){a.paymentsTypeModel&&n.$watch(a.paymentsTypeModel,function(i,o){if(i!=o){var s=t(e,r.$modelValue,r,n,a);r.$setValidity(e,s)}})},function(t,r,n,a){if(e[t])return e[t](t,r,n,a)}}]).directive("paymentsValidate",["$window","_Validate","_ValidateWatch",function(t,e,r){return{restrict:"A",require:"ngModel",link:function(t,n,a,i){var o=a.paymentsValidate;r(o,i,t,a);var s=function(r){var n=e(o,r,i,t,a);return i.$setValidity(o,n),n?r:void 0};i.$formatters.push(s),i.$parsers.push(s)}}}]),angular.module("angularPayments").directive("stripeForm",["$window","$parse","Common",function(t,e,r){return _getDataToSend=function(t){var e=["number","expMonth","expYear","cvc","name","addressLine1","addressLine2","addressCity","addressState","addressZip","addressCountry"],r=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},n={};for(i in e)t.hasOwnProperty(e[i])&&(n[r(e[i])]=angular.copy(t[e[i]]));return n.number=(n.number||"").replace(/ /g,""),n},{restrict:"A",link:function(e,n,a){if(!t.Stripe)throw"stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html.";var i=angular.element(n);i.bind("submit",function(){expMonthUsed=!!e.expMonth,expYearUsed=!!e.expYear,expMonthUsed&&expYearUsed||(exp=r.parseExpiry(e.expiry),e.expMonth=exp.month,e.expYear=exp.year);var n=i.find("button");n.prop("disabled",!0),i.hasClass("ng-valid")?t.Stripe.createToken(_getDataToSend(e),function(){var t=arguments;e.$apply(function(){e[a.stripeForm].apply(e,t)}),n.prop("disabled",!1)}):(e.$apply(function(){e[a.stripeForm].apply(e,[400,{error:"Invalid form submitted."}])}),n.prop("disabled",!1)),e.expMonth=null,e.expYear=null})}}}]),function(t,e,r){e.module("ngImageCompress",[]).directive("ngImageCompress",["$q",function(e){var n=t.URL||t.webkitURL,a=function(t,e){var n=e.resizeType,a=100*e.resizeQuality||70,i="image/jpeg";n!==r&&"png"===n&&(i="image/png");var o=e.resizeMaxHeight||300,s=e.resizeMaxWidth||250,l=t.height,u=t.width;u>l?u>s&&(l=Math.round(l*=s/u),u=s):l>o&&(u=Math.round(u*=o/l),l=o);var c=document.createElement("canvas");c.width=u,c.height=l;var p=(c.getContext("2d").drawImage(t,0,0,u,l),c.toDataURL(i,a/100)),f=new Image;return f.src=p,f.src},i=function(t,e){var r=new Image;r.onload=function(){e(r)},r.src=t},o=function(t){var r=e.defer(),n=new FileReader;return n.onload=function(t){r.resolve(t.target.result)},n.readAsDataURL(t),r.promise};return{restrict:"A",scope:{image:"=",resizeMaxHeight:"@?",resizeMaxWidth:"@?",resizeQuality:"@?",resizeType:"@?"},link:function(t,e,r){var s=function(e,r){i(e.url,function(n){var i=a(n,t);e.compressed={dataURL:i,type:i.match(/:(.+\/.+);/)[1]},r(e)})},l=function(e){t.$apply(function(){r.multiple?t.image.push(e):t.image=e})};e.bind("change",function(e){r.multiple&&(t.image=[]);for(var a=e.target.files,i=0;i<a.length;i++){var u={file:a[i],url:n.createObjectURL(a[i])};o(a[i]).then(function(t){u.dataURL=t}),t.resizeMaxHeight||t.resizeMaxWidth?s(u,function(t){l(t)}):l(u)}})}}}])}(window,window.angular);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
