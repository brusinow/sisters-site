"use strict";angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function($rootScope,ngCart,ngCartItem,store){$rootScope.$on("ngCart:change",function(){ngCart.$save()}),angular.isObject(store.get("cart"))?ngCart.$restore(store.get("cart")):ngCart.init()}]).service("ngCart",["$rootScope","$location","$window","ngCartItem","store",function($rootScope,$location,$window,ngCartItem,store){this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(id,sku,name,price,quantity,data,attr){var inCart=this.getItemById(id);if("object"==typeof inCart)inCart.setQuantity(quantity,!1),$rootScope.$broadcast("ngCart:itemUpdated",inCart);else{var newItem=new ngCartItem(id,sku,name,price,quantity,data,attr);this.$cart.items.push(newItem),$rootScope.$broadcast("ngCart:itemAdded",newItem)}$rootScope.$broadcast("ngCart:change",{})},this.addItemBtn=function(id,sku,name,price,quantity,data){var skus=data.skus;if(1===skus.length){var inCart=this.getItemById(id);if("object"==typeof inCart)inCart.setQuantity(quantity,!1),$rootScope.$broadcast("ngCart:itemUpdated",inCart);else{var newItem=new ngCartItem(id,sku,name,price,quantity,data);this.$cart.items.push(newItem),$rootScope.$broadcast("ngCart:itemAdded",newItem)}$rootScope.$broadcast("ngCart:change",{})}else $location.url("/store/"+data.id)},this.changeQuantity=function(id,quantity){var inCart=this.getItemById(id);"object"==typeof inCart?(inCart.setQuantity(quantity,!0),$rootScope.$broadcast("ngCart:itemUpdated",inCart)):console.log("nothing there"),$rootScope.$broadcast("ngCart:change",{})},this.getItemById=function(itemId){var items=this.getCart().items,build=!1;return angular.forEach(items,function(item){item.getId()===itemId&&(build=item)}),build},this.setShipping=function(shipping){return this.$cart.shipping=shipping,$rootScope.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(taxRate){return this.$cart.taxRate=+parseFloat(taxRate).toFixed(2),$rootScope.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(cart){return this.$cart=cart,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var count=0,items=this.getItems();return angular.forEach(items,function(item){count+=item.getQuantity()}),count},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getSubTotal=function(){var total=0;return angular.forEach(this.getCart().items,function(item){total+=item.getTotal()}),+parseFloat(total).toFixed(2)},this.totalCost=function(){return+parseFloat(this.getSubTotal()+this.getShipping()+this.getTax()).toFixed(2)},this.removeItem=function(index){var item=this.$cart.items.splice(index,1)[0]||{};$rootScope.$broadcast("ngCart:itemRemoved",item),$rootScope.$broadcast("ngCart:change",{})},this.removeItemById=function(id){var item,cart=this.getCart();angular.forEach(cart.items,function(item,index){item.getId()===id&&(item=cart.items.splice(index,1)[0]||{})}),this.setCart(cart),$rootScope.$broadcast("ngCart:itemRemoved",item),$rootScope.$broadcast("ngCart:change",{})},this.empty=function(){$rootScope.$broadcast("ngCart:change",{}),this.$cart.items=[],$window.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var items=[];return angular.forEach(this.getItems(),function(item){items.push(item.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:items}},this.$restore=function(storedCart){var _self=this;_self.init(),_self.$cart.shipping=storedCart.shipping,_self.$cart.taxRate=storedCart.taxRate,_self.$cart.tax=storedCart.tax,angular.forEach(storedCart.items,function(item){_self.$cart.items.push(new ngCartItem(item.parent,item.sku,item.description,item.amount,item.quantity,item._data,item.attr))}),this.$save()},this.$save=function(){return store.set("cart",JSON.stringify(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function($rootScope,$log){var item=function(id,sku,name,price,quantity,data,attr){this.setId(id),this.setSku(sku),this.setName(name),this.setPrice(price),this.setQuantity(quantity),this.setData(data),this.setAttr(attr)};return item.prototype.setId=function(id){id?this.parent=id:$log.error("An ID must be provided")},item.prototype.setSku=function(sku){sku?this.sku=sku:$log.error("A sku must be provided")},item.prototype.getId=function(){return this.parent},item.prototype.getSku=function(){return this.sku},item.prototype.setName=function(name){name?this.description=name:$log.error("A name must be provided")},item.prototype.getName=function(){return this.description},item.prototype.setPrice=function(price){var priceFloat=parseFloat(price);priceFloat?priceFloat<=0?$log.error("A price must be over 0"):this.amount=priceFloat:$log.error("A price must be provided")},item.prototype.getPrice=function(){return this.amount},item.prototype.setQuantity=function(quantity,relative){var quantityInt=parseInt(quantity);quantityInt%1===0?(relative===!0?this.quantity+=quantityInt:this.quantity=quantityInt,this.quantity<1&&(this.quantity=1)):(this.quantity=1,$log.info("Quantity must be an integer and was defaulted to 1"))},item.prototype.getQuantity=function(){return this.quantity},item.prototype.setData=function(data){data&&(this._data=data)},item.prototype.getData=function(){return this._data?this._data:void $log.info("This item has no data")},item.prototype.setAttr=function(attributes){attributes&&(this.attr=attributes)},item.prototype.getAttr=function(){if(this.attr){if(this.attr.size)return this.attr.size;if(this.attr.color)return this.attr.size}},item.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},item.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},item}]).service("store",["$window",function($window){return{get:function(key){if($window.localStorage.getItem(key)){var cart=angular.fromJson($window.localStorage.getItem(key));return JSON.parse(cart)}return!1},set:function(key,val){return void 0===val?$window.localStorage.removeItem(key):$window.localStorage.setItem(key,angular.toJson(val)),$window.localStorage.getItem(key)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function($scope,$rootScope,ngCart,$timeout){$scope.loaded=!1,$scope.toggleCart=!1,$scope.ngCart=ngCart,$timeout(function(){$scope.loaded=!0});var items=ngCart.getItems(),filtered=[];angular.forEach(items,function(item){"shippable"===item._data.product_type&&filtered.push(item)}),filtered.length>0?($scope.shipBool=!0,$scope.$emit("setShippable",!0)):($scope.shipBool=!1,$scope.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function($scope,ngCart,$timeout){$scope.loaded=!1,$scope.toggleCart=!1,$scope.ngCart=ngCart,$timeout(function(){$scope.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function($scope,ngCart){$scope.ngCart=ngCart}]).directive("ngcartAddBtn",["ngCart",function(ngCart){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/addtocartBtn.html":attrs.templateUrl},link:function(scope,element,attrs){scope.attrs=attrs,scope.inCart=function(){return ngCart.getItemById(attrs.id)},scope.inCart()?scope.q=ngCart.getItemById(attrs.id).getQuantity():scope.q=parseInt(scope.quantity),scope.qtyOpt=[];for(var i=1;i<=scope.quantityMax;i++)scope.qtyOpt.push(i)}}}]).directive("ngcartAddtocart",["ngCart",function(ngCart){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/addtocart.html":attrs.templateUrl},link:function(scope,element,attrs){scope.attrs=attrs,scope.inCart=function(){return ngCart.getItemById(attrs.id)},scope.inCart()?scope.q=ngCart.getItemById(attrs.id).getQuantity():scope.q=parseInt(scope.quantity),scope.qtyOpt=[];var thisMax,showCountRef=firebase.database().ref("tickets/"+scope.id+"/totalTickets");showCountRef.once("value").then(function(snapshot){if(scope.totalTix=snapshot.val(),thisMax=scope.quantityMax<scope.totalTix?scope.quantityMax:scope.totalTix,thisMax>0)for(var i=1;i<=thisMax;i++)scope.qtyOpt.push(i)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/cart.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/summary.html":attrs.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/cart-confirm.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/small-cart.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/small-cart-collapse.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function($rootScope,$scope,ngCart,fulfilmentProvider){$scope.ngCart=ngCart,$scope.checkout=function(){fulfilmentProvider.setService($scope.service),fulfilmentProvider.setSettings($scope.settings),fulfilmentProvider.checkout().success(function(data,status,headers,config){$rootScope.$broadcast("ngCart:checkout_succeeded",data)}).error(function(data,status,headers,config){$rootScope.$broadcast("ngCart:checkout_failed",{statusCode:status,error:data})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"template/ngCart/checkout.html":attrs.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function($injector){this._obj={service:void 0,settings:void 0},this.setService=function(service){this._obj.service=service},this.setSettings=function(settings){this._obj.settings=settings},this.checkout=function(){var provider=$injector.get("ngCart.fulfilment."+this._obj.service);return provider.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function($q,$log,ngCart){this.checkout=function(){var deferred=$q.defer();return $log.info(ngCart.toObject()),deferred.resolve({cart:ngCart.toObject()}),deferred.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function($http,ngCart){this.checkout=function(settings){return $http.post(settings.url,{data:ngCart.toObject(),options:settings.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function($http,ngCart){}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
