"use strict";angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function($rootScope,ngCart,ngCartItem,store){$rootScope.$on("ngCart:change",function(){ngCart.$save()}),angular.isObject(store.get("cart"))?ngCart.$restore(store.get("cart")):ngCart.init()}]).service("ngCart",["$rootScope","$location","$window","ngCartItem","store",function($rootScope,$location,$window,ngCartItem,store){this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(id,sku,name,price,quantity,data,attr){var inCart=this.getItemById(id);if("object"==typeof inCart)inCart.setQuantity(quantity,!1),$rootScope.$broadcast("ngCart:itemUpdated",inCart);else{var newItem=new ngCartItem(id,sku,name,price,quantity,data,attr);this.$cart.items.push(newItem),$rootScope.$broadcast("ngCart:itemAdded",newItem)}$rootScope.$broadcast("ngCart:change",{})},this.addItemBtn=function(id,sku,name,price,quantity,data){var skus=data.skus;if(1===skus.length){var inCart=this.getItemById(id);if("object"==typeof inCart)inCart.setQuantity(quantity,!1),$rootScope.$broadcast("ngCart:itemUpdated",inCart);else{var newItem=new ngCartItem(id,sku,name,price,quantity,data);this.$cart.items.push(newItem),$rootScope.$broadcast("ngCart:itemAdded",newItem)}$rootScope.$broadcast("ngCart:change",{})}else $location.url("/store/"+data.id)},this.changeQuantity=function(id,quantity){var inCart=this.getItemById(id);"object"==typeof inCart?(inCart.setQuantity(quantity,!0),$rootScope.$broadcast("ngCart:itemUpdated",inCart)):console.log("nothing there"),$rootScope.$broadcast("ngCart:change",{})},this.getItemById=function(itemId){var items=this.getCart().items,build=!1;return angular.forEach(items,function(item){item.getId()===itemId&&(build=item)}),build},this.setShipping=function(shipping){return this.$cart.shipping=shipping,$rootScope.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(taxRate){return this.$cart.taxRate=+parseFloat(taxRate).toFixed(2),$rootScope.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(cart){return this.$cart=cart,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var count=0,items=this.getItems();return angular.forEach(items,function(item){count+=item.getQuantity()}),count},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getSubTotal=function(){var total=0;return angular.forEach(this.getCart().items,function(item){total+=item.getTotal()}),+parseFloat(total).toFixed(2)},this.totalCost=function(){return+parseFloat(this.getSubTotal()+this.getShipping()+this.getTax()).toFixed(2)},this.removeItem=function(index){var item=this.$cart.items.splice(index,1)[0]||{};$rootScope.$broadcast("ngCart:itemRemoved",item),$rootScope.$broadcast("ngCart:change",{})},this.removeItemById=function(id){var item,cart=this.getCart();angular.forEach(cart.items,function(item,index){item.getId()===id&&(item=cart.items.splice(index,1)[0]||{})}),this.setCart(cart),$rootScope.$broadcast("ngCart:itemRemoved",item),$rootScope.$broadcast("ngCart:change",{})},this.empty=function(){$rootScope.$broadcast("ngCart:change",{}),this.$cart.items=[],$window.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var items=[];return angular.forEach(this.getItems(),function(item){items.push(item.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:items}},this.$restore=function(storedCart){var _self=this;_self.init(),_self.$cart.shipping=storedCart.shipping,_self.$cart.taxRate=storedCart.taxRate,_self.$cart.tax=storedCart.tax,angular.forEach(storedCart.items,function(item){_self.$cart.items.push(new ngCartItem(item.parent,item.sku,item.description,item.amount,item.quantity,item._data,item.attr))}),this.$save()},this.$save=function(){return store.set("cart",JSON.stringify(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function($rootScope,$log){var item=function(id,sku,name,price,quantity,data,attr){this.setId(id),this.setSku(sku),this.setName(name),this.setPrice(price),this.setQuantity(quantity),this.setData(data),this.setAttr(attr)};return item.prototype.setId=function(id){id?this.parent=id:$log.error("An ID must be provided")},item.prototype.setSku=function(sku){sku?this.sku=sku:$log.error("A sku must be provided")},item.prototype.getId=function(){return this.parent},item.prototype.getSku=function(){return this.sku},item.prototype.setName=function(name){name?this.description=name:$log.error("A name must be provided")},item.prototype.getName=function(){return this.description},item.prototype.setPrice=function(price){var priceFloat=parseFloat(price);priceFloat?priceFloat<=0?$log.error("A price must be over 0"):this.amount=priceFloat:$log.error("A price must be provided")},item.prototype.getPrice=function(){return this.amount},item.prototype.setQuantity=function(quantity,relative){var quantityInt=parseInt(quantity);quantityInt%1===0?(relative===!0?this.quantity+=quantityInt:this.quantity=quantityInt,this.quantity<1&&(this.quantity=1)):(this.quantity=1,$log.info("Quantity must be an integer and was defaulted to 1"))},item.prototype.getQuantity=function(){return this.quantity},item.prototype.setData=function(data){data&&(this._data=data)},item.prototype.getData=function(){return this._data?this._data:void $log.info("This item has no data")},item.prototype.setAttr=function(attributes){attributes&&(this.attr=attributes)},item.prototype.getAttr=function(){if(this.attr){if(this.attr.size)return this.attr.size;if(this.attr.color)return this.attr.size}},item.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},item.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},item}]).service("store",["$window",function($window){return{get:function(key){if($window.localStorage.getItem(key)){var cart=angular.fromJson($window.localStorage.getItem(key));return JSON.parse(cart)}return!1},set:function(key,val){return void 0===val?$window.localStorage.removeItem(key):$window.localStorage.setItem(key,angular.toJson(val)),$window.localStorage.getItem(key)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function($scope,$rootScope,ngCart,$timeout){$scope.loaded=!1,$scope.toggleCart=!1,$scope.ngCart=ngCart,$timeout(function(){$scope.loaded=!0});var items=ngCart.getItems(),filtered=[];angular.forEach(items,function(item){"shippable"===item._data.product_type&&filtered.push(item)}),filtered.length>0?($scope.shipBool=!0,$scope.$emit("setShippable",!0)):($scope.shipBool=!1,$scope.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function($scope,ngCart,$timeout){$scope.loaded=!1,$scope.toggleCart=!1,$scope.ngCart=ngCart,$timeout(function(){$scope.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function($scope,ngCart){$scope.ngCart=ngCart}]).directive("ngcartAddBtn",["ngCart",function(ngCart){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/addtocartBtn.html":attrs.templateUrl},link:function(scope,element,attrs){scope.attrs=attrs,scope.inCart=function(){return ngCart.getItemById(attrs.id)},scope.inCart()?scope.q=ngCart.getItemById(attrs.id).getQuantity():scope.q=parseInt(scope.quantity),scope.qtyOpt=[];for(var i=1;i<=scope.quantityMax;i++)scope.qtyOpt.push(i)}}}]).directive("ngcartAddtocart",["ngCart",function(ngCart){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/addtocart.html":attrs.templateUrl},link:function(scope,element,attrs){scope.attrs=attrs,scope.inCart=function(){return ngCart.getItemById(attrs.id)},scope.inCart()?scope.q=ngCart.getItemById(attrs.id).getQuantity():scope.q=parseInt(scope.quantity),scope.qtyOpt=[];var thisMax,showCountRef=firebase.database().ref("tickets/"+scope.id+"/totalTickets");showCountRef.once("value").then(function(snapshot){if(scope.totalTix=snapshot.val(),thisMax=scope.quantityMax<scope.totalTix?scope.quantityMax:scope.totalTix,thisMax>0)for(var i=1;i<=thisMax;i++)scope.qtyOpt.push(i)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/cart.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/summary.html":attrs.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/cart-confirm.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/small-cart.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"views/ngCart/small-cart-collapse.html":attrs.templateUrl},link:function(scope,element,attrs){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function($rootScope,$scope,ngCart,fulfilmentProvider){$scope.ngCart=ngCart,$scope.checkout=function(){fulfilmentProvider.setService($scope.service),fulfilmentProvider.setSettings($scope.settings),fulfilmentProvider.checkout().success(function(data,status,headers,config){$rootScope.$broadcast("ngCart:checkout_succeeded",data)}).error(function(data,status,headers,config){$rootScope.$broadcast("ngCart:checkout_failed",{statusCode:status,error:data})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(element,attrs){return"undefined"==typeof attrs.templateUrl?"template/ngCart/checkout.html":attrs.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function($injector){this._obj={service:void 0,settings:void 0},this.setService=function(service){this._obj.service=service},this.setSettings=function(settings){this._obj.settings=settings},this.checkout=function(){var provider=$injector.get("ngCart.fulfilment."+this._obj.service);return provider.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function($q,$log,ngCart){this.checkout=function(){var deferred=$q.defer();return $log.info(ngCart.toObject()),deferred.resolve({cart:ngCart.toObject()}),deferred.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function($http,ngCart){this.checkout=function(settings){return $http.post(settings.url,{data:ngCart.toObject(),options:settings.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function($http,ngCart){}]);
"use strict";angular.module("angular-parallax",[]).directive("parallax",["$window",function($window){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function($scope,elem,attrs){var setPosition=function(){$scope.parallaxHorizontalOffset||($scope.parallaxHorizontalOffset="0");var calcValY=$window.pageYOffset*($scope.parallaxRatio?$scope.parallaxRatio:1.1);if(calcValY<=$window.innerHeight){var topVal=calcValY<$scope.parallaxVerticalOffset?$scope.parallaxVerticalOffset:calcValY,hozVal=$scope.parallaxHorizontalOffset.indexOf("%")===-1?$scope.parallaxHorizontalOffset+"px":$scope.parallaxHorizontalOffset;elem.css("transform","translate("+hozVal+", "+topVal+"px)")}};setPosition(),angular.element($window).bind("scroll",setPosition),angular.element($window).bind("touchmove",setPosition)}}}]).directive("parallaxBackground",["$window",function($window){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function($scope,elem,attrs){var setPosition=function(){var offset=$scope.parallaxVerticalOffset/100*elem[0].offsetHeight,calcValY=(elem.prop("offsetTop")-$window.pageYOffset)*($scope.parallaxRatio?$scope.parallaxRatio:1.1)-(offset||0);calcValY>=$scope.parallaxStartPoint&&(calcValY=$scope.parallaxStartPoint),elem.css("background-position","50% "+calcValY+"px")};angular.element($window).bind("load",function(e){setPosition(),$scope.$apply()}),angular.element($window).bind("scroll",setPosition),angular.element($window).bind("touchmove",setPosition)}}}]);
!function(root,factory){if("object"==typeof exports&&"object"==typeof module)module.exports=factory();else if("function"==typeof define&&define.amd)define([],factory);else{var a=factory();for(var i in a)("object"==typeof exports?exports:root)[i]=a[i]}}(this,function(){return function(modules){function __webpack_require__(moduleId){if(installedModules[moduleId])return installedModules[moduleId].exports;var module=installedModules[moduleId]={exports:{},id:moduleId,loaded:!1};return modules[moduleId].call(module.exports,module,module.exports,__webpack_require__),module.loaded=!0,module.exports}var installedModules={};return __webpack_require__.m=modules,__webpack_require__.c=installedModules,__webpack_require__.p="",__webpack_require__(0)}([function(module,exports,__webpack_require__){"use strict";module.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",__webpack_require__(1)]).factory("FileSaverUtils",[__webpack_require__(2)]).factory("Blob",["$window",__webpack_require__(3)]).factory("SaveAs",[__webpack_require__(5)])},function(module,exports){"use strict";module.exports=function(Blob,SaveAs,FileSaverUtils){function save(blob,filename,disableAutoBOM){try{SaveAs(blob,filename,disableAutoBOM)}catch(err){FileSaverUtils.handleErrors(err.message)}}return{saveAs:function(data,filename,disableAutoBOM){return FileSaverUtils.isBlobInstance(data)||FileSaverUtils.handleErrors("Data argument should be a blob instance"),FileSaverUtils.isString(filename)||FileSaverUtils.handleErrors("Filename argument should be a string"),save(data,filename,disableAutoBOM)}}}},function(module,exports){"use strict";module.exports=function(){return{handleErrors:function(msg){throw new Error(msg)},isString:function(obj){return"string"==typeof obj||obj instanceof String},isUndefined:function(obj){return"undefined"==typeof obj},isBlobInstance:function(obj){return obj instanceof Blob}}}},function(module,exports,__webpack_require__){"use strict";__webpack_require__(4),module.exports=function($window){return $window.Blob}},function(module,exports){!function(view){"use strict";if(view.URL=view.URL||view.webkitURL,view.Blob&&view.URL)try{return void new Blob}catch(e){}var BlobBuilder=view.BlobBuilder||view.WebKitBlobBuilder||view.MozBlobBuilder||function(view){var get_class=function(object){return Object.prototype.toString.call(object).match(/^\[object\s(.*)\]$/)[1]},FakeBlobBuilder=function(){this.data=[]},FakeBlob=function(data,type,encoding){this.data=data,this.size=data.length,this.type=type,this.encoding=encoding},FBB_proto=FakeBlobBuilder.prototype,FB_proto=FakeBlob.prototype,FileReaderSync=view.FileReaderSync,FileException=function(type){this.code=this[this.name=type]},file_ex_codes="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),file_ex_code=file_ex_codes.length,real_URL=view.URL||view.webkitURL||view,real_create_object_URL=real_URL.createObjectURL,real_revoke_object_URL=real_URL.revokeObjectURL,URL=real_URL,btoa=view.btoa,atob=view.atob,ArrayBuffer=view.ArrayBuffer,Uint8Array=view.Uint8Array,origin=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(FakeBlob.fake=FB_proto.fake=!0;file_ex_code--;)FileException.prototype[file_ex_codes[file_ex_code]]=file_ex_code+1;return real_URL.createObjectURL||(URL=view.URL=function(uri){var uri_origin,uri_info=document.createElementNS("http://www.w3.org/1999/xhtml","a");return uri_info.href=uri,"origin"in uri_info||("data:"===uri_info.protocol.toLowerCase()?uri_info.origin=null:(uri_origin=uri.match(origin),uri_info.origin=uri_origin&&uri_origin[1])),uri_info}),URL.createObjectURL=function(blob){var data_URI_header,type=blob.type;return null===type&&(type="application/octet-stream"),blob instanceof FakeBlob?(data_URI_header="data:"+type,"base64"===blob.encoding?data_URI_header+";base64,"+blob.data:"URI"===blob.encoding?data_URI_header+","+decodeURIComponent(blob.data):btoa?data_URI_header+";base64,"+btoa(blob.data):data_URI_header+","+encodeURIComponent(blob.data)):real_create_object_URL?real_create_object_URL.call(real_URL,blob):void 0},URL.revokeObjectURL=function(object_URL){"data:"!==object_URL.substring(0,5)&&real_revoke_object_URL&&real_revoke_object_URL.call(real_URL,object_URL)},FBB_proto.append=function(data){var bb=this.data;if(Uint8Array&&(data instanceof ArrayBuffer||data instanceof Uint8Array)){for(var str="",buf=new Uint8Array(data),i=0,buf_len=buf.length;i<buf_len;i++)str+=String.fromCharCode(buf[i]);bb.push(str)}else if("Blob"===get_class(data)||"File"===get_class(data)){if(!FileReaderSync)throw new FileException("NOT_READABLE_ERR");var fr=new FileReaderSync;bb.push(fr.readAsBinaryString(data))}else data instanceof FakeBlob?"base64"===data.encoding&&atob?bb.push(atob(data.data)):"URI"===data.encoding?bb.push(decodeURIComponent(data.data)):"raw"===data.encoding&&bb.push(data.data):("string"!=typeof data&&(data+=""),bb.push(unescape(encodeURIComponent(data))))},FBB_proto.getBlob=function(type){return arguments.length||(type=null),new FakeBlob(this.data.join(""),type,"raw")},FBB_proto.toString=function(){return"[object BlobBuilder]"},FB_proto.slice=function(start,end,type){var args=arguments.length;return args<3&&(type=null),new FakeBlob(this.data.slice(start,args>1?end:this.data.length),type,this.encoding)},FB_proto.toString=function(){return"[object Blob]"},FB_proto.close=function(){this.size=0,delete this.data},FakeBlobBuilder}(view);view.Blob=function(blobParts,options){var type=options?options.type||"":"",builder=new BlobBuilder;if(blobParts)for(var i=0,len=blobParts.length;i<len;i++)Uint8Array&&blobParts[i]instanceof Uint8Array?builder.append(blobParts[i].buffer):builder.append(blobParts[i]);var blob=builder.getBlob(type);return!blob.slice&&blob.webkitSlice&&(blob.slice=blob.webkitSlice),blob};var getPrototypeOf=Object.getPrototypeOf||function(object){return object.__proto__};view.Blob.prototype=getPrototypeOf(new view.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(module,exports,__webpack_require__){"use strict";module.exports=function(){return __webpack_require__(6).saveAs||function(){}}},function(module,exports,__webpack_require__){var __WEBPACK_AMD_DEFINE_ARRAY__,__WEBPACK_AMD_DEFINE_RESULT__,saveAs=saveAs||function(view){"use strict";if(!("undefined"==typeof view||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var doc=view.document,get_URL=function(){return view.URL||view.webkitURL||view},save_link=doc.createElementNS("http://www.w3.org/1999/xhtml","a"),can_use_save_link="download"in save_link,click=function(node){var event=new MouseEvent("click");node.dispatchEvent(event)},is_safari=/constructor/i.test(view.HTMLElement),is_chrome_ios=/CriOS\/[\d]+/.test(navigator.userAgent),throw_outside=function(ex){(view.setImmediate||view.setTimeout)(function(){throw ex},0)},force_saveable_type="application/octet-stream",arbitrary_revoke_timeout=4e4,revoke=function(file){var revoker=function(){"string"==typeof file?get_URL().revokeObjectURL(file):file.remove()};setTimeout(revoker,arbitrary_revoke_timeout)},dispatch=function(filesaver,event_types,event){event_types=[].concat(event_types);for(var i=event_types.length;i--;){var listener=filesaver["on"+event_types[i]];if("function"==typeof listener)try{listener.call(filesaver,event||filesaver)}catch(ex){throw_outside(ex)}}},auto_bom=function(blob){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(blob.type)?new Blob([String.fromCharCode(65279),blob],{type:blob.type}):blob},FileSaver=function(blob,name,no_auto_bom){no_auto_bom||(blob=auto_bom(blob));var object_url,filesaver=this,type=blob.type,force=type===force_saveable_type,dispatch_all=function(){dispatch(filesaver,"writestart progress write writeend".split(" "))},fs_error=function(){if((is_chrome_ios||force&&is_safari)&&view.FileReader){var reader=new FileReader;return reader.onloadend=function(){var url=is_chrome_ios?reader.result:reader.result.replace(/^data:[^;]*;/,"data:attachment/file;"),popup=view.open(url,"_blank");popup||(view.location.href=url),url=void 0,filesaver.readyState=filesaver.DONE,dispatch_all()},reader.readAsDataURL(blob),void(filesaver.readyState=filesaver.INIT)}if(object_url||(object_url=get_URL().createObjectURL(blob)),force)view.location.href=object_url;else{var opened=view.open(object_url,"_blank");opened||(view.location.href=object_url)}filesaver.readyState=filesaver.DONE,dispatch_all(),revoke(object_url)};return filesaver.readyState=filesaver.INIT,can_use_save_link?(object_url=get_URL().createObjectURL(blob),void setTimeout(function(){save_link.href=object_url,save_link.download=name,click(save_link),dispatch_all(),revoke(object_url),filesaver.readyState=filesaver.DONE})):void fs_error()},FS_proto=FileSaver.prototype,saveAs=function(blob,name,no_auto_bom){return new FileSaver(blob,name||blob.name||"download",no_auto_bom)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(blob,name,no_auto_bom){return name=name||blob.name||"download",no_auto_bom||(blob=auto_bom(blob)),navigator.msSaveOrOpenBlob(blob,name)}:(FS_proto.abort=function(){},FS_proto.readyState=FS_proto.INIT=0,FS_proto.WRITING=1,FS_proto.DONE=2,FS_proto.error=FS_proto.onwritestart=FS_proto.onprogress=FS_proto.onwrite=FS_proto.onabort=FS_proto.onerror=FS_proto.onwriteend=null,saveAs)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof module&&module.exports?module.exports.saveAs=saveAs:null!==__webpack_require__(7)&&null!==__webpack_require__(8)&&(__WEBPACK_AMD_DEFINE_ARRAY__=[],__WEBPACK_AMD_DEFINE_RESULT__=function(){return saveAs}.apply(exports,__WEBPACK_AMD_DEFINE_ARRAY__),!(void 0!==__WEBPACK_AMD_DEFINE_RESULT__&&(module.exports=__WEBPACK_AMD_DEFINE_RESULT__)))},function(module,exports){module.exports=function(){throw new Error("define cannot be used indirect")}},function(module,exports){(function(__webpack_amd_options__){module.exports=__webpack_amd_options__}).call(exports,{})}])});
var uiroutermetatags;!function(uiroutermetatags){function runBlock($log,$rootScope,MetaTags,$window){function stateChangeStart(event,toState,toParams,from,fromParams){$window.prerenderReady=!1}function stateChangeSuccess(event,toState){toState.metaTags||$log.debug('MetaTags - route: "'+toState.name+'" does not contain any metatags'),MetaTags.update(toState.metaTags)}function stateChangeError(event,toState,toParams,fromState,fromParams,error){MetaTags.prerender.statusCode=500,$window.prerenderReady=!0}function stateNotFound(event,unfoundState,fromState){MetaTags.prerender.statusCode=404,$window.prerenderReady=!0}$rootScope.MetaTags=MetaTags,$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess),$rootScope.$on("$stateChangeError",stateChangeError),$rootScope.$on("$stateNotFound",stateNotFound)}runBlock.$inject=["$log","$rootScope","MetaTags","$window"];var appModule=angular.module("ui.router.metatags",["ui.router"]),UIRouterMetatags=function(){function UIRouterMetatags(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return UIRouterMetatags.prototype.setTitlePrefix=function(prefix){return this.prefix=prefix,this},UIRouterMetatags.prototype.setTitleSuffix=function(suffix){return this.suffix=suffix,this},UIRouterMetatags.prototype.setDefaultTitle=function(title){return this.defaultTitle=title,this},UIRouterMetatags.prototype.setDefaultDescription=function(description){return this.defaultDescription=description,this},UIRouterMetatags.prototype.setDefaultKeywords=function(keywords){return this.defaultKeywords=keywords,this},UIRouterMetatags.prototype.setDefaultRobots=function(robots){return this.defaultRobots=robots,this},UIRouterMetatags.prototype.setStaticProperties=function(properties){return this.staticProperties=properties,this},UIRouterMetatags.prototype.setOGURL=function(enabled){return this.enableOGURL=enabled,this},UIRouterMetatags.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},UIRouterMetatags}();appModule.provider("UIRouterMetatags",UIRouterMetatags);var MetaTags=function(){function MetaTags($log,UIRouterMetatags,$interpolate,$injector,$state,$location,$window){this.$log=$log,this.UIRouterMetatags=UIRouterMetatags,this.$interpolate=$interpolate,this.$injector=$injector,this.$state=$state,this.$location=$location,this.$window=$window,this.prerender={}}return MetaTags.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],MetaTags.prototype.update=function(tags){var _this=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),tags?(this.title=tags.title?this.UIRouterMetatags.prefix+(this.getValue("title",tags.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=tags.description?this.getValue("description",tags.description):this.UIRouterMetatags.defaultDescription,this.keywords=tags.keywords?this.getValue("keywords",tags.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=tags.robots?this.getValue("robots",tags.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(tags.properties,function(value,key){var v=_this.getValue(key,value);v&&(_this.properties[key]=v)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),tags&&tags.prerender?(this.prerender.statusCode=tags.prerender.statusCode?this.getValue("prerender.statusCode",tags.prerender.statusCode):200,this.prerender.header=tags.prerender.header?this.getValue("rerender.header",tags.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(err){this.$log.error("error occured when extracting metatags:",err)}},MetaTags.prototype.getValue=function(tagType,tag){try{return tag?"number"==typeof tag?tag:"string"==typeof tag&&0===tag.trim().length?null:angular.isFunction(tag)||Array.isArray(tag)?this.$injector.invoke(tag,this,this.$state.$current.locals.globals):this.$interpolate(tag)(this.$state.$current.locals.globals):null}catch(err){return this.$log.error("error occured when trying to get the value of tag:",tagType,err),null}},MetaTags}();appModule.service("MetaTags",MetaTags),appModule.run(runBlock)}(uiroutermetatags||(uiroutermetatags={}));
var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(a,b){return a-b}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function($parse,$compile){"use strict";function replaceTemplateTokens($scope,templateString){console.log("what is templateString? ",templateString);var newString=templateString.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,$scope.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",newString),newString}function createDefaultComparer(){function _defaultComparer(a,b){return a>b?1:a<b?-1:0}var stringComparer=_defaultComparer,numericComparer=_defaultComparer;"object"==typeof Intl?stringComparer=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(stringComparer=function(a,b){return(a+"").localeCompare(b,void 0,{sensitivity:"case"})});var comparerFn=function(a,b){return"number"==typeof a&&"number"==typeof b?numericComparer(a,b):a instanceof Date&&b instanceof Date?numericComparer(a.getTime(),b.getTime()):stringComparer(a,b)};return comparerFn}var defaultComparer=createDefaultComparer();return{scope:!0,controller:["$scope","tableSortConfig",function($scope,tableSortConfig){$scope.pagination={template:tableSortConfig.paginationTemplate,perPageOptions:tableSortConfig.perPageOptions.concat(),perPage:tableSortConfig.perPageDefault,currentPage:1,getPageRangeString:function(total){var maxOnPage=total!==$scope.filtering.filteredCount?$scope.filtering.filteredCount:total,startPage=Math.max(($scope.pagination.currentPage-1)*$scope.pagination.perPage+1,1),endPage=Math.min($scope.pagination.currentPage*$scope.pagination.perPage,maxOnPage);return 0===$scope.filtering.filteredCount?"":(endPage===maxOnPage&&1===startPage?"":startPage+"-")+endPage}},console.log("what is pagination: ",$scope.pagination),$scope.filtering={template:tableSortConfig.filterTemplate,filterString:"",filterFunction:tableSortConfig.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",$scope.filtering),$scope.itemsArrayExpression="",$scope.itemNameSingular=tableSortConfig.itemNameSingular,$scope.itemNamePlural=tableSortConfig.itemNamePlural,$scope.noDataText=tableSortConfig.noDataText,$scope.wrappingElementClass=tableSortConfig.wrappingElementClass,$scope.sortExpression=[],$scope.headings=[];var parse_sortexpr=function(expr,name){return[$parse(expr),null,!1,name?name:expr]};this.setSortField=function(sortexpr,element,name,sortBy){var i,expr=parse_sortexpr(sortexpr,name);if(expr.push(sortBy),1===$scope.sortExpression.length&&$scope.sortExpression[0][0]===expr[0])$scope.sortExpression[0][2]?(element.removeClass("tablesort-desc"),element.addClass("tablesort-asc"),$scope.sortExpression[0][2]=!1):(element.removeClass("tablesort-asc"),element.addClass("tablesort-desc"),$scope.sortExpression[0][2]=!0),$scope.$emit("tablesort:sortOrder",[{name:$scope.sortExpression[0][3],order:$scope.sortExpression[0][2]}]);else{for(i=0;i<$scope.headings.length;i+=1)$scope.headings[i].removeClass("tablesort-desc").removeClass("tablesort-asc");element.addClass("tablesort-asc"),$scope.sortExpression=[expr],$scope.$emit("tablesort:sortOrder",[{name:expr[3],order:expr[2]}])}},this.addSortField=function(sortexpr,element,name,sortBy){var i,toggle_order=!1,expr=parse_sortexpr(sortexpr,name);for(expr.push(sortBy),i=0;i<$scope.sortExpression.length;i+=1)$scope.sortExpression[i][0]===expr[0]&&($scope.sortExpression[i][2]?(element.removeClass("tablesort-desc"),element.addClass("tablesort-asc"),$scope.sortExpression[i][2]=!1):(element.removeClass("tablesort-asc"),element.addClass("tablesort-desc"),$scope.sortExpression[i][2]=!0),toggle_order=!0);toggle_order||(element.addClass("tablesort-asc"),$scope.sortExpression.push(expr)),$scope.$emit("tablesort:sortOrder",$scope.sortExpression.map(function(a){return{name:a[3],order:a[2]}}))},this.setTrackBy=function(trackBy){$scope.trackBy=trackBy},this.registerHeading=function(headingelement){$scope.headings.push(headingelement)},this.addFilterField=function(sortexpr,element){var expr=parse_sortexpr(sortexpr);$scope.filtering.filterFields.push(expr)},this.setArrayExpr=function(dataArrayExp){$scope.itemsArrayExpression=dataArrayExp}}],link:function($scope,$element,$attrs,tsWrapperCtrl){if($attrs.tsItemName){var originalNoDataText="No "+$scope.itemNamePlural;$scope.itemNameSingular=$attrs.tsItemName,$attrs.tsItemNamePlural?$scope.itemNamePlural=$attrs.tsItemNamePlural:$scope.itemNamePlural=$attrs.tsItemName+"s",$attrs.tsNoDataText||$scope.noDataText!==originalNoDataText||($scope.noDataText="No "+$scope.itemNamePlural)}if($attrs.tsNoDataText&&($scope.noDataText=$attrs.tsNoDataText),$attrs.tsWrappingElementClass&&($scope.wrappingElementClass=$attrs.tsWrappingElementClass),$attrs.tsPerPageOptions&&($scope.pagination.perPageOptions=$scope.$eval($attrs.tsPerPageOptions)),$attrs.tsPerPageDefault){var defaultPerPage=$scope.$eval($attrs.tsPerPageDefault);isNaN(defaultPerPage)||($scope.pagination.perPage=defaultPerPage,$scope.pagination.perPageOptions.indexOf($scope.pagination.perPage)===-1&&($scope.pagination.perPageOptions.push($scope.pagination.perPage),$scope.pagination.perPageOptions.sort(function(a,b){return a-b})))}if($attrs.tsFilterFields)for(var filterFields=$attrs.tsFilterFields.split(",").filter(function(item){return item&&""!==item.trim()}),i=0;i<filterFields.length;i+=1)tsWrapperCtrl.addFilterField(filterFields[i]);var $filterHtml;if("false"!==$attrs.tsDisplayFiltering&&""!==$scope.filtering.template&&$scope.filtering.filterFields.length>0){var filterString=replaceTemplateTokens($scope,$scope.filtering.template);$filterHtml=$compile(filterString)($scope),$element.parent()[0].insertBefore($filterHtml[0],$element[0])}$attrs.tsFilterFunction&&($scope.filtering.filterFunction=$scope.$eval($attrs.tsFilterFunction)),angular.isFunction($scope.filtering.filterFunction)||(0===$scope.filtering.filterFields.length?$scope.filtering.filterFunction=function(item){return!0}:$scope.filtering.filterFunction=function(item){for(var shouldInclude=!1,i=0;i<$scope.filtering.filterFields.length;i+=1)if(!shouldInclude){var str=($scope.filtering.filterFields[i][0](item)||"").toString().toLowerCase();shouldInclude=str.indexOf($scope.filtering.filterString.toLowerCase())>-1}return shouldInclude}),$scope.filterLimitFun=function(array){if(!$attrs.tsFilterFunction&&""===$scope.filtering.filterString)return $scope.filtering.filteredCount=array.length,array;var filteredArr=array.filter($scope.filtering.filterFunction);return $scope.filtering.filteredCount=filteredArr.length,filteredArr},$scope.sortFun=function(a,b){var i,aval,bval,descending,filterFun,compResult;for(i=0;i<$scope.sortExpression.length;i+=1){if(aval=$scope.sortExpression[i][0](a),bval=$scope.sortExpression[i][0](b),filterFun=b[$scope.sortExpression[i][1]],filterFun&&(aval=filterFun(aval),bval=filterFun(bval)),void 0!==aval&&null!==aval||(aval=""),void 0!==bval&&null!==bval||(bval=""),descending=$scope.sortExpression[i][2],compResult=($scope.sortExpression[i][4]||defaultComparer)(aval,bval),1===compResult)return descending?-1:1;if(compResult===-1)return descending?1:-1}if($scope.trackBy){if(aval=a[$scope.trackBy],bval=b[$scope.trackBy],void 0!==aval&&null!==aval||(aval=""),void 0!==bval&&null!==bval||(bval=""),compResult=defaultComparer(aval,bval),1===compResult)return descending?-1:1;if(compResult===-1)return descending?1:-1}return 0},$scope.pageLimitFun=function(array){if("false"===$attrs.tsDisplayPagination||""===$scope.pagination.template)return array;for(var begin=($scope.pagination.currentPage-1)*$scope.pagination.perPage,end=$scope.pagination.currentPage*$scope.pagination.perPage,final=[],i=0;i<array.length;i++)i>=begin&&i<end&&final.push(array[i]);return final};var $paginationHtml;if("false"!==$attrs.tsDisplayPagination&&""!==$scope.pagination.template){var pagerString=replaceTemplateTokens($scope,$scope.pagination.template);$paginationHtml=$compile(pagerString)($scope),$element.after($paginationHtml)}var $wrappingElement;if($scope.wrappingElementClass&&""!==$scope.wrappingElementClass&&($wrappingElement=$element.wrap("<div class='"+$scope.wrappingElementClass+"' />")),$attrs.tsGetTableDataFunction){var getter=$parse($attrs.tsGetTableDataFunction),setter=getter.assign,fn=function(shouldApplySorting,shouldApplyFiltering,limitToCurrentPageOnly){var arr=$parse($scope.itemsArrayExpression)($scope);return shouldApplySorting&&(arr=arr.sort($scope.sortFun)),shouldApplyFiltering&&(arr=$scope.filterLimitFun(arr)),limitToCurrentPageOnly&&(arr=$scope.pageLimitFun(arr)),arr};setter($scope.$parent,fn)}$scope.$on("$destroy",function(){$filterHtml&&$filterHtml.remove(),$paginationHtml&&$paginationHtml.remove(),$wrappingElement&&$wrappingElement.replaceWith($element)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(scope,element,attrs,tsWrapperCtrl){var clickingCallback=function(event){scope.$apply(function(){event.shiftKey?tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy):tsWrapperCtrl.setSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy)})};element.bind("click",clickingCallback),element.addClass("tablesort-sortable"),"tsDefault"in attrs&&"0"!==attrs.tsDefault&&(tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy),"descending"===attrs.tsDefault&&tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy)),"tsFilter"in attrs&&tsWrapperCtrl.addFilterField(attrs.tsCriteria,element),tsWrapperCtrl.registerHeading(element)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function($compile,$interpolate){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(scope,element,attrs,tsWrapperCtrl){for(var repeatAttrs=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],ngRepeatDirective=repeatAttrs[0],tsRepeatDirective="ts-repeat",i=0;i<repeatAttrs.length;i++)if(angular.isDefined(element.attr(repeatAttrs[i]))){ngRepeatDirective=repeatAttrs[i],tsRepeatDirective=ngRepeatDirective.replace(/^(data-)?ng/,"$1ts");break}var tsExpr="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",repeatExpr=element.attr(ngRepeatDirective),repeatExprRegex=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,trackByMatch=repeatExpr.match(/\s+track\s+by\s+\S+?\.(\S+)/),repeatInMatch=repeatExpr.match(repeatExprRegex);if(trackByMatch&&tsWrapperCtrl.setTrackBy(trackByMatch[1]),repeatExpr.search(/tablesort/)!==-1?(repeatExpr=repeatExpr.replace(/tablesort/,tsExpr),trackByMatch&&(repeatExpr=repeatExpr.replace(trackByMatch[0],"")+trackByMatch[0])):repeatExpr=repeatExpr.replace(repeatExprRegex,"$1 in $2 | "+tsExpr+"$3"),angular.isUndefined(attrs.tsHideNoData)){var startSym=$interpolate.startSymbol(),endSym=$interpolate.endSymbol(),noDataRow=angular.element(element[0]).clone();noDataRow.removeAttr(ngRepeatDirective),noDataRow.removeAttr(tsRepeatDirective),noDataRow.addClass("showIfLast"),noDataRow.children().remove(),noDataRow.append('<td colspan="'+element[0].childElementCount+'">'+startSym+"noDataText"+endSym+"</td>"),noDataRow=$compile(noDataRow)(scope),element.parent().prepend(noDataRow)}tsWrapperCtrl.setArrayExpr(repeatInMatch[2]),angular.element(element[0]).attr(ngRepeatDirective,repeatExpr),$compile(element,null,1e6)(scope)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(array,limitFun){if(array)return limitFun(array)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(array,sortfun){if(array){var arrayCopy=array.concat();return arrayCopy.sort(sortfun)}}}),tableSortModule.filter("parseInt",function(){return function(input){return parseInt(input)||null}}),tableSortModule.filter("parseFloat",function(){return function(input){return parseFloat(input)||null}}),tableSortModule.filter("parseDate",function(){return function(input){var timestamp=Date.parse(input);return isNaN(timestamp)?null:timestamp}});
angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(scope,element,attrs){function _observeStringAttr(attr,baseClass){var className;attrs.$observe(attr,function(){baseClass=baseClass||"fa-"+attr,element.removeClass(currentClasses[attr]),attrs[attr]&&(className=[baseClass,attrs[attr]].join("-"),element.addClass(className),currentClasses[attr]=className)})}function _observeBooleanAttr(attr,className){var value;attrs.$observe(attr,function(){className=className||"fa-"+attr,value=attr in attrs&&"false"!==attrs[attr]&&attrs[attr]!==!1,element.toggleClass(className,value)})}var currentClasses={};_observeStringAttr("name","fa"),_observeStringAttr("rotate"),_observeStringAttr("flip"),_observeStringAttr("stack"),attrs.$observe("size",function(){var className;element.removeClass(currentClasses.size),"large"===attrs.size?className="fa-lg":isNaN(parseInt(attrs.size,10))||(className="fa-"+attrs.size+"x"),element.addClass(className),currentClasses.size=className}),attrs.$observe("stack",function(){var className;element.removeClass(currentClasses.stack),"large"===attrs.stack?className="fa-stack-lg":isNaN(parseInt(attrs.stack,10))||(className="fa-stack-"+attrs.stack+"x"),element.addClass(className),currentClasses.stack=className}),_observeBooleanAttr("border"),_observeBooleanAttr("fw"),_observeBooleanAttr("inverse"),_observeBooleanAttr("spin"),element.toggleClass("fa-li",element.parent()&&"LI"===element.parent().prop("tagName")&&element.parent().parent()&&element.parent().parent().hasClass("fa-ul")&&element.parent().children()[0]===element[0]&&"false"!==attrs.list&&attrs.list!==!1),attrs.$observe("alt",function(){var altText=attrs.alt,altElem=element.next(),altElemClass="fa-alt-text";altText?(element.removeAttr("alt"),altElem&&altElem.hasClass(altElemClass)||(element.after('<span class="sr-only fa-alt-text"></span>'),altElem=element.next()),altElem.text(altText)):altElem&&altElem.hasClass(altElemClass)&&altElem.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(scope,element,attrs){function _observeStringAttr(attr,baseClass){var className;attrs.$observe(attr,function(){baseClass=baseClass||"fa-"+attr,element.removeClass(currentClasses[attr]),attrs[attr]&&(className=[baseClass,attrs[attr]].join("-"),element.addClass(className),currentClasses[attr]=className)})}var currentClasses={};_observeStringAttr("size"),attrs.$observe("size",function(){var className;element.removeClass(currentClasses.size),"large"===attrs.size?className="fa-lg":isNaN(parseInt(attrs.size,10))||(className="fa-"+attrs.size+"x"),element.addClass(className),currentClasses.size=className})}}});
!function($,window,document,undefined){"use strict";function Plugin(element,options){this.options=$.extend({},defaults,options),this._defaults=defaults,this._name=pluginName,this.$element=$(element),this.init()}var pluginName="menuButton",defaults={propertyName:"value"};Plugin.prototype={constructor:Plugin,init:function(){this.toggle()},toggle:function(el,options){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},$.fn[pluginName]=function(options){return this.each(function(){$.data(this,"plugin_"+pluginName)?$.data(this,"plugin_"+pluginName).toggle():$.data(this,"plugin_"+pluginName,new Plugin(this,options))})},$(document).on("click",function(e){$.each($("[data-buttons=dropdown]"),function(i,value){$(e.target.offsetParent)[0]!=$(this)[0]&&$.data(this,"plugin_"+pluginName)&&($.data(this,"plugin_"+pluginName).hideMenu(),$(this).find("ul").hide())})}),$(document).on("click","[data-buttons=dropdown]",function(e){var $dropdown=$(e.currentTarget);$dropdown.menuButton()}),$(document).on("click","[data-buttons=dropdown] > a",function(e){e.preventDefault()})}(jQuery,window,document);
var timerModule=angular.module("timer",[]).directive("timer",["$compile",function($compile){return{restrict:"EA",replace:!1,scope:{interval:"=interval",startTimeAttr:"=startTime",endTimeAttr:"=endTime",countdownattr:"=countdown",finishCallback:"&finishCallback",autoStart:"&autoStart",language:"@?",fallback:"@?",maxTimeUnit:"=",seconds:"=?",minutes:"=?",hours:"=?",days:"=?",months:"=?",years:"=?",secondsS:"=?",minutesS:"=?",hoursS:"=?",daysS:"=?",monthsS:"=?",yearsS:"=?"},controller:["$scope","$element","$attrs","$timeout","I18nService","$interpolate","progressBarService",function($scope,$element,$attrs,$timeout,I18nService,$interpolate,progressBarService){function resetTimeout(){$scope.timeoutId&&clearTimeout($scope.timeoutId)}function calculateTimeUnits(){var timeUnits={};void 0!==$attrs.startTime&&($scope.millis=moment().diff(moment($scope.startTimeAttr))),timeUnits=i18nService.getTimeUnits($scope.millis),$scope.maxTimeUnit&&"day"!==$scope.maxTimeUnit?"second"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3),$scope.minutes=0,$scope.hours=0,$scope.days=0,$scope.months=0,$scope.years=0):"minute"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4),$scope.hours=0,$scope.days=0,$scope.months=0,$scope.years=0):"hour"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5),$scope.days=0,$scope.months=0,$scope.years=0):"month"===$scope.maxTimeUnit?($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24%30),$scope.months=Math.floor($scope.millis/36e5/24/30),$scope.years=0):"year"===$scope.maxTimeUnit&&($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24%30),$scope.months=Math.floor($scope.millis/36e5/24/30%12),$scope.years=Math.floor($scope.millis/36e5/24/365)):($scope.seconds=Math.floor($scope.millis/1e3%60),$scope.minutes=Math.floor($scope.millis/6e4%60),$scope.hours=Math.floor($scope.millis/36e5%24),$scope.days=Math.floor($scope.millis/36e5/24),$scope.months=0,$scope.years=0),$scope.secondsS=1===$scope.seconds?"":"s",$scope.minutesS=1===$scope.minutes?"":"s",$scope.hoursS=1===$scope.hours?"":"s",$scope.daysS=1===$scope.days?"":"s",$scope.monthsS=1===$scope.months?"":"s",$scope.yearsS=1===$scope.years?"":"s",$scope.secondUnit=timeUnits.seconds,$scope.minuteUnit=timeUnits.minutes,$scope.hourUnit=timeUnits.hours,$scope.dayUnit=timeUnits.days,$scope.monthUnit=timeUnits.months,$scope.yearUnit=timeUnits.years,$scope.sseconds=$scope.seconds<10?"0"+$scope.seconds:$scope.seconds,$scope.mminutes=$scope.minutes<10?"0"+$scope.minutes:$scope.minutes,$scope.hhours=$scope.hours<10?"0"+$scope.hours:$scope.hours,$scope.ddays=$scope.days<10?"0"+$scope.days:$scope.days,$scope.mmonths=$scope.months<10?"0"+$scope.months:$scope.months,$scope.yyears=$scope.years<10?"0"+$scope.years:$scope.years}"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),$scope.autoStart=$attrs.autoStart||$attrs.autostart,$scope.language=$scope.language||"en",$scope.fallback=$scope.fallback||"en",$scope.$watch("language",function(newVal,oldVal){void 0!==newVal&&i18nService.init(newVal,$scope.fallback)});var i18nService=new I18nService;i18nService.init($scope.language,$scope.fallback),$scope.displayProgressBar=0,$scope.displayProgressActive="active",0===$element.html().trim().length?$element.append($compile("<span>"+$interpolate.startSymbol()+"millis"+$interpolate.endSymbol()+"</span>")($scope)):$element.append($compile($element.contents())($scope)),$scope.startTime=null,$scope.endTime=null,$scope.timeoutId=null,$scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>=0?parseInt($scope.countdownattr,10):void 0,$scope.isRunning=!1,$scope.$on("timer-start",function(){$scope.start()}),$scope.$on("timer-resume",function(){$scope.resume()}),$scope.$on("timer-stop",function(){$scope.stop()}),$scope.$on("timer-clear",function(){$scope.clear()}),$scope.$on("timer-reset",function(){$scope.reset()}),$scope.$on("timer-set-countdown",function(e,countdown){$scope.countdown=countdown}),$scope.$watch("startTimeAttr",function(newValue,oldValue){newValue!==oldValue&&$scope.isRunning&&$scope.start()}),$scope.$watch("endTimeAttr",function(newValue,oldValue){newValue!==oldValue&&$scope.isRunning&&$scope.start()}),$scope.start=function(){$scope.startTime=$scope.startTimeAttr?moment($scope.startTimeAttr):moment(),$scope.endTime=$scope.endTimeAttr?moment($scope.endTimeAttr):null,angular.isNumber($scope.countdown)||($scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>0?parseInt($scope.countdownattr,10):void 0),resetTimeout(),tick(),$scope.isRunning=!0,$scope.$emit("timer-started",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.resume=function(){resetTimeout(),$scope.countdownattr&&($scope.countdown+=1),$scope.startTime=moment().diff(moment($scope.stoppedTime).diff(moment($scope.startTime))),tick(),$scope.isRunning=!0,$scope.$emit("timer-started",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.stop=$scope.pause=function(){var timeoutId=$scope.timeoutId;$scope.clear(),$scope.$emit("timer-stopped",{timeoutId:timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$scope.clear=function(){$scope.stoppedTime=moment(),resetTimeout(),$scope.timeoutId=null,$scope.isRunning=!1},$scope.reset=function(){$scope.startTime=$scope.startTimeAttr?moment($scope.startTimeAttr):moment(),$scope.endTime=$scope.endTimeAttr?moment($scope.endTimeAttr):null,$scope.countdown=angular.isNumber($scope.countdownattr)&&parseInt($scope.countdownattr,10)>0?parseInt($scope.countdownattr,10):void 0,resetTimeout(),tick(),$scope.isRunning=!1,$scope.clear(),$scope.$emit("timer-reset",{timeoutId:timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days})},$element.bind("$destroy",function(){resetTimeout(),$scope.isRunning=!1}),$scope.countdownattr?($scope.millis=1e3*$scope.countdownattr,$scope.addCDSeconds=function(extraSeconds){$scope.countdown+=extraSeconds,$scope.isRunning||$scope.start()},$scope.$on("timer-add-cd-seconds",function(e,extraSeconds){$scope.addCDSeconds(extraSeconds)}),$scope.$on("timer-set-countdown-seconds",function(e,countdownSeconds){$scope.isRunning||$scope.clear(),$scope.countdown=countdownSeconds,$scope.millis=1e3*countdownSeconds,calculateTimeUnits()})):$scope.millis=0,calculateTimeUnits();var tick=function tick(){var typeTimer=null;$scope.millis=moment().diff($scope.startTime);var adjustment=$scope.millis%1e3;return $scope.endTimeAttr&&(typeTimer=$scope.endTimeAttr,$scope.millis=moment($scope.endTime).diff(moment()),adjustment=$scope.interval-$scope.millis%1e3),$scope.countdownattr&&(typeTimer=$scope.countdownattr,$scope.millis=1e3*$scope.countdown),$scope.millis<0?($scope.stop(),$scope.millis=0,calculateTimeUnits(),void($scope.finishCallback&&$scope.$eval($scope.finishCallback))):(calculateTimeUnits(),$scope.timeoutId=setTimeout(function(){tick(),$scope.$apply()},$scope.interval-adjustment),$scope.$emit("timer-tick",{timeoutId:$scope.timeoutId,millis:$scope.millis,seconds:$scope.seconds,minutes:$scope.minutes,hours:$scope.hours,days:$scope.days}),$scope.countdown>0?$scope.countdown--:$scope.countdown<=0&&($scope.stop(),$scope.finishCallback&&$scope.$eval($scope.finishCallback)),void(null!==typeTimer&&($scope.progressBar=progressBarService.calculateProgressBar($scope.startTime,$scope.millis,$scope.endTime,$scope.countdownattr),100===$scope.progressBar&&($scope.displayProgressActive=""))))};void 0!==$scope.autoStart&&$scope.autoStart!==!0||$scope.start()}]}}]).directive("timerControls",function(){return{restrict:"EA",scope:!0,controller:["$scope",function($scope){$scope.timerStatus="reset",$scope.$on("timer-started",function(){$scope.timerStatus="started"}),$scope.$on("timer-stopped",function(){$scope.timerStatus="stopped"}),$scope.$on("timer-reset",function(){$scope.timerStatus="reset"}),$scope.timerStart=function(){$scope.$broadcast("timer-start")},$scope.timerStop=function(){$scope.$broadcast("timer-stop")},$scope.timerResume=function(){$scope.$broadcast("timer-resume")},$scope.timerToggle=function(){switch($scope.timerStatus){case"started":$scope.timerStop();break;case"stopped":$scope.timerResume();break;case"reset":$scope.timerStart()}},$scope.timerAddCDSeconds=function(extraSeconds){$scope.$broadcast("timer-add-cd-seconds",extraSeconds)}}]}});"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports=timerModule);var app=angular.module("timer");app.factory("I18nService",function(){var I18nService=function(){};return I18nService.prototype.language="en",I18nService.prototype.fallback="en",I18nService.prototype.timeHumanizer={},I18nService.prototype.init=function(lang,fallback){var supported_languages=humanizeDuration.getSupportedLanguages();this.fallback=void 0!==fallback?fallback:"en",supported_languages.indexOf(fallback)===-1&&(this.fallback="en"),this.language=lang,supported_languages.indexOf(lang)===-1&&(this.language=this.fallback),this.timeHumanizer=humanizeDuration.humanizer({language:this.language,halfUnit:!1})},I18nService.prototype.getTimeUnits=function(millis){var diffFromAlarm=1e3*Math.round(millis/1e3),time={};return"undefined"!=typeof this.timeHumanizer?time={millis:this.timeHumanizer(diffFromAlarm,{units:["ms"]}),seconds:this.timeHumanizer(diffFromAlarm,{units:["s"]}),minutes:this.timeHumanizer(diffFromAlarm,{units:["m","s"]}),hours:this.timeHumanizer(diffFromAlarm,{units:["h","m","s"]}),days:this.timeHumanizer(diffFromAlarm,{units:["d","h","m","s"]}),months:this.timeHumanizer(diffFromAlarm,{units:["mo","d","h","m","s"]}),years:this.timeHumanizer(diffFromAlarm,{units:["y","mo","d","h","m","s"]})}:console.error('i18nService has not been initialized. You must call i18nService.init("en") for example'),time},I18nService});var app=angular.module("timer");app.factory("progressBarService",function(){var ProgressBarService=function(){};return ProgressBarService.prototype.calculateProgressBar=function(startValue,remainingTime,endTimeAttr,coutdown){var endTimeValue,initialCountdown,displayProgressBar=0;return remainingTime/=1e3,null!==endTimeAttr?(endTimeValue=moment(endTimeAttr),initialCountdown=endTimeValue.diff(startValue,"seconds"),displayProgressBar=100*remainingTime/initialCountdown):displayProgressBar=100*remainingTime/coutdown,displayProgressBar=100-displayProgressBar,displayProgressBar=Math.round(10*displayProgressBar)/10,displayProgressBar>100&&(displayProgressBar=100),displayProgressBar},new ProgressBarService});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
