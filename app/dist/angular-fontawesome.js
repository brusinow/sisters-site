angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(scope,element,attrs){function _observeStringAttr(attr,baseClass){var className;attrs.$observe(attr,function(){baseClass=baseClass||"fa-"+attr,element.removeClass(currentClasses[attr]),attrs[attr]&&(className=[baseClass,attrs[attr]].join("-"),element.addClass(className),currentClasses[attr]=className)})}function _observeBooleanAttr(attr,className){var value;attrs.$observe(attr,function(){className=className||"fa-"+attr,value=attr in attrs&&"false"!==attrs[attr]&&!1!==attrs[attr],element.toggleClass(className,value)})}var currentClasses={};_observeStringAttr("name","fa"),_observeStringAttr("rotate"),_observeStringAttr("flip"),_observeStringAttr("stack"),attrs.$observe("size",function(){var className;element.removeClass(currentClasses.size),"large"===attrs.size?className="fa-lg":isNaN(parseInt(attrs.size,10))||(className="fa-"+attrs.size+"x"),element.addClass(className),currentClasses.size=className}),attrs.$observe("stack",function(){var className;element.removeClass(currentClasses.stack),"large"===attrs.stack?className="fa-stack-lg":isNaN(parseInt(attrs.stack,10))||(className="fa-stack-"+attrs.stack+"x"),element.addClass(className),currentClasses.stack=className}),_observeBooleanAttr("border"),_observeBooleanAttr("fw"),_observeBooleanAttr("inverse"),_observeBooleanAttr("spin"),element.toggleClass("fa-li",element.parent()&&"LI"===element.parent().prop("tagName")&&element.parent().parent()&&element.parent().parent().hasClass("fa-ul")&&element.parent().children()[0]===element[0]&&"false"!==attrs.list&&!1!==attrs.list),attrs.$observe("alt",function(){var altText=attrs.alt,altElem=element.next();altText?(element.removeAttr("alt"),altElem&&altElem.hasClass("fa-alt-text")||(element.after('<span class="sr-only fa-alt-text"></span>'),altElem=element.next()),altElem.text(altText)):altElem&&altElem.hasClass("fa-alt-text")&&altElem.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(scope,element,attrs){var currentClasses={};!function(attr,baseClass){var className;attrs.$observe(attr,function(){baseClass=baseClass||"fa-"+attr,element.removeClass(currentClasses[attr]),attrs[attr]&&(className=[baseClass,attrs[attr]].join("-"),element.addClass(className),currentClasses[attr]=className)})}("size"),attrs.$observe("size",function(){var className;element.removeClass(currentClasses.size),"large"===attrs.size?className="fa-lg":isNaN(parseInt(attrs.size,10))||(className="fa-"+attrs.size+"x"),element.addClass(className),currentClasses.size=className})}}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
