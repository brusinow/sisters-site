var authWait=["Auth",function(Auth){return Auth.$waitForSignIn()}],authRequire=["Auth",function(Auth){return Auth.$requireSignIn()}];angular.module("SistersApp",["SistersCtrls","SistersDirectives","ui.router","ui.bootstrap","firebase","angularMoment","ngStorage","ngAnimate","picardy.fontawesome","textAngular","ui.router.metatags","angular-parallax","ngFileSaver","timer"]).run(["$rootScope","$state","$location","$window","MetaTags",function($rootScope,$state,$location,$window,MetaTags){$rootScope.$state=$state,$rootScope.MetaTags=MetaTags,$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){"AUTH_REQUIRED"===error&&$state.go("login")}),$rootScope.$on("$stateChangeSuccess",function(event){document.body.scrollTop=document.documentElement.scrollTop=0,$window.ga&&$window.ga("send","pageview",{page:$location.path()})})}]).config(["$stateProvider","$urlRouterProvider","$locationProvider","UIRouterMetatagsProvider","$provide",function($stateProvider,$urlRouterProvider,$locationProvider,UIRouterMetatagsProvider,$provide){UIRouterMetatagsProvider.setDefaultTitle("SISTERS").setDefaultDescription('Seattle duo. "Drink Champagne", the debut album, available now!').setStaticProperties({"og:site_name":"SISTERS"}).setOGURL(!0),$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",metaTags:{title:"SISTERS",description:'Seattle duo. "Drink Champagne", the debut album, available now!'},templateUrl:"/views/home.html",controller:"HomeCtrl"}).state("releaseCountdown",{url:"/greetingsfromsisters",metaTags:{title:"SISTERS",description:"Seattle duo. Please return on October 9th at 1pm PST for something awesome."},templateUrl:"/views/countdown.html",controller:"ReleaseCountdownCtrl"}).state("admin",{url:"/admin",templateUrl:"/views/admin/adminMain.html",controller:"AdminMainCtrl",resolve:{currentAuth:authRequire}}).state("admin-orders",{url:"/admin/orders",templateUrl:"/views/admin/adminOrders.html",controller:"AdminOrdersCtrl",resolve:{currentAuth:authRequire,Orders:["GetAllOrders",function(GetAllOrders){return GetAllOrders().$loaded()}]}}).state("admin-tickets",{url:"/admin/tickets",templateUrl:"/views/admin/adminTickets.html",controller:"AdminTicketsCtrl",resolve:{currentAuth:authRequire,Tickets:["GetAllTickets",function(GetAllTickets){return GetAllTickets().$loaded()}]}}).state("admin-ticket-each",{url:"/admin/tickets/:id",templateUrl:"/views/admin/adminTicketEach.html",controller:"AdminTicketsEachCtrl",resolve:{currentAuth:authRequire,ThisTicket:["GetSingleTicket","$stateParams",function(GetSingleTicket,$stateParams){return GetSingleTicket($stateParams.id).$loaded()}],WillCall:["ThisWillCall","$stateParams",function(ThisWillCall,$stateParams){return ThisWillCall($stateParams.id).$loaded()}]}}).state("about",{url:"/about",templateUrl:"/views/about.html",controller:"AboutCtrl"}).state("press",{url:"/press",templateUrl:"/views/press.html",controller:"PressCtrl"}).state("contact",{url:"/contact",templateUrl:"/views/contact.html",controller:"ContactCtrl"}).state("download",{url:"/download/:id",resolve:{downloadKey:["DownloadKeyService","$stateParams",function(DownloadKeyService,$stateParams){return DownloadKeyService($stateParams.id).$loaded()}]},onEnter:["$state","$stateParams","$timeout","downloadKey",function($state,$stateParams,$timeout,downloadKey){downloadKey===!0?$timeout(function(){console.log("success!")},0):$timeout(function(){console.log("failed!")},0)}]}).state("blog",{templateUrl:"/views/blog/blog.html",controller:"BlogMasterCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}]}}).state("blog-new",{url:"/blog/new",templateUrl:"/views/blog/newBlogPost.html",controller:"NewBlogCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(AllTagsService){return AllTagsService().$loaded()}]}}).state("blog-edit",{url:"/blog/edit/:slug",templateUrl:"/views/blog/editBlogPost.html",controller:"EditBlogCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(AllTagsService){return AllTagsService().$loaded()}],thisPost:["$stateParams","ThisPostService",function($stateParams,ThisPostService){return ThisPostService($stateParams.slug).$loaded()}]}}).state("blog-tags-edit",{url:"/blog/editTags/",templateUrl:"/views/blog/editTags.html",controller:"EditBlogTagsCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(AllTagsService){return AllTagsService().$loaded()}]}}).state("blog.main",{url:"/blog",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogCtrl",resolve:{currentAuth:authWait}}).state("blog.page",{url:"/blog/:page",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogCtrl",resolve:{currentAuth:authWait}}).state("blog.archive",{url:"/blog/archives/:year/:month",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogArchiveCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}],Archive:["$stateParams","ArchiveShowService",function($stateParams,ArchiveShowService){return ArchiveShowService($stateParams.year,$stateParams.month).$loaded()}]}}).state("blog.archivePage",{url:"/blog/archives/:year/:month/:page",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogArchiveCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}],Archive:["$stateParams","ArchiveShowService",function($stateParams,ArchiveShowService){return ArchiveShowService($stateParams.year,$stateParams.month).$loaded()}]}}).state("blog.tags",{url:"/blog/tags/:tagName",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogTagsCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}],TagsShow:["$stateParams","TagsShowService",function($stateParams,TagsShowService){return TagsShowService($stateParams.tagName).$loaded()}]}}).state("blog.show",{url:"/blog/show/:slug",templateUrl:"/views/blog/blog-content.html",controller:"BlogShowCtrl",resolve:{currentAuth:authWait,thisPost:["$stateParams","ThisPostService",function($stateParams,ThisPostService){return ThisPostService($stateParams.slug).$loaded()}],Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}]},metaTags:{title:function(thisPost){console.log("what is Blog? ",thisPost);var title="SISTERS - "+thisPost[0].postTitle;return title},description:function(thisPost){return thisPost[0].postBody}}}).state("shows",{url:"/shows",metaTags:{title:"SISTERS - Shows",description:"Upcoming shows for Seattle duo SISTERS."},templateUrl:"/views/shows/shows.html",controller:"ShowsCtrl",resolve:{currentAuth:authWait,getShows:["GetShows",function(GetShows){return console.log("app resolve entered"),GetShows().$loaded()}]}}).state("shows-new",{url:"/shows/new",templateUrl:"/views/shows/newShow.html",controller:"NewShowCtrl",resolve:{currentAuth:authWait,getShows:["GetShows",function(GetShows){return console.log("app resolve entered"),GetShows().$loaded()}]}}).state("showTickets",{url:"/shows/:showId",templateUrl:"/views/shows/singleShow.html",controller:"SingleShowCtrl",resolve:{currentAuth:authWait,GetShow:["GetSingleShow","$stateParams",function(GetSingleShow,$stateParams){return GetSingleShow($stateParams.showId).$loaded()}],GetTicket:["GetTicket","$stateParams",function(GetTicket,$stateParams){return GetTicket($stateParams.showId).$loaded()}]}}).state("storeCart",{url:"/store/cart",templateUrl:"/views/store/cart.html",controller:"StoreCartCtrl",resolve:{currentAuth:authWait}}).state("checkout",{templateUrl:"/views/store/checkoutTemplate.html",controller:"CheckoutTemplateCtrl",resolve:{currentAuth:authWait}}).state("checkout.address",{url:"/store/checkout/address",templateUrl:"/views/store/checkoutAddress.html",controller:"StoreAddressCtrl",resolve:{currentAuth:authWait}}).state("checkout.payment",{url:"/store/checkout/payment",templateUrl:"/views/store/checkoutPayment.html",controller:"StorePaymentCtrl",resolve:{currentAuth:authWait,currentOrder:["CurrentOrderService",function(CurrentOrderService){return CurrentOrderService.get()}]}}).state("checkout.confirm",{url:"/store/checkout/confirm",templateUrl:"/views/store/checkoutConfirm.html",controller:"StoreConfirmCtrl",resolve:{currentAuth:authWait,AllTickets:["GetAllTickets",function(GetAllTickets){return GetAllTickets().$loaded()}]}}).state("login",{url:"/login",templateUrl:"/views/login.html",controller:"LoginCtrl"}),$locationProvider.html5Mode(!0)}]).filter("cut",function(){return function(value,enable,wordwise,max,tail){var source=angular.element("<div/>").html(value);console.log("source: ",source);var length=source.text().length;console.log("length: ",length)}}).filter("trustAsResourceUrl",["$sce",function($sce){return function(val){return $sce.trustAsResourceUrl("https://www.youtube.com/embed/"+val)}}]).filter("MomentFilter",["moment",function(moment){return function(val){return moment(val).format("dddd, MMMM Do, YYYY")}}]).filter("tooOld",function(){return function(events){var currentDay=moment().unix(),filtered=[];return angular.forEach(events,function(event){var thisEvent=event.unixDate/1e3;currentDay-thisEvent<=86400&&filtered.push(event)}),filtered}}).filter("DeliveryEstDate",["moment",function(moment){return function(val){return moment(val).format("dddd, MMMM Do")}}]).filter("TimeDate",["moment",function(moment){return function(val){return moment(val).format("MMMM Do YYYY, h:mm:ss a")}}]).filter("slashDate",["moment",function(moment){return function(val){return moment(1e3*val).format("MM/DD/YYYY")}}]).filter("timeAgo",["moment",function(){return function(val){var date=new Date(val);return console.log(date),console.log(typeof date),moment(date).fromNow()}}]).filter("reverse",function(){return function(items){return items.slice().reverse()}}).filter("centsToDollars",function(){return function(val){return val/100}}),angular.module("SistersCtrls",["SistersServices"]).controller("MainCtrl",["$scope","$state","$timeout","$http",function($scope,$state,$timeout,$http){$scope.$on("loadMainContainer",function(event,data){"loaded"===data?$scope.mainLoaded=!0:$scope.mainLoaded=!1})}]).controller("HomeCtrl",["$scope","$state","$timeout","$http","LoadedService",function($scope,$state,$timeout,$http,LoadedService){var main=document.getElementById("main");main.style.backgroundColor="rgba(247, 237, 245, 0)",main.style.width="",main.style.padding="",main.style.paddingBottom="400px",$scope.loaded=LoadedService.get();var width=window.innerWidth;!$scope.loaded&&width>806?$timeout(function(){console.log("fade me in!"),$scope.$emit("loadMainContainer","loaded"),$scope.fadeHome=!0,LoadedService.set(!0)},500):$timeout(function(){$scope.$emit("loadMainContainer","loaded"),$scope.fadeHome=!0,LoadedService.set(!0)},500),$scope.mailchimpSubmit=function(form,email,isNav){if(form.$valid){$scope.isPopup=!1;var url="//sisterstheband.us14.list-manage.com/subscribe/post-json?u=bc38720b0bcc7a32641bb572c&amp;id=242f4adc89&EMAIL="+email+"&c=JSON_CALLBACK";$http.jsonp(url).then(function(res){console.log(res),$scope.user={},isNav&&($scope.mailConfirm=!0)},function(res){console.log(res)})}}}]).controller("AboutCtrl",["$scope","$state","$timeout",function($scope,$state,$timeout){var main=document.getElementById("main");main.style.backgroundColor="rgba(255, 255, 255, 1)",main.style.padding="0 0 176px 0",main.style.width="100%",$scope.$emit("loadMainContainer","loaded")}]).controller("ContactCtrl",["$scope","$state","$timeout",function($scope,$state,$timeout){var main=document.getElementById("main");main.style.backgroundColor="rgba(255, 255, 255, 0)",main.style.padding="",main.style.width="",$scope.$emit("loadMainContainer","loaded")}]).controller("PressCtrl",["$scope","$state","$timeout",function($scope,$state,$timeout){var main=document.getElementById("main");main.style.backgroundColor="rgba(255, 255, 255, 0)",main.style.padding="0 0 176px 0",main.style.width="90%",$scope.$emit("loadMainContainer","loaded")}]).controller("ReleaseCountdownCtrl",["$scope","$state","$timeout",function($scope,$state,$timeout){var main=document.getElementById("main");main.style.backgroundColor="rgba(255, 255, 255, 0)",main.style.padding="0 0 176px 0",main.style.width="90%",$scope.$emit("loadMainContainer","loaded"),$scope.showCountdown=!0,$scope.endTime="09 Oct 2017 12:00:00 PST",$scope.endCountdown=function(){$scope.showCountdown=!1}}]),angular.module("SistersCtrls").controller("LoginCtrl",["$scope","$state","Auth",function($scope,$state,Auth){var main=document.getElementById("main");main.style.backgroundColor="rgba(0,0,0,0)",$scope.$emit("loadMainContainer","loaded"),$scope.submitted=!1,$scope.logged=!1,Auth.$onAuthStateChanged(function(firebaseUser){firebaseUser?($scope.logged=!0,$state.go("home")):console.log("Not logged in.")}),$scope.user={},$scope.login=function(){$scope.submitted=!0,$scope.firebaseUser=null,Auth.$signInWithEmailAndPassword($scope.user.email,$scope.user.password).then(function(firebaseUser){$scope.firebaseUser=firebaseUser}).catch(function(error){console.error("Authentication failed:",error)})}}]),angular.module("SistersCtrls").controller("NewBlogCtrl",["$scope","$state","$http","Auth","BlogPosts","AllTags","HelperService","SubmitImage","moment",function($scope,$state,$http,Auth,BlogPosts,AllTags,HelperService,SubmitImage,moment){var main=document.getElementById("main");main.style.backgroundColor="rgba(0,0,0,0)",$scope.$emit("loadMainContainer","loaded"),$scope.BlogPosts=BlogPosts(),$scope.tags=AllTags,$scope.checkedTags={},$scope.data={},$scope.resetMedia=function(){$scope.data.youtube="",$scope.data.image=""},$scope.submit=function(){console.log("submit clicked"),console.log("what is post? ",$scope.post),"image"===$scope.data.mediaSelect?SubmitImage($scope.post,$scope.BlogPosts,$scope.data.image,addPost):"youtube"===$scope.data.mediaSelect&&($scope.data.youtube=HelperService.parseYouTube($scope.data.youtube),addPost($scope.post,$scope.BlogPosts,null,$scope.data.youtube))},$scope.addTag=function(){$scope.tags.$add({name:$scope.data.newTag}).then(function(ref){$scope.postId=ref.key,console.log("what is post id? ",ref.key),$scope.data.newTag=""})},$scope.resizeImg=function(img){HelperService.imgResize(img)},$scope.deleteTag=function(item){$scope.tags.$remove(item).then(function(ref){ref.key===item.$id})};var addPost=function(post,postArray,img,youtube){var slug=HelperService.slugify(post.title),postDate=(new Date).getTime(),year=moment(postDate).format("YYYY"),month=moment(postDate).format("MMMM"),newTags={};for(var prop in $scope.checkedTags)newTags[prop]=$scope.checkedTags[prop];var thisPost={postTitle:post.title,slug:slug,postBody:post.postBody,youtube:youtube?youtube:null,img:img?img:null,tags:newTags,timestamp:postDate};console.log("thisPost: ",thisPost),postArray.$add(thisPost).then(function(ref){var key=ref.key,archivePost={key:key};firebase.database().ref("archives/"+year+"/"+month+"/"+key).set(archivePost),$state.go("blog.main")})}}]).controller("EditBlogCtrl",["$scope","$state","$timeout","$stateParams","SendDataService","AllTags","thisPost","HelperService","SubmitImage","$uibModal","$log","BlogPosts",function($scope,$state,$timeout,$stateParams,SendDataService,AllTags,thisPost,HelperService,SubmitImage,$uibModal,$log,BlogPosts){var main=document.getElementById("main");if(main.style.backgroundColor="rgba(0,0,0,0)",$scope.$emit("loadMainContainer","loaded"),$scope.data={},$scope.postArray=thisPost,$scope.post=thisPost[0],$scope.originalTags=angular.copy($scope.post.tags),$scope.tags=AllTags,$scope.post.youtube){console.log($scope.post.youtube);var youtubeId=$scope.post.youtube;$scope.data.youtube="https://www.youtube.com/watch?v="+youtubeId}$scope.confirmBlogDelete=function(post){var modalInstance=$uibModal.open({animation:!0,backdrop:!0,templateUrl:"/views/blog/deleteBlogConfirmModal.html",controller:"DeleteBlogConfirmCtrl",size:"sm",resolve:{Post:post}});modalInstance.result.then(function(){console.log("submitted modal")},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.addTag=function(){$scope.tags.$add({name:$scope.data.newTag}).then(function(ref){$scope.postId=ref.key,console.log("what is post id? ",ref.key),$scope.data.newTag=""})},$scope.deleteTag=function(item){$scope.tags.$remove(item).then(function(ref){ref.key===item.$id})},$scope.resetMedia=function(){$scope.data.youtube="",$scope.data.image=""},$scope.submit=function(){"image"===$scope.data.mediaSelect&&$scope.data.image?SubmitImage($scope.post,$scope.postArray,$scope.data.image,updatePost):"image"!==$scope.data.mediaSelect||$scope.data.image?"youtube"===$scope.data.mediaSelect&&($scope.data.youtube=HelperService.parseYouTube($scope.data.youtube),updatePost($scope.post,$scope.BlogPosts,null,$scope.data.youtube)):updatePost($scope.post,$scope.BlogPosts,$scope.post.img,null)};var updatePost=function(post,postArray,img,youtube){var slug=HelperService.slugify(post.postTitle);console.log(slug);var year=moment(post.timestamp).format("YYYY"),month=moment(post.timestamp).format("MMMM"),newTags={};for(var prop in post.tags)newTags[prop]=post.tags[prop];post.slug=slug,post.tags=newTags,post.youtube=youtube?youtube:null,post.img=img?img:null;var thisPost={postTitle:post.postTitle,slug:slug,postBody:post.postBody,youtube:post.youtube,img:post.img,tags:newTags,timestamp:post.timestamp};$scope.postArray.$save(post).then(function(ref){var key=ref.key;firebase.database().ref("archives/"+year+"/"+month+"/"+key).remove(),firebase.database().ref("archives/"+year+"/"+month+"/"+key).set(thisPost);for(prop in $scope.originalTags)if($scope.originalTags[prop]===!0){var url="tags/"+prop+"/posts/"+key;firebase.database().ref(url).remove().then(function(message){}).catch(function(error){console.log("Remove failed: "+error.message)})}else console.log(prop+" not a tag for old edit!");$timeout(function(){for(prop in thisPost.tags)thisPost.tags[prop]===!0?firebase.database().ref("tags/"+prop+"/posts/"+key).set(thisPost):console.log(prop+" not a tag for new edit!")},100),$state.go("blog.main")})}}]).controller("EditBlogTagsCtrl",["$scope","$uibModalInstance","tag","Blog",function($scope,$uibModalInstance,tag,Blog){$scope.prompted=!1,$scope.tag=angular.copy(tag),console.log(tag),$scope.ok=function(tag){var newName={name:$scope.tag.name};firebase.database().ref("/tags/"+$scope.tag.$id).update(newName),$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.deletePrompt=function(){$scope.prompted=!0},$scope.delete=function(response){if("no"===response)$scope.prompted=!1;else if("yes"===response){firebase.database().ref("/tags/"+$scope.tag.$id).remove();for(var i=0;i<Blog.length;i++){var thisPostTags=Blog[i].tags;thisPostTags[$scope.tag.$id]===!0&&(thisPostTags[$scope.tag.$id]=null,firebase.database().ref("/blog_posts/"+Blog[i].$id+"/tags").update(thisPostTags))}$uibModalInstance.close()}}}]).controller("DeleteBlogConfirmCtrl",["$scope","$uibModalInstance","Post","moment","$location",function($scope,$uibModalInstance,Post,moment,$location){console.log(Post),$scope.yes=function(){var year=moment(Post.timestamp).format("YYYY"),month=moment(Post.timestamp).format("MMMM");console.log(month+" of "+year),firebase.database().ref("blog_posts/"+Post.$id).remove(),firebase.database().ref("archives/"+year+"/"+month+"/"+Post.$id).remove(),$uibModalInstance.close(),$location.url("/blog")},$scope.no=function(){$uibModalInstance.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("BlogMasterCtrl",["$scope","$state","$http","$timeout","$location","$stateParams","Auth","Blog","HelperService","InstagramFactory","AllTagsService","TwitterFactory",function($scope,$state,$http,$timeout,$location,$stateParams,Auth,Blog,HelperService,InstagramFactory,AllTagsService,TwitterFactory){$scope.loadedInsta=!1,$scope.loadedTwitter=!1,$scope.$emit("loadMainContainer","loaded"),InstagramFactory.then(function(data){$scope.photos=data.data,console.log("what are photos? ",$scope.photos),$scope.loadedInsta=!0,$scope.loadedTwitter&&($scope.loaded=!0)}),TwitterFactory.then(function(data){$scope.tweetDate=data.allTweetData.created_at,$scope.twitterUser=data.allTweetData.user.name,$scope.twitterHandle=data.allTweetData.user.screen_name,$scope.tweetId=data.allTweetData.id_str,$scope.tweet=data.tweetBody,$scope.favorites=data.favorites,$scope.retweets=data.retweets,$scope.loadedTwitter=!0,$scope.loadedInsta&&($scope.loaded=!0)}),$scope.enable=!0,$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser})}]).controller("BlogCtrl",["$scope","$state","$http","$timeout","$location","$stateParams","Auth","Blog","HelperService","InstagramFactory","AllTagsService",function($scope,$state,$http,$timeout,$location,$stateParams,Auth,Blog,HelperService,InstagramFactory,AllTagsService){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="0",$scope.$emit("loadMainContainer","loaded"),$scope.allTags=AllTagsService(),$scope.location=$location.$$path,InstagramFactory.then(function(data){$scope.photos=data.data,$scope.loaded=!0}),$scope.enable=!0,$scope.parseTitle=HelperService.titleToURL,$scope.allPosts=Blog,$scope.page=$stateParams.page||0,$scope.pageUp="/blog/"+(parseInt($scope.page)+1),$scope.pageDown="/blog/"+HelperService.pageDown($scope.page),$scope.length=Blog.length,$scope.first=HelperService.findFirst($scope.length,$scope.page),$scope.last=$scope.length-4*$scope.page,$scope.posts=Blog.slice($scope.first,$scope.last),$scope.editPost=function(slug){$location.url("/blog/edit/"+slug)}}]).controller("BlogArchiveCtrl",["$scope","$state","$timeout","$stateParams","$location","Blog","Archive","Auth","HelperService","AllTagsService",function($scope,$state,$timeout,$stateParams,$location,Blog,Archive,Auth,HelperService,AllTagsService){$scope.$emit("loadMainContainer","notLoaded"),$scope.location=$location.$$path,$scope.allTags=AllTagsService(),$scope.enable=!0,$scope.fullBlog=Blog;for(var result=[],i=0;i<Archive.length;i++)for(var key=Archive[i].$id,j=0;j<Blog.length;j++){var blogKey=Blog[j].$id;key===blogKey&&result.push(Blog[j])}$scope.allPosts=result,$scope.params=$stateParams,$scope.parseTitle=HelperService.titleToURL,$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.page=$stateParams.page||0,$scope.pageUp="/blog/archives/"+$stateParams.year+"/"+$stateParams.month+"/"+(parseInt($scope.page)+1),$scope.pageDown="/blog/archives/"+$stateParams.year+"/"+$stateParams.month+"/"+HelperService.pageDown($scope.page),$scope.length=$scope.allPosts.length,$scope.first=HelperService.findFirst($scope.length,$scope.page),$scope.last=$scope.length-4*$scope.page,$scope.posts=$scope.allPosts.slice($scope.first,$scope.last),$timeout(function(){$scope.$emit("loadMainContainer","loaded"),$scope.loaded=!0}),$scope.editPost=function(post){var titleParsed=HelperService.titleToURL(post.postTitle);$location.url("/blog/edit/"+titleParsed)}}]).controller("BlogTagsCtrl",["$scope","$state","$stateParams","$location","$timeout","Blog","TagsShow","Auth","HelperService","AllTagsService",function($scope,$state,$stateParams,$location,$timeout,Blog,TagsShow,Auth,HelperService,AllTagsService){$scope.$emit("loadMainContainer","notLoaded"),$scope.location=$location.$$path,$scope.allTags=AllTagsService(),$scope.enable=!0,$scope.tagName=TagsShow[0].name;for(var thisTag=TagsShow[0].$id,selectPosts=[],i=0;i<Blog.length;i++){var thisPostTags=Blog[i].tags;thisPostTags[thisTag]&&selectPosts.push(Blog[i])}$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.page=$stateParams.page||0,$scope.pageUp="/blog/tags/"+$stateParams.tagName+"/"+(parseInt($scope.page)+1),$scope.pageDown="/blog/tags/"+$stateParams.tagName+"/"+HelperService.pageDown($scope.page),$scope.length=length,$scope.first=HelperService.findFirst($scope.length,$scope.page),$scope.last=$scope.length-4*$scope.page,$scope.posts=selectPosts.slice($scope.first,$scope.last),$timeout(function(){$scope.$emit("loadMainContainer","loaded"),$scope.loaded=!0}),$scope.editPost=function(post){var titleParsed=HelperService.titleToURL(post.postTitle);$location.url("/blog/edit/"+titleParsed)}}]).controller("BlogShowCtrl",["$scope","$state","$stateParams","$location","$timeout","thisPost","Blog","AllTagsService",function($scope,$state,$stateParams,$location,$timeout,thisPost,Blog,AllTagsService){$scope.$emit("loadMainContainer","notLoaded"),$scope.location=$location.$$path,$scope.allTags=AllTagsService(),$scope.enable=!1,$scope.recentPosts=Blog,$scope.posts=thisPost,$scope.allPosts=thisPost,$timeout(function(){$scope.$emit("loadMainContainer","loaded"),$scope.loaded=!0})}]).controller("BlogSidebarCtrl",["$scope","$state","$stateParams","$timeout","ArchiveService","AllTagsService","BlogPosts","HelperService","$uibModal","$log",function($scope,$state,$stateParams,$timeout,ArchiveService,AllTagsService,BlogPosts,HelperService,$uibModal,$log){$scope.recentPosts=BlogPosts(),$scope.parseTitle=HelperService.titleToURL,$scope.years=ArchiveService.years(),$scope.years.$loaded().then(function(){console.log($scope.years),$scope.monthObj={};for(var i=0;i<$scope.years.length;i++)$scope.monthObj[$scope.years[i].$id]=ArchiveService.months($scope.years[i].$id);$timeout(function(){console.log($scope.monthObj)},7e3)}),$scope.allTags=AllTagsService(),$scope.newBlogPost=function(){$state.go("blog-new")},$scope.editTag=function(tag){var modalInstance=$uibModal.open({animation:!0,backdrop:!0,templateUrl:"/views/blog/editTagsModal.html",controller:"EditBlogTagsCtrl",size:"lg",resolve:{Blog:["BlogPosts",function(BlogPosts){return BlogPosts().$loaded()}],tag:tag}});modalInstance.result.then(function(){},function(){$log.info("Modal dismissed at: "+new Date)})}}]),angular.module("SistersCtrls").controller("editModalCtrl",["$scope","$uibModalInstance","editShow","index","$firebaseArray",function($scope,$uibModalInstance,editShow,index,$firebaseArray){$scope.shows=editShow,$scope.show=editShow[index],console.log("index is ",index),$scope.dateObj=new Date(1e3*$scope.show.unix),console.log($scope.dateObj),$scope.ok=function(){$scope.show.date=moment($scope.dateObj).format("ddd, MMMM Do YYYY"),$scope.show.unix=$scope.dateObj.getTime()/1e3,$scope.shows.$save($scope.show).then(function(ref){console.log("success")},function(error){console.log("Error:",error)}),$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.delete=function(){$scope.shows.$remove($scope.show).then(function(ref){console.log("successful delete: ",ref)},function(error){console.log("error: ",error)}),$uibModalInstance.close()}}]).controller("newModalCtrl",["$scope","$uibModalInstance","$firebaseArray",function($scope,$uibModalInstance,$firebaseArray){$scope.show={};var showsRef=firebase.database().ref("shows");$scope.showsArray=$firebaseArray(showsRef),$scope.ok=function(){var thisDate=moment($scope.show.showDate).format("ddd, MMMM Do YYYY"),thisUnix=$scope.show.showDate.getTime()/1e3;console.log(thisDate);var object={date:thisDate,unix:thisUnix,location:$scope.show.showLocation,venue:$scope.show.venue,venueLink:$scope.show.venueLink||"",ticketLink:$scope.show.ticketLink||""};console.log(object),$scope.showsArray.$add(object),$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("NavCtrl",["$scope","$timeout","$log","$uibModal","$http","Auth","$state","$sessionStorage","$location","$window",function($scope,$timeout,$log,$uibModal,$http,Auth,$state,$sessionStorage,$location,$window){$scope.fade=!0,$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.user={},$scope.mailConfirm=!1;var w=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,h=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;$scope.height=h;var mobileBG=document.getElementById("mobile-background-div");w<900?mobileBG.style.height=h+"px":mobileBG.style.height="0px",!$scope.loaded&&w>806?$scope.mobileWidth=!1:$scope.mobileWidth=!0,$timeout(function(){if(null===$scope.firebaseUser&&"/login"!==$location.$$path){if(!document.getElementById("overlayMail")){var div=document.createElement("div");div.id="overlayMail",div.className="overlay-start";var body=document.body,popUp=document.querySelector("#pop-up");div.style.height=body.scrollHeight+"px",popUp.appendChild(div);var overlay=document.querySelector("#overlayMail");overlay.classList.add("active")}$scope.isPopup=!0}},6e3),$scope.closePopup=function(){$scope.isPopup=!1},$scope.toStore=function(){$scope.isPopup=!1,$timeout(function(){$window.open("https://iheartsisters.bandcamp.com/")},300)},$scope.toggle=!0;window.innerWidth}]).controller("FooterCtrl",["$scope","$timeout","$log","$uibModal","$http","Auth","$state","$sessionStorage",function($scope,$timeout,$log,$uibModal,$http,Auth,$state,$sessionStorage){$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.logout=function(){Auth.$signOut()},$scope.login=function(){$state.go("login")};window.innerWidth}]).controller("MailModalCtrl",["$scope","$timeout","$uibModal","$uibModalInstance","$http","Auth","$state","$sessionStorage",function($scope,$timeout,$uibModal,$uibModalInstance,$http,Auth,$state,$sessionStorage){$scope.close=function(){$uibModalInstance.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("ShowsCtrl",["$scope","$state","currentAuth","$log","$firebaseArray","moment","Auth","getShows","$uibModal","BandsInTown",function($scope,$state,currentAuth,$log,$firebaseArray,moment,Auth,getShows,$uibModal,BandsInTown){var main=document.getElementById("main");main.style.backgroundColor="rgba(252, 244, 247, 0)",main.style.width="",main.style.padding="",$scope.$emit("loadMainContainer","loaded"),$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),BandsInTown.then(function(data){$scope.shows=data,console.log("what are shows from bands in town? ",$scope.shows)}),$scope.open=function(whichPage,index){var modalInstance=$uibModal.open({animation:!0,backdrop:!0,templateUrl:"/views/shows/"+whichPage+"ShowModal.html",controller:whichPage+"ModalCtrl",size:"lg",resolve:{editShow:function(){return $scope.shows},index:index}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})}}]).controller("SingleShowCtrl",["$scope","$stateParams","$state","$http","$timeout","$location","$sessionStorage","GetShow","GetTicket",function($scope,$stateParams,$state,$http,$timeout,$location,$sessionStorage,GetShow,GetTicket){var main=document.getElementById("main");if(main.style.backgroundColor="rgba(252, 244, 247, 0)",main.style.width="",main.style.padding="",GetTicket.description){$scope.show=GetShow,$scope.ticket=GetTicket,$scope.showUnix=1e3*$scope.ticket.unix,$scope.images=$scope.ticket.images;var currentActiveSrc=$scope.images[0],mainImg=document.querySelector(".main-product-photo img");mainImg.src=$scope.images[0],$scope.$emit("loadMainContainer","loaded")}else $location.url("/store");$scope.isActiveImg=function(){return this.img===currentActiveSrc},$scope.changeActive=function(){currentActiveSrc=this.img,mainImg.src=this.img}}]),angular.module("SistersCtrls").controller("StoreCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","allProducts","Auth",function($scope,$state,$http,$timeout,$location,$sessionStorage,allProducts,Auth){
var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="",$scope.loaded=!1,$scope.products=allProducts,$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.showProduct=function(id){$state.go("storeShow",{id:id})},$scope.addProduct=function(){$state.go("addProduct")},$timeout(function(){$scope.loaded=!0,$scope.$emit("loadMainContainer","loaded")})}]).controller("StoreCartCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage",function($scope,$state,$http,$timeout,$location,$sessionStorage){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",$timeout(function(){$scope.$emit("loadMainContainer","loaded")},1),$scope.toCheckout=function(){$location.url("/store/checkout/address")},$scope.continue=function(){$location.url("/store")}}]).controller("StoreShowCtrl",["$scope","$stateParams","$state","$http","$timeout","$location","$sessionStorage","oneProduct",function($scope,$stateParams,$state,$http,$timeout,$location,$sessionStorage,oneProduct){var main=document.getElementById("main");if(main.style.backgroundColor="",$scope.$emit("loadMainContainer","loaded"),oneProduct.description){$scope.product=oneProduct,$scope.images=oneProduct.images;var currentActiveSrc=$scope.images[0];$scope.skus=$scope.product.skus.data,$scope.data={},$scope.data.selected=$scope.product.skus[0];var mainImg=document.querySelector(".main-product-photo img");mainImg.src=$scope.images[0]}else $location.url("/store");$scope.isActiveImg=function(){return this.img===currentActiveSrc},$scope.changeActive=function(){currentActiveSrc=this.img,mainImg.src=this.img}}]).controller("CheckoutTemplateCtrl",["$scope","$state","$http","$timeout","$location","$localStorage",function($scope,$state,$http,$timeout,$location,$localStorage){$scope.$emit("loadMainContainer","loaded"),$scope.$storage=$localStorage,$scope.$on("pathChange",function(event,data){$scope.path=data}),$scope.$on("pathCountChange",function(event,data){$scope.pathCount=data})}]).controller("StoreAddressCtrl",["$scope","$state","$window","$timeout","$http","$location","$localStorage","ngCart","$rootScope","CurrentOrderService","moment",function($scope,$state,$window,$timeout,$http,$location,$localStorage,ngCart,$rootScope,CurrentOrderService,moment){var main=document.getElementById("main");main.style.backgroundColor="rgba(247, 237, 245, 0)",$scope.$emit("loadMainContainer","loaded"),$scope.$storage=$localStorage,$scope.cartItems=ngCart.getItems(),$scope.$on("setShippable",function(event,data){$scope.shipBool=data}),$scope.$storage.billingAddress||($scope.$storage.pathCount=1),$scope.$emit("pathChange",$location.$$path),$scope.$emit("pathCountChange",$scope.$storage.pathCount),$scope.loaded=[],$scope.data={shipping:{country:{}}},$scope.$storage.billingAddress?$scope.data.billing=$scope.$storage.billingAddress:$scope.data.billing={country:{}},$scope.mailingListAdd=!0,$scope.shippingSameBool=!1,$http.get("/js/JSON/countries.json").success(function(data){$scope.countries=data,$scope.data.shipping.country=$scope.countries[0],$scope.data.billing.country=$scope.countries[0],$scope.loaded.push("go")}),$http.get("/js/JSON/states.json").success(function(data){$scope.states=data,$scope.loaded.push("go")}),$http.get("/js/JSON/provinces.json").success(function(data){$scope.provinces=data,$scope.loaded.push("go")}),$scope.isShippingSame=function(){$scope.data.shippingSame?($scope.data.billing=$scope.data.shipping,$scope.shippingSameBool=!0):($scope.data.billing={},$scope.shippingSameBool=!1)},$scope.countryChange=function(country){"US"===country.code?$scope.shippingType=$scope.shipRates.domestic:$scope.shippingType=$scope.shipRates.international},$scope.submitForm=function(form){if(form.$valid){$scope.loaded=[],setMailingList();var taxObj={amount:ngCart.getTax(),description:"tax: ("+ngCart.getTaxRate()+"%)"},ship=$scope.data.shipping,bill=$scope.data.billing;$scope.$storage.billingAddress=$scope.data.billing,$scope.$storage.shippingAddress=$scope.data.shipping;var d=new Date,req={url:"/store/newOrder",method:"POST",params:{order:{status:"pending",dateCreated:d.getTime(),currency:"usd",items:$scope.cartItems,totalItemsPrice:ngCart.getSubTotal(),tax:taxObj,billing:{name:bill.name,email:bill.email,phone:bill.phone,address:{line1:bill.address1,line2:bill.address2||null,city:bill.city,state:bill.stateProvince.short||null,country:bill.country.code,postal_code:bill.postalCode}},metadata:{taxRate:ngCart.getTaxRate()}}}};$scope.shipBool?(req.params.shippable=!0,req.params.shipping={name:ship.name,address:{line1:ship.address1,line2:ship.address2||null,city:ship.city,state:ship.stateProvince.short||null,country:ship.country.code,postal_code:ship.postalCode}}):req.params.shippable=!1;var orderNumber=Math.floor(1e5+1e9*Math.random());$scope.$storage.orderData=req.params.order,$scope.$storage.orderData.orderNumber=orderNumber,firebase.database().ref("orders/order_"+orderNumber).set(req.params.order),$http(req).then(function(res){$scope.$storage.shippingData=res.data,$scope.$storage.pathCount=2,$location.url("/store/checkout/payment")},function(res){console.log("error ",res)})}else console.log("form invalid!")};var setMailingList=function(){$scope.mailingListAdd===!0?$scope.$storage.mailingList=!0:$scope.$storage.mailingList=!1};$scope.getTaxRate=function(country,stateProvince,postalCode){if("US"===country.code&&"WA"===stateProvince.short&&postalCode)if($window.localStorage.currentWaRate){var parsedTax=parseFloat($window.localStorage.currentWaRate);ngCart.setTaxRate(parsedTax)}else{var req={url:"/taxRate",method:"GET",params:{country:"usa",postal:postalCode}};$http(req).then(function(res){ngCart.setTaxRate(res.data.totalRate),$window.localStorage.currentWaRate=res.data.totalRate},function(res){console.log("error ",res)})}else"US"===country.code&&"WA"!==stateProvince.short?ngCart.setTaxRate(0):"US"!==country.code&&ngCart.setTaxRate(0)}}]).controller("StorePaymentCtrl",["$scope","$state","$http","$timeout","$location","$localStorage","ngCart","$rootScope","currentOrder",function($scope,$state,$http,$timeout,$location,$localStorage,ngCart,$rootScope,currentOrder){var main=document.getElementById("main");main.style.backgroundColor="rgba(247, 237, 245, 0)",$scope.$emit("loadMainContainer","loaded"),$scope.$storage=$localStorage,$scope.$emit("pathChange",$location.$$path),$scope.$emit("pathCountChange",$scope.$storage.pathCount),$scope.data={},$scope.$on("setShippable",function(event,data){$scope.shipBool=data});for(var items=($scope.$storage.orderData.orderNumber,$scope.$storage.orderData.items),i=0;i<items.length;i++)"ticket"===items[i]._data.product_type&&($scope.showWillCall=!0);if($scope.$storage.shippingData.rates_list){$scope.shipOptions=$scope.$storage.shippingData.rates_list,$scope.$storage.savedSelectedShip=$scope.$storage.shippingData.rates_list[0];for(var i=0;i<$scope.shipOptions.length;i++)if($scope.shipOptions[i].object_id===$scope.$storage.savedSelectedShip.object_id){$scope.selectedShip=$scope.shipOptions[i];break}$scope.$watch("selectedShip",function(newValue,oldValue,scope){$scope.$storage.savedSelectedShip=$scope.selectedShip,ngCart.setShipping(100*$scope.selectedShip.amount)},!1)}$timeout(function(){$scope.loaded=!0}),$scope.submitForm=function(form){form.$valid?($scope.$storage.orderData.willCallName=$scope.data.willCallName,$scope.loaded=!1,Stripe.card.createToken({number:$scope.number,cvc:$scope.cvc,exp:$scope.expiry,name:$scope.$storage.billingAddress.name,address_line1:$scope.$storage.billingAddress.address1,address_line2:$scope.$storage.billingAddress.address2||null,address_city:$scope.$storage.billingAddress.city,address_state:$scope.$storage.billingAddress.stateProvince.short||null,address_zip:$scope.$storage.billingAddress.postalCode,address_country:$scope.$storage.billingAddress.country.code},function(err,token){200!=err&&console.log("we have an error: ",err),token&&$timeout(function(){$scope.$storage.tokenData=token,$scope.$storage.pathCount=3,$scope.$emit("pathCountChange",$scope.$storage.pathCount),$location.url("/store/checkout/confirm")},1)})):console.log("form invalid!!")}}]).controller("StoreConfirmCtrl",["$scope","$state","$http","$timeout","$location","$localStorage","ngCart","$rootScope","AllTickets","WillCallListService",function($scope,$state,$http,$timeout,$location,$localStorage,ngCart,$rootScope,AllTickets,WillCallListService){$scope.$on("setShippable",function(event,data){$scope.shipBool=data});var main=document.getElementById("main");main.style.backgroundColor="rgba(247, 237, 245, 0)",$scope.$emit("loadMainContainer","loaded"),$scope.$storage=$localStorage,$scope.orderComplete=!1,$scope.$emit("pathChange",$location.$$path),$scope.$emit("pathCountChange",$scope.$storage.pathCount),$scope.ngCart=ngCart;var items=$scope.$storage.orderData.items,tickets=AllTickets;$scope.currentShipping=$scope.$storage.savedSelectedShip,$scope.token=$scope.$storage.tokenData,$scope.shipping=$scope.$storage.shippingAddress,$scope.billing=$scope.$storage.billingAddress,$scope.order=$scope.$storage.orderData,$timeout(function(){$scope.loaded=!0});var updateTicketCount=function(cartItems,itemIndex){var thisQuant=cartItems[itemIndex].quantity,willCallArr=WillCallListService(cartItems[itemIndex].parent);willCallArr.$add({name:$scope.$storage.orderData.willCallName,quantity:thisQuant}).then(function(ref){var showCountRef=(ref.key,firebase.database().ref("tickets/"+cartItems[itemIndex].parent+"/totalTickets"));showCountRef.once("value").then(function(snapshot){showCountRef.set(snapshot.val()-thisQuant)})},function(err){console.log("what is err: ",err)})},orderStatusDone=function(orderNumber,resData){firebase.database().ref("orders/order_"+orderNumber+"/status").set("complete"),firebase.database().ref("orders/order_"+orderNumber+"/totalItemsPrice").set(resData.amount),firebase.database().ref("orders/order_"+orderNumber+"/stripeChargeId").set(resData.id)};$scope.createCharge=function(){$scope.loaded=!1;var req={url:"/store/orderComplete",method:"POST",params:{totalAmount:ngCart.totalCost(),tax:ngCart.getTax(),token:$scope.token.id,name:$scope.token.card.name,cart:JSON.stringify(ngCart.getItems()),order:$scope.$storage.orderData,shipChoice:$scope.currentShipping}};$http(req).then(function(res){console.log(res),$scope.isError=!1;for(var i=0;i<items.length;i++)for(var j=0;j<tickets.length;j++)tickets[j].$id===items[i].parent&&updateTicketCount(items,i);orderStatusDone($scope.$storage.orderData.orderNumber,res.data),$scope.$storage.mailingList===!0&&mailchimpSubmit($scope.$storage.billingAddress.email),$scope.orderComplete=!0,$scope.$storage.pathCount=0,$scope.$emit("pathCountChange",$scope.$storage.pathCount),ngCart.setTaxRate(null),ngCart.setShipping(null),ngCart.empty(),$localStorage.$reset(),localStorage.clear()},function(res){$scope.errorMessage=res.data.message,$scope.isError=!0,$scope.loaded=!0,console.log("error ",res)})};var mailchimpSubmit=function(email){var url="//sisterstheband.us14.list-manage.com/subscribe/post-json?u=bc38720b0bcc7a32641bb572c&amp;id=242f4adc89&EMAIL="+email+"&c=JSON_CALLBACK";$http.jsonp(url).then(function(res){},function(res){console.log(res)})}}]),angular.module("SistersCtrls").controller("AdminMainCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth",function($scope,$state,$http,$timeout,$location,$sessionStorage,Auth){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="0",$scope.$emit("loadMainContainer","loaded"),$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser})}]).controller("AdminOrdersCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","Orders","ReturnCompleteOrders","ReturnPendingOrders",function($scope,$state,$http,$timeout,$location,$sessionStorage,Auth,Orders,ReturnCompleteOrders,ReturnPendingOrders){console.log(Orders),$scope.completeOrders=ReturnCompleteOrders(Orders),$scope.pendingOrders=ReturnPendingOrders(Orders),$scope.orders=$scope.completeOrders;var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="0",$scope.$emit("loadMainContainer","loaded"),$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser})}]).controller("AdminTicketsCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","Tickets",function($scope,$state,$http,$timeout,$location,$sessionStorage,Auth,Tickets){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="0",$scope.tickets=Tickets,$scope.$emit("loadMainContainer","loaded"),$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser})}]).controller("AdminTicketsEachCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","ThisTicket","WillCall","WillCallToBlob","FileSaver","moment",function($scope,$state,$http,$timeout,$location,$sessionStorage,Auth,ThisTicket,WillCall,WillCallToBlob,FileSaver,moment){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="0",$scope.ticket=ThisTicket,$scope.ticketsSold=$scope.ticket.ticketCapacity-$scope.ticket.totalTickets,$scope.chartColors=["#adadad","#f891af"],$scope.labels=["Remaining Tickets","Tickets Sold"],$scope.data=[$scope.ticket.totalTickets,$scope.ticketsSold],$scope.$emit("loadMainContainer","loaded"),$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$scope.downloadList=function(){console.log("entering!");var formatDate=moment(1e3*$scope.ticket.unix).format("MM/DD/YYYY"),textTitle=$scope.ticket.title+" ("+formatDate+")",blob=WillCallToBlob(WillCall,textTitle);FileSaver.saveAs(blob,moment(1e3*$scope.ticket.unix).format("MM-DD-YYYY")+".txt")}}]).controller("StoreProductAddCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth",function($scope,$state,$http,$timeout,$location,$sessionStorage,Auth){var main=document.getElementById("main");main.style.backgroundColor="rgba(255,255,255,0)",main.style.width="",main.style.padding="",$scope.loaded=!1,$scope.auth=Auth,$scope.auth.$onAuthStateChanged(function(firebaseUser){$scope.firebaseUser=firebaseUser}),$timeout(function(){$scope.loaded=!0,$scope.$emit("loadMainContainer","loaded")})}]),angular.module("SistersDirectives",[]).directive("fileread",[function(){return{scope:{fileread:"="},link:function(scope,element,attributes){element.bind("change",function(changeEvent){var reader=new FileReader;reader.onload=function(loadEvent){scope.$apply(function(){scope.fileread=loadEvent.target.result})},reader.readAsDataURL(changeEvent.target.files[0])})}}}]).directive("countryName",["$http",function($http){return{template:"<span>{{name}}</span>",scope:{countryCode:"="},link:function(scope){$http.get("/js/JSON/countries.json").then(function(data){for(var countries=data.data,i=0;i<countries.length;i++)if(countries[i].code===scope.countryCode){scope.name=countries[i].name;break}},function(err){scope.name="unknown"})}}}]),angular.module("SistersServices",["ngResource"]).factory("LoadedService",function(){function set(data){loaded=data}function get(){return loaded}var loaded=!1;return{set:set,get:get}}).factory("Auth",["$firebaseAuth",function($firebaseAuth){return $firebaseAuth()}]).factory("SendDataService",function(){function set(data){savedData=data}function get(){return savedData}var savedData={};return{set:set,get:get}}).factory("HelperService",["moment","$q",function(moment,$q){return{parseYouTube:function(url){var videoid=url.match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/);return null!=videoid?videoid[1]:void console.log("The youtube url is not valid.")},base64MimeType:function(encoded){var result=null;if("string"!=typeof encoded)return result;var mime=encoded.match(/data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+).*,.*/);return mime&&mime.length&&(result=mime[1]),console.log("image type is ",result),result},getBase64Image:function(dataURL){var base64=dataURL.replace(/^data:image\/(png|jpeg);base64,/,"");return base64},b64toBlob:function(b64Data,contentType,sliceSize){contentType=contentType||"",sliceSize=sliceSize||512;for(var byteCharacters=atob(b64Data),byteArrays=[],offset=0;offset<byteCharacters.length;offset+=sliceSize){for(var slice=byteCharacters.slice(offset,offset+sliceSize),byteNumbers=new Array(slice.length),i=0;i<slice.length;i++)byteNumbers[i]=slice.charCodeAt(i);var byteArray=new Uint8Array(byteNumbers);byteArrays.push(byteArray)}var blob=new Blob(byteArrays,{type:contentType});return blob},pageDown:function(currentPage){return currentPage<2?"":currentPage-1},findFirst:function(length,page){var calcFirst=length-4*(1+page);return calcFirst>=0?calcFirst:0},getToday:function(){var currentDay=moment().unix();return currentDay},titleToURL:function(title){return title.split(" ").join("-")},slugify:function(text){return text.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},imgResize:function(img){console.log("inside resize!!");var deferred=$q.defer(),loadIMG=new Image;return loadIMG.src=img,loadIMG.onload=function(){console.log(this.width+" "+this.height);var aspectRatio=loadIMG.width/loadIMG.height;console.log("WHAT IS RATIO??? ",aspectRatio);var canvas=document.createElement("canvas");if(aspectRatio>=1.776&&loadIMG.height>=500){console.log("loadIMG: ",loadIMG);var percentChange=(loadIMG.height-500)/loadIMG.height;canvas.height=500,canvas.width=loadIMG.width-loadIMG.width*percentChange}else if(aspectRatio<1.776&&loadIMG.width>=889){console.log("loadIMG: ",loadIMG);var percentChange=(loadIMG.width-889)/loadIMG.width;canvas.width=889,canvas.height=loadIMG.height-loadIMG.height*percentChange}else console.log("loadIMG: ",loadIMG),console.log("image is not big enough!");var ctx=canvas.getContext("2d");ctx.drawImage(loadIMG,0,0,canvas.width,canvas.height);var resizedResult=canvas.toDataURL("image/jpeg");deferred.resolve(resizedResult)},deferred.promise}}}]).factory("SubmitImage",["HelperService",function(HelperService){return function(post,postArray,image,callback){HelperService.imgResize(image).then(function(newImage){var mime=HelperService.base64MimeType(newImage);console.log("TYPE IS ",mime);var base64result=HelperService.getBase64Image(newImage),file=HelperService.b64toBlob(base64result,mime),metadata={contentType:mime},photoId=(1e32*Math.random()).toString(36),storageRef=firebase.storage().ref(),uploadTask=storageRef.child("blog-images/"+photoId).put(file,metadata);uploadTask.on(firebase.storage.TaskEvent.STATE_CHANGED,function(snapshot){var progress=snapshot.bytesTransferred/snapshot.totalBytes*100;switch(console.log("Upload is "+progress+"% done"),snapshot.state){case firebase.storage.TaskState.PAUSED:console.log("Upload is paused");break;case firebase.storage.TaskState.RUNNING:console.log("Upload is running")}},function(error){switch(error.code){case"storage/unauthorized":break;case"storage/canceled":break;case"storage/unknown":}},function(){console.log("upload finished");var downloadURL=uploadTask.snapshot.downloadURL;callback(post,postArray,downloadURL,null)})})}}]),angular.module("SistersServices").factory("ProductsService",["$firebaseArray","$firebaseObject",function($firebaseArray,$firebaseObject){return{allProducts:function(){var allProductsRef=firebase.database().ref("products");return $firebaseArray(allProductsRef)},oneProduct:function(productId){var oneProductRef=firebase.database().ref("products/"+productId);return $firebaseObject(oneProductRef)}}}]).factory("CurrentOrderService",["$window",function($window){function set(data){$window.localStorage.setItem("orderData",angular.toJson(data))}function get(){var order=angular.fromJson($window.localStorage.getItem("orderData"));return JSON.parse(order)}return{set:set,get:get}}]),angular.module("SistersServices").service("InstagramFactory",["$http","$q",function($http,$q){var deferred=$q.defer();return $http({method:"GET",url:"/instagram",cache:!0}).success(function(data){deferred.resolve(data)}).error(function(msg){deferred.reject(msg)}),deferred.promise}]).service("TwitterFactory",["$http","$q",function($http,$q){var deferred=$q.defer();return $http({method:"GET",url:"/twitter",cache:!0}).success(function(data){deferred.resolve(data)}).error(function(msg){deferred.reject(msg)}),deferred.promise}]).factory("BlogPosts",["$firebaseArray",function($firebaseArray){return function(){var blogRef=firebase.database().ref("blog_posts").orderByChild("timestamp");return $firebaseArray(blogRef)}}]).factory("ThisPostService",["$firebaseArray",function($firebaseArray){return function(slug){var postRef=firebase.database().ref("blog_posts"),thisPostRef=postRef.orderByChild("slug").equalTo(slug);return $firebaseArray(thisPostRef)}}]).factory("AllTagsService",["$firebaseArray",function($firebaseArray){return function(){var tagRef=firebase.database().ref("tags");return $firebaseArray(tagRef)}}]).factory("TagsShowService",["$firebaseArray",function($firebaseObject){return function(tagName){var tagRef=firebase.database().ref("tags"),tagShowRef=tagRef.orderByChild("name").equalTo(tagName);return $firebaseObject(tagShowRef)}}]).factory("ArchiveService",["$firebaseArray",function($firebaseArray){return{years:function(){var yearRef=firebase.database().ref("archives");return $firebaseArray(yearRef)},months:function(year){var monthRef=firebase.database().ref("archives/"+year);return $firebaseArray(monthRef)}}}]).factory("ArchiveShowService",["$firebaseArray",function($firebaseArray){return function(year,month){var archiveRef=firebase.database().ref("archives/"+year+"/"+month);return $firebaseArray(archiveRef)}}]),angular.module("SistersServices").service("BandsInTown",["$http","$q",function($http,$q){var deferred=$q.defer();return $http({method:"GET",url:"/bandsintown",cache:!0}).success(function(data){deferred.resolve(data)}).error(function(msg){deferred.reject(msg)}),deferred.promise}]).factory("GetShows",["$firebaseArray","moment",function($firebaseArray,moment){var currentDay=moment().unix(),calcDay=currentDay-86400;return function(){var showsRef=firebase.database().ref("shows").orderByChild("unix").startAt(calcDay);return $firebaseArray(showsRef)}}]).factory("GetSingleShow",["$firebaseObject",function($firebaseObject){return function(key){var showRef=firebase.database().ref("shows/"+key);return $firebaseObject(showRef)}}]).factory("GetAllTickets",["$firebaseArray",function($firebaseArray){return function(){var ticketRef=firebase.database().ref("tickets");return $firebaseArray(ticketRef)}}]).factory("GetTicket",["$firebaseObject",function($firebaseObject){return function(key){var ticketRef=firebase.database().ref("tickets/"+key);return $firebaseObject(ticketRef)}}]).factory("WillCallListService",["$firebaseArray",function($firebaseArray){return function(key){var willCallRef=firebase.database().ref("tickets/"+key+"/willCallList");return $firebaseArray(willCallRef)}}]),angular.module("SistersServices").factory("GetAllOrders",["$firebaseArray",function($firebaseArray){return function(){var ordersRef=firebase.database().ref("orders");return $firebaseArray(ordersRef)}}]).factory("GetAllTickets",["$firebaseArray","moment",function($firebaseArray,moment){var currentDay=moment().unix(),calcDay=currentDay-86400;return function(){var ticketsRef=firebase.database().ref("tickets").orderByChild("unix").startAt(calcDay);return $firebaseArray(ticketsRef)}}]).factory("GetSingleTicket",["$firebaseObject",function($firebaseObject){return function(id){var thisTicketRef=firebase.database().ref("tickets/"+id);return $firebaseObject(thisTicketRef)}}]).factory("ReturnCompleteOrders",function(){return function(array){for(var newArray=[],i=0;i<array.length;i++)"complete"===array[i].status&&newArray.push(array[i]);return newArray}}).factory("ReturnPendingOrders",function(){return function(array){for(var newArray=[],i=0;i<array.length;i++)"pending"===array[i].status&&newArray.push(array[i]);return newArray}}).factory("ThisWillCall",["$firebaseArray",function($firebaseArray){return function(key){var willCallRef=firebase.database().ref("tickets/"+key+"/willCallList");return $firebaseArray(willCallRef)}}]).factory("WillCallFormat",function(){return function(data,showTitle){var text="";text+=showTitle+"\n \n";for(var i=0;i<data.length;i++)text+=data[i].name,text+=data[i].quantity>1?" +"+(data[i].quantity-1)+"\n":"\n";return text}}).factory("WillCallToBlob",["Blob","WillCallFormat",function(Blob,WillCallFormat){return function(data,showTitle){var text=WillCallFormat(data,showTitle);console.log(text);var myBlob=new Blob([text],{type:"text/plain;charset=utf-8"});return myBlob}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
