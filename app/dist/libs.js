!function(t,e){"use strict";"function"==typeof define&&define.amd?define(["moment"],e):"object"==typeof module&&module.exports?module.exports=e(require("moment")):e(t.moment)}(this,function(t){"use strict";function e(t){return t>96?t-87:t>64?t-29:t-48}function n(t){var n,r=0,i=t.split("."),a=i[0],o=i[1]||"",s=1,l=0,u=1;for(45===t.charCodeAt(0)&&(r=1,u=-1),r;r<a.length;r++)n=e(a.charCodeAt(r)),l=60*l+n;for(r=0;r<o.length;r++)s/=60,n=e(o.charCodeAt(r)),l+=n*s;return l*u}function r(t){for(var e=0;e<t.length;e++)t[e]=n(t[e])}function i(t,e){for(var n=0;n<e;n++)t[n]=Math.round((t[n-1]||0)+6e4*t[n]);t[e-1]=1/0}function a(t,e){var n,r=[];for(n=0;n<e.length;n++)r[n]=t[e[n]];return r}function o(t){var e=t.split("|"),n=e[2].split(" "),o=e[3].split(""),s=e[4].split(" ");return r(n),r(o),r(s),i(s,o.length),{name:e[0],abbrs:a(e[1].split(" "),o),offsets:a(n,o),untils:s,population:0|e[5]}}function s(t){t&&this._set(o(t))}function l(t){var e=t.toTimeString(),n=e.match(/\([a-z ]+\)/i);n&&n[0]?(n=n[0].match(/[A-Z]/g),n=n?n.join(""):void 0):(n=e.match(/[A-Z]{3,5}/g),n=n?n[0]:void 0),"GMT"===n&&(n=void 0),this.at=+t,this.abbr=n,this.offset=t.getTimezoneOffset()}function u(t){this.zone=t,this.offsetScore=0,this.abbrScore=0}function f(t,e){for(var n,r;r=6e4*((e.at-t.at)/12e4|0);)n=new l(new Date(t.at+r)),n.offset===t.offset?t=n:e=n;return t}function c(){var t,e,n,r=(new Date).getFullYear()-2,i=new l(new Date(r,0,1)),a=[i];for(n=1;n<48;n++)e=new l(new Date(r,n,1)),e.offset!==i.offset&&(t=f(i,e),a.push(t),a.push(new l(new Date(t.at+6e4)))),i=e;for(n=0;n<4;n++)a.push(new l(new Date(r+n,0,1))),a.push(new l(new Date(r+n,6,1)));return a}function p(t,e){return t.offsetScore!==e.offsetScore?t.offsetScore-e.offsetScore:t.abbrScore!==e.abbrScore?t.abbrScore-e.abbrScore:e.zone.population-t.zone.population}function h(t,e){var n,i;for(r(e),n=0;n<e.length;n++)i=e[n],D[i]=D[i]||{},D[i][t]=!0}function d(t){var e,n,r,i=t.length,a={},o=[];for(e=0;e<i;e++){r=D[t[e].offset]||{};for(n in r)r.hasOwnProperty(n)&&(a[n]=!0)}for(e in a)a.hasOwnProperty(e)&&o.push(U[e]);return o}function g(){try{var t=Intl.DateTimeFormat().resolvedOptions().timeZone;if(t){var e=U[v(t)];if(e)return e;k("Moment Timezone found "+t+" from the Intl api, but did not have that data loaded.")}}catch(t){}var n,r,i,a=c(),o=a.length,s=d(a),l=[];for(r=0;r<s.length;r++){for(n=new u(b(s[r]),o),i=0;i<o;i++)n.scoreOffsetAt(a[i]);l.push(n)}return l.sort(p),l.length>0?l[0].zone.name:void 0}function m(t){return F&&!t||(F=g()),F}function v(t){return(t||"").toLowerCase().replace(/\//g,"_")}function y(t){var e,n,r,i;for("string"==typeof t&&(t=[t]),e=0;e<t.length;e++)r=t[e].split("|"),n=r[0],i=v(n),R[i]=t[e],U[i]=n,r[5]&&h(i,r[2].split(" "))}function b(t,e){t=v(t);var n,r=R[t];return r instanceof s?r:"string"==typeof r?(r=new s(r),R[t]=r,r):P[t]&&e!==b&&(n=b(P[t],b))?(r=R[t]=new s,r._set(n),r.name=U[t],r):null}function w(){var t,e=[];for(t in U)U.hasOwnProperty(t)&&(R[t]||R[P[t]])&&U[t]&&e.push(U[t]);return e.sort()}function C(t){var e,n,r,i;for("string"==typeof t&&(t=[t]),e=0;e<t.length;e++)n=t[e].split("|"),r=v(n[0]),i=v(n[1]),P[r]=i,U[r]=n[0],P[i]=r,U[i]=n[1]}function S(t){y(t.zones),C(t.links),O.dataVersion=t.version}function $(t){return $.didShowError||($.didShowError=!0,k("moment.tz.zoneExists('"+t+"') has been deprecated in favor of !moment.tz.zone('"+t+"')")),!!b(t)}function x(t){return!(!t._a||void 0!==t._tzm)}function k(t){"undefined"!=typeof console&&"function"==typeof console.error&&console.error(t)}function O(e){var n=Array.prototype.slice.call(arguments,0,-1),r=arguments[arguments.length-1],i=b(r),a=t.utc.apply(null,n);return i&&!t.isMoment(e)&&x(a)&&a.add(i.parse(a),"minutes"),a.tz(r),a}function E(t){return function(){return this._z?this._z.abbr(this):t.call(this)}}function I(t){return function(){return this._z=null,t.apply(this,arguments)}}var F,T="0.5.11",R={},P={},U={},D={},_=t.version.split("."),j=+_[0],N=+_[1];(j<2||2===j&&N<6)&&k("Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js "+t.version+". See momentjs.com"),s.prototype={_set:function(t){this.name=t.name,this.abbrs=t.abbrs,this.untils=t.untils,this.offsets=t.offsets,this.population=t.population},_index:function(t){var e,n=+t,r=this.untils;for(e=0;e<r.length;e++)if(n<r[e])return e},parse:function(t){var e,n,r,i,a=+t,o=this.offsets,s=this.untils,l=s.length-1;for(i=0;i<l;i++)if(e=o[i],n=o[i+1],r=o[i?i-1:i],e<n&&O.moveAmbiguousForward?e=n:e>r&&O.moveInvalidForward&&(e=r),a<s[i]-6e4*e)return o[i];return o[l]},abbr:function(t){return this.abbrs[this._index(t)]},offset:function(t){return this.offsets[this._index(t)]}},u.prototype.scoreOffsetAt=function(t){this.offsetScore+=Math.abs(this.zone.offset(t.at)-t.offset),this.zone.abbr(t.at).replace(/[^A-Z]/g,"")!==t.abbr&&this.abbrScore++},O.version=T,O.dataVersion="",O._zones=R,O._links=P,O._names=U,O.add=y,O.link=C,O.load=S,O.zone=b,O.zoneExists=$,O.guess=m,O.names=w,O.Zone=s,O.unpack=o,O.unpackBase60=n,O.needsOffset=x,O.moveInvalidForward=!0,O.moveAmbiguousForward=!1;var z=t.fn;t.tz=O,t.defaultZone=null,t.updateOffset=function(e,n){var r,i=t.defaultZone;void 0===e._z&&(i&&x(e)&&!e._isUTC&&(e._d=t.utc(e._a)._d,e.utc().add(i.parse(e),"minutes")),e._z=i),e._z&&(r=e._z.offset(e),Math.abs(r)<16&&(r/=60),void 0!==e.utcOffset?e.utcOffset(-r,n):e.zone(r,n))},z.tz=function(e){return e?(this._z=b(e),this._z?t.updateOffset(this):k("Moment Timezone has no data for "+e+". See http://momentjs.com/timezone/docs/#/data-loading/."),this):this._z?this._z.name:void 0},z.zoneName=E(z.zoneName),z.zoneAbbr=E(z.zoneAbbr),z.utc=I(z.utc),t.tz.setDefault=function(e){return(j<2||2===j&&N<9)&&k("Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js "+t.version+"."),t.defaultZone=e?b(e):null,t};var A=t.momentProperties;return"[object Array]"===Object.prototype.toString.call(A)?(A.push("_z"),A.push("_a")):A&&(A._z=null),t}),angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function(t,e,n,r){t.$on("ngCart:change",function(){e.$save()}),angular.isObject(r.get("cart"))?e.$restore(r.get("cart")):e.init()}]).service("ngCart",["$rootScope","$http","$location","$state","$window","ngCartItem","store",function(t,e,n,r,i,a,o){var s;this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(n,r,i,o,l,u,f){var c=this,p=6e4,h=this.getItemBySku(r);if("object"==typeof h){var d,g=h.getQuantity();if("ticket"===h._data.product_type){d=l-g;var u={ticketId:h.parent,ticketCount:d};e.post("/store/changeSessionTicket",u).then(function(){console.log("success"),clearTimeout(s),t.$broadcast("setTimer",!0),console.log("should be restarting timer"),s=setTimeout(function(){c.removeTickets(),t.$broadcast("setTimer",!1)},p),h.setQuantity(l,!1),t.$broadcast("ngCart:itemUpdated",h)},function(e){console.log(e),t.$broadcast("lowCount",{bool:!0,originalVal:g})})}else h.setQuantity(l,!1),t.$broadcast("ngCart:itemUpdated",h)}else{var m=new a(n,r,i,o,l,u,f);if("ticket"===m._data.product_type){console.log("A ticket was added! ",m);var u={ticketId:m.parent,ticketCount:m.quantity};e.post("/store/addSessionTicket",u).then(function(){t.$broadcast("setTimer",!0),s=setTimeout(function(){c.removeTickets(),t.$broadcast("setTimer",!1)},p)},function(t){console.log(t)})}this.$cart.items.push(m),t.$broadcast("ngCart:itemAdded",m)}t.$broadcast("ngCart:change",{})},this.addItemBtn=function(e,r,i,o,s,l){var u=0,f=JSON.parse(r);for(var c in f)console.log("prop: ",f[c]),u++;if(console.log("count is : ",u),u<2){var p=this.getItemBySku(r);if("object"==typeof p)p.setQuantity(s,!1),t.$broadcast("ngCart:itemUpdated",p);else{var h=new a(e,r,i,o,s,l);this.$cart.items.push(h),t.$broadcast("ngCart:itemAdded",h)}t.$broadcast("ngCart:change",{})}else n.url("/store/"+e)},this.changeQuantity=function(e,n){var r=this.getItemBySku(e);"object"==typeof r?(r.setQuantity(n,!0),t.$broadcast("ngCart:itemUpdated",r)):console.log("nothing there"),t.$broadcast("ngCart:change",{})},this.getItemById=function(t){var e=this.getCart().items,n=!1;return angular.forEach(e,function(e){e.getId()===t&&(n=e)}),n},this.getItemBySku=function(t){var e=this.getCart().items,n=!1;return angular.forEach(e,function(e){e.getSku()===t&&(n=e)}),n},this.setShipping=function(e){return this.$cart.shipping=e,t.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(e){return this.$cart.taxRate=+parseFloat(e).toFixed(2),t.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(t){return this.$cart=t,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var t=0,e=this.getItems();return angular.forEach(e,function(e){t+=e.getQuantity()}),t},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getCartTotal=function(){var t=0;return angular.forEach(this.getCart().items,function(e){t+=e.getTotal()}),parseFloat(t)},this.getSubTotal=function(){var t=0;angular.forEach(this.getCart().items,function(e){t+=e.getTotal()});var e=this.getShipping()||0;return t+=e,parseFloat(t)},this.removeTickets=function(){var t=this;angular.forEach(this.getCart().items,function(e,n){"ticket"===e._data.product_type&&t.removeItem(n)})},this.totalCost=function(){return+parseInt(this.getCartTotal()+this.getShipping()+this.getTax())},this.removeItem=function(e){var n=this.$cart.items.splice(e,1)[0]||{};t.$broadcast("ngCart:itemRemoved",n),t.$broadcast("ngCart:change",{})},this.removeItemById=function(e){var n,r=this.getCart();angular.forEach(r.items,function(t,n){t.getId()===e&&(t=r.items.splice(n,1)[0]||{})}),this.setCart(r),t.$broadcast("ngCart:itemRemoved",n),t.$broadcast("ngCart:change",{})},this.empty=function(){t.$broadcast("ngCart:change",{}),this.$cart.items=[],i.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var t=[];return angular.forEach(this.getItems(),function(e){t.push(e.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:t}},this.$restore=function(t){var e=this;e.init(),e.$cart.shipping=t.shipping,e.$cart.taxRate=t.taxRate,e.$cart.tax=t.tax,angular.forEach(t.items,function(t){console.log("item: ",t),e.$cart.items.push(new a(t.parent,t.sku,t.description,t.amount,t.quantity,t._data,t.attr))}),this.$save()},this.$save=function(){return o.set("cart",angular.toJson(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function(t,e){var n=function(t,e,n,r,i,a,o){console.log("what is id? ",t),console.log("what is data? ",a),this.setId(t),this.setSku(e),this.setName(n),this.setPrice(r),this.setQuantity(i),this.setData(a),this.setAttr(o||a.attr)};return n.prototype.setId=function(t){t?this.parent=t:e.error("An ID must be provided")},n.prototype.setSku=function(t){t?this.sku=t:e.error("A sku must be provided")},n.prototype.getId=function(){return this.parent},n.prototype.getSku=function(){return this.sku},n.prototype.setName=function(t){t?this.description=t:e.error("A name must be provided")},n.prototype.getName=function(){return this.description},n.prototype.setPrice=function(t){var n=parseFloat(t);n?n<=0?e.error("A price must be over 0"):this.amount=n:e.error("A price must be provided")},n.prototype.getPrice=function(){return this.amount},n.prototype.setQuantity=function(t,n){var r=parseInt(t);r%1===0?(n===!0?this.quantity+=r:this.quantity=r,this.quantity<1&&(this.quantity=1)):(this.quantity=1,e.info("Quantity must be an integer and was defaulted to 1"))},n.prototype.getQuantity=function(){return this.quantity},n.prototype.setData=function(t){console.log("setting data"),t&&(this._data=t)},n.prototype.getData=function(){return this._data?this._data:void e.info("This item has no data")},n.prototype.setAttr=function(t){t&&(this.attr=t)},n.prototype.getAttr=function(){return!!this.attr&&this.attr},n.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},n.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},n}]).service("store",["$window",function(t){return{get:function(e){if(t.localStorage.getItem(e)){var n=angular.fromJson(t.localStorage.getItem(e));return JSON.parse(n)}return!1},set:function(e,n){return void 0===n?t.localStorage.removeItem(e):t.localStorage.setItem(e,angular.toJson(n)),t.localStorage.getItem(e)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function(t,e,n,r){t.loaded=!1,t.toggleCart=!1,t.ngCart=n,r(function(){t.loaded=!0});var i=n.getItems();console.log("items before filtering shippable: ",i);var a=[];angular.forEach(i,function(t){t._data.shippable===!0&&a.push(t)}),a.length>0?(console.log("should be set shippable!!!!"),t.shipBool=!0,t.$emit("setShippable",!0)):(console.log("should not be shippable!!!!"),t.shipBool=!1,t.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function(t,e,n){t.loaded=!1,t.toggleCart=!1,t.ngCart=e,n(function(){t.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function(t,e){t.ngCart=e}]).directive("ngcartAddBtn",["ngCart",function(t){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartBtn.html":e.templateUrl},link:function(e,n,r){e.attrs=r,e.inCart=function(){return t.getItemBySku(r.sku)},e.inCart()?e.q=t.getItemBySku(r.sku).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var i=1;i<=e.quantityMax;i++)e.qtyOpt.push(i)}}}]).directive("ngcartAddtocart",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocart.html":e.templateUrl},link:function(e,n,r){e.attrs=r,e.inCart=function(){return t.getItemBySku(r.sku)},e.inCart()?e.q=t.getItemBySku(r.sku).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var i=1;i<=e.quantityMax;i++)e.qtyOpt.push(i)}}}]).directive("ngcartAddtocartProduct",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",attr:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartProduct.html":e.templateUrl},link:function(e,n,r){e.attrs=r,e.inCart=function(){return t.getItemBySku(r.sku)},e.inCart()?e.q=t.getItemBySku(r.sku).getQuantity():e.q=parseInt(e.quantity),e.updateQ=function(t){console.log("count should be: ",t),e.qtyOpt=[];for(var n=1;n<=t;n++)e.qtyOpt.push(n)},e.updateQ(e.quantityMax),e.$on("changeQ",function(t,n){console.log("data in $on? ",n),console.log("updating in directive!"),e.updateQ(n.count)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/summary.html":e.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart-confirm.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart-collapse.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function(t,e,n,r){e.ngCart=n,e.checkout=function(){r.setService(e.service),r.setSettings(e.settings),r.checkout().success(function(e,n,r,i){t.$broadcast("ngCart:checkout_succeeded",e)}).error(function(e,n,r,i){t.$broadcast("ngCart:checkout_failed",{statusCode:n,error:e})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"template/ngCart/checkout.html":e.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function(t){this._obj={service:void 0,settings:void 0},this.setService=function(t){this._obj.service=t},this.setSettings=function(t){this._obj.settings=t},this.checkout=function(){var e=t.get("ngCart.fulfilment."+this._obj.service);return e.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function(t,e,n){this.checkout=function(){var r=t.defer();return e.info(n.toObject()),r.resolve({cart:n.toObject()}),r.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function(t,e){this.checkout=function(n){return t.post(n.url,{data:e.toObject(),options:n.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function(t,e){}]),angular.module("angular-parallax",[]).directive("parallax",["$window",function(t){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function(e,n,r){var i=function(){e.parallaxHorizontalOffset||(e.parallaxHorizontalOffset="0");var r=t.pageYOffset*(e.parallaxRatio?e.parallaxRatio:1.1);if(r<=t.innerHeight){var i=r<e.parallaxVerticalOffset?e.parallaxVerticalOffset:r,a=e.parallaxHorizontalOffset.indexOf("%")===-1?e.parallaxHorizontalOffset+"px":e.parallaxHorizontalOffset;n.css("transform","translate("+a+", "+i+"px)")}};i(),angular.element(t).bind("scroll",i),angular.element(t).bind("touchmove",i)}}}]).directive("parallaxBackground",["$window",function(t){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function(e,n,r){var i=function(){var r=e.parallaxVerticalOffset/100*n[0].offsetHeight,i=(n.prop("offsetTop")-t.pageYOffset)*(e.parallaxRatio?e.parallaxRatio:1.1)-(r||0);i>=e.parallaxStartPoint&&(i=e.parallaxStartPoint),n.css("background-position","50% "+i+"px")};angular.element(t).bind("load",function(t){i(),e.$apply()}),angular.element(t).bind("scroll",i),angular.element(t).bind("touchmove",i)}}}]),function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var i=n[r]={exports:{},id:r,loaded:!1};return t[r].call(i.exports,i,i.exports,e),i.loaded=!0,i.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){"use strict";t.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",n(1)]).factory("FileSaverUtils",[n(2)]).factory("Blob",["$window",n(3)]).factory("SaveAs",[n(5)])},function(t,e){"use strict";t.exports=function(t,e,n){function r(t,r,i){try{e(t,r,i)}catch(t){n.handleErrors(t.message)}}return{saveAs:function(t,e,i){return n.isBlobInstance(t)||n.handleErrors("Data argument should be a blob instance"),n.isString(e)||n.handleErrors("Filename argument should be a string"),r(t,e,i)}}}},function(t,e){"use strict";t.exports=function(){return{handleErrors:function(t){throw new Error(t)},isString:function(t){return"string"==typeof t||t instanceof String},isUndefined:function(t){return"undefined"==typeof t},isBlobInstance:function(t){return t instanceof Blob}}}},function(t,e,n){"use strict";n(4),t.exports=function(t){return t.Blob}},function(t,e){!function(t){"use strict";if(t.URL=t.URL||t.webkitURL,t.Blob&&t.URL)try{return void new Blob}catch(t){}var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},n=function(){this.data=[]},r=function(t,e,n){this.data=t,this.size=t.length,this.type=e,this.encoding=n},i=n.prototype,a=r.prototype,o=t.FileReaderSync,s=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=l.length,f=t.URL||t.webkitURL||t,c=f.createObjectURL,p=f.revokeObjectURL,h=f,d=t.btoa,g=t.atob,m=t.ArrayBuffer,v=t.Uint8Array,y=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(r.fake=a.fake=!0;u--;)s.prototype[l[u]]=u+1;return f.createObjectURL||(h=t.URL=function(t){var e,n=document.createElementNS("http://www.w3.org/1999/xhtml","a");return n.href=t,"origin"in n||("data:"===n.protocol.toLowerCase()?n.origin=null:(e=t.match(y),n.origin=e&&e[1])),n}),h.createObjectURL=function(t){var e,n=t.type;return null===n&&(n="application/octet-stream"),t instanceof r?(e="data:"+n,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):d?e+";base64,"+d(t.data):e+","+encodeURIComponent(t.data)):c?c.call(f,t):void 0},h.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&p&&p.call(f,t)},i.append=function(t){var n=this.data;if(v&&(t instanceof m||t instanceof v)){for(var i="",a=new v(t),l=0,u=a.length;l<u;l++)i+=String.fromCharCode(a[l]);n.push(i)}else if("Blob"===e(t)||"File"===e(t)){if(!o)throw new s("NOT_READABLE_ERR");var f=new o;n.push(f.readAsBinaryString(t))}else t instanceof r?"base64"===t.encoding&&g?n.push(g(t.data)):"URI"===t.encoding?n.push(decodeURIComponent(t.data)):"raw"===t.encoding&&n.push(t.data):("string"!=typeof t&&(t+=""),n.push(unescape(encodeURIComponent(t))))},i.getBlob=function(t){return arguments.length||(t=null),new r(this.data.join(""),t,"raw")},i.toString=function(){return"[object BlobBuilder]"},a.slice=function(t,e,n){var i=arguments.length;return i<3&&(n=null),new r(this.data.slice(t,i>1?e:this.data.length),n,this.encoding)},a.toString=function(){return"[object Blob]"},a.close=function(){this.size=0,delete this.data},n}(t);t.Blob=function(t,n){var r=n?n.type||"":"",i=new e;if(t)for(var a=0,o=t.length;a<o;a++)Uint8Array&&t[a]instanceof Uint8Array?i.append(t[a].buffer):i.append(t[a]);var s=i.getBlob(r);return!s.slice&&s.webkitSlice&&(s.slice=s.webkitSlice),s};var n=Object.getPrototypeOf||function(t){return t.__proto__};t.Blob.prototype=n(new t.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(t,e,n){"use strict";t.exports=function(){return n(6).saveAs||function(){}}},function(t,e,n){var r,i,a=a||function(t){"use strict";if(!("undefined"==typeof t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,n=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),i="download"in r,a=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},o=/constructor/i.test(t.HTMLElement),s=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",f=4e4,c=function(t){var e=function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()};setTimeout(e,f)},p=function(t,e,n){e=[].concat(e);for(var r=e.length;r--;){var i=t["on"+e[r]];if("function"==typeof i)try{i.call(t,n||t)}catch(t){l(t)}}},h=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},d=function(e,l,f){f||(e=h(e));var d,g=this,m=e.type,v=m===u,y=function(){p(g,"writestart progress write writeend".split(" "))},b=function(){if((s||v&&o)&&t.FileReader){var r=new FileReader;return r.onloadend=function(){var e=s?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;"),n=t.open(e,"_blank");n||(t.location.href=e),e=void 0,g.readyState=g.DONE,y()},r.readAsDataURL(e),void(g.readyState=g.INIT)}if(d||(d=n().createObjectURL(e)),v)t.location.href=d;else{var i=t.open(d,"_blank");i||(t.location.href=d)}g.readyState=g.DONE,y(),c(d)};return g.readyState=g.INIT,i?(d=n().createObjectURL(e),void setTimeout(function(){r.href=d,r.download=l,a(r),y(),c(d),g.readyState=g.DONE})):void b()},g=d.prototype,m=function(t,e,n){return new d(t,e||t.name||"download",n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return e=e||t.name||"download",n||(t=h(t)),navigator.msSaveOrOpenBlob(t,e)}:(g.abort=function(){},g.readyState=g.INIT=0,g.WRITING=1,g.DONE=2,g.error=g.onwritestart=g.onprogress=g.onwrite=g.onabort=g.onerror=g.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=a:null!==n(7)&&null!==n(8)&&(r=[],i=function(){return a}.apply(e,r),!(void 0!==i&&(t.exports=i)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})}])});var uiroutermetatags;!function(t){function e(t,e,n,r){function i(t,e,n,i,a){r.prerenderReady=!1}function a(e,r){r.metaTags||t.debug('MetaTags - route: "'+r.name+'" does not contain any metatags'),n.update(r.metaTags)}function o(t,e,i,a,o,s){n.prerender.statusCode=500,r.prerenderReady=!0}function s(t,e,i){n.prerender.statusCode=404,r.prerenderReady=!0}e.MetaTags=n,e.$on("$stateChangeStart",i),e.$on("$stateChangeSuccess",a),e.$on("$stateChangeError",o),e.$on("$stateNotFound",s)}e.$inject=["$log","$rootScope","MetaTags","$window"];var n=angular.module("ui.router.metatags",["ui.router"]),r=function(){function t(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return t.prototype.setTitlePrefix=function(t){return this.prefix=t,this},t.prototype.setTitleSuffix=function(t){return this.suffix=t,this},t.prototype.setDefaultTitle=function(t){return this.defaultTitle=t,this},t.prototype.setDefaultDescription=function(t){return this.defaultDescription=t,this},t.prototype.setDefaultKeywords=function(t){return this.defaultKeywords=t,this},t.prototype.setDefaultRobots=function(t){return this.defaultRobots=t,this},t.prototype.setStaticProperties=function(t){return this.staticProperties=t,this},t.prototype.setOGURL=function(t){return this.enableOGURL=t,this},t.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},t}();n.provider("UIRouterMetatags",r);var i=function(){function t(t,e,n,r,i,a,o){this.$log=t,this.UIRouterMetatags=e,this.$interpolate=n,this.$injector=r,this.$state=i,this.$location=a,this.$window=o,this.prerender={}}return t.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],t.prototype.update=function(t){var e=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),t?(this.title=t.title?this.UIRouterMetatags.prefix+(this.getValue("title",t.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=t.description?this.getValue("description",t.description):this.UIRouterMetatags.defaultDescription,this.keywords=t.keywords?this.getValue("keywords",t.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=t.robots?this.getValue("robots",t.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(t.properties,function(t,n){var r=e.getValue(n,t);r&&(e.properties[n]=r)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),t&&t.prerender?(this.prerender.statusCode=t.prerender.statusCode?this.getValue("prerender.statusCode",t.prerender.statusCode):200,this.prerender.header=t.prerender.header?this.getValue("rerender.header",t.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(t){this.$log.error("error occured when extracting metatags:",t)}},t.prototype.getValue=function(t,e){try{return e?"number"==typeof e?e:"string"==typeof e&&0===e.trim().length?null:angular.isFunction(e)||Array.isArray(e)?this.$injector.invoke(e,this,this.$state.$current.locals.globals):this.$interpolate(e)(this.$state.$current.locals.globals):null}catch(e){return this.$log.error("error occured when trying to get the value of tag:",t,e),null}},t}();n.service("MetaTags",i),n.run(e)}(uiroutermetatags||(uiroutermetatags={}));var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(t,e){return t-e}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function(t,e){"use strict";function n(t,e){console.log("what is templateString? ",e);var n=e.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,t.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",n),n}function r(){function t(t,e){return t>e?1:t<e?-1:0}var e=t,n=t;"object"==typeof Intl?e=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(e=function(t,e){return(t+"").localeCompare(e,void 0,{sensitivity:"case"})});var r=function(t,r){return"number"==typeof t&&"number"==typeof r?n(t,r):t instanceof Date&&r instanceof Date?n(t.getTime(),r.getTime()):e(t,r)};return r}var i=r();return{scope:!0,controller:["$scope","tableSortConfig",function(e,n){e.pagination={template:n.paginationTemplate,perPageOptions:n.perPageOptions.concat(),perPage:n.perPageDefault,currentPage:1,getPageRangeString:function(t){var n=t!==e.filtering.filteredCount?e.filtering.filteredCount:t,r=Math.max((e.pagination.currentPage-1)*e.pagination.perPage+1,1),i=Math.min(e.pagination.currentPage*e.pagination.perPage,n);return 0===e.filtering.filteredCount?"":(i===n&&1===r?"":r+"-")+i}},console.log("what is pagination: ",e.pagination),e.filtering={template:n.filterTemplate,filterString:"",filterFunction:n.filterFunction,filteredCount:0,
filterFields:[]},console.log("what is filtering: ",e.filtering),e.itemsArrayExpression="",e.itemNameSingular=n.itemNameSingular,e.itemNamePlural=n.itemNamePlural,e.noDataText=n.noDataText,e.wrappingElementClass=n.wrappingElementClass,e.sortExpression=[],e.headings=[];var r=function(e,n){return[t(e),null,!1,n?n:e]};this.setSortField=function(t,n,i,a){var o,s=r(t,i);if(s.push(a),1===e.sortExpression.length&&e.sortExpression[0][0]===s[0])e.sortExpression[0][2]?(n.removeClass("tablesort-desc"),n.addClass("tablesort-asc"),e.sortExpression[0][2]=!1):(n.removeClass("tablesort-asc"),n.addClass("tablesort-desc"),e.sortExpression[0][2]=!0),e.$emit("tablesort:sortOrder",[{name:e.sortExpression[0][3],order:e.sortExpression[0][2]}]);else{for(o=0;o<e.headings.length;o+=1)e.headings[o].removeClass("tablesort-desc").removeClass("tablesort-asc");n.addClass("tablesort-asc"),e.sortExpression=[s],e.$emit("tablesort:sortOrder",[{name:s[3],order:s[2]}])}},this.addSortField=function(t,n,i,a){var o,s=!1,l=r(t,i);for(l.push(a),o=0;o<e.sortExpression.length;o+=1)e.sortExpression[o][0]===l[0]&&(e.sortExpression[o][2]?(n.removeClass("tablesort-desc"),n.addClass("tablesort-asc"),e.sortExpression[o][2]=!1):(n.removeClass("tablesort-asc"),n.addClass("tablesort-desc"),e.sortExpression[o][2]=!0),s=!0);s||(n.addClass("tablesort-asc"),e.sortExpression.push(l)),e.$emit("tablesort:sortOrder",e.sortExpression.map(function(t){return{name:t[3],order:t[2]}}))},this.setTrackBy=function(t){e.trackBy=t},this.registerHeading=function(t){e.headings.push(t)},this.addFilterField=function(t,n){var i=r(t);e.filtering.filterFields.push(i)},this.setArrayExpr=function(t){e.itemsArrayExpression=t}}],link:function(r,a,o,s){if(o.tsItemName){var l="No "+r.itemNamePlural;r.itemNameSingular=o.tsItemName,o.tsItemNamePlural?r.itemNamePlural=o.tsItemNamePlural:r.itemNamePlural=o.tsItemName+"s",o.tsNoDataText||r.noDataText!==l||(r.noDataText="No "+r.itemNamePlural)}if(o.tsNoDataText&&(r.noDataText=o.tsNoDataText),o.tsWrappingElementClass&&(r.wrappingElementClass=o.tsWrappingElementClass),o.tsPerPageOptions&&(r.pagination.perPageOptions=r.$eval(o.tsPerPageOptions)),o.tsPerPageDefault){var u=r.$eval(o.tsPerPageDefault);isNaN(u)||(r.pagination.perPage=u,r.pagination.perPageOptions.indexOf(r.pagination.perPage)===-1&&(r.pagination.perPageOptions.push(r.pagination.perPage),r.pagination.perPageOptions.sort(function(t,e){return t-e})))}if(o.tsFilterFields)for(var f=o.tsFilterFields.split(",").filter(function(t){return t&&""!==t.trim()}),c=0;c<f.length;c+=1)s.addFilterField(f[c]);var p;if("false"!==o.tsDisplayFiltering&&""!==r.filtering.template&&r.filtering.filterFields.length>0){var h=n(r,r.filtering.template);p=e(h)(r),a.parent()[0].insertBefore(p[0],a[0])}o.tsFilterFunction&&(r.filtering.filterFunction=r.$eval(o.tsFilterFunction)),angular.isFunction(r.filtering.filterFunction)||(0===r.filtering.filterFields.length?r.filtering.filterFunction=function(t){return!0}:r.filtering.filterFunction=function(t){for(var e=!1,n=0;n<r.filtering.filterFields.length;n+=1)if(!e){var i=(r.filtering.filterFields[n][0](t)||"").toString().toLowerCase();e=i.indexOf(r.filtering.filterString.toLowerCase())>-1}return e}),r.filterLimitFun=function(t){if(!o.tsFilterFunction&&""===r.filtering.filterString)return r.filtering.filteredCount=t.length,t;var e=t.filter(r.filtering.filterFunction);return r.filtering.filteredCount=e.length,e},r.sortFun=function(t,e){var n,a,o,s,l,u;for(n=0;n<r.sortExpression.length;n+=1){if(a=r.sortExpression[n][0](t),o=r.sortExpression[n][0](e),l=e[r.sortExpression[n][1]],l&&(a=l(a),o=l(o)),void 0!==a&&null!==a||(a=""),void 0!==o&&null!==o||(o=""),s=r.sortExpression[n][2],u=(r.sortExpression[n][4]||i)(a,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}if(r.trackBy){if(a=t[r.trackBy],o=e[r.trackBy],void 0!==a&&null!==a||(a=""),void 0!==o&&null!==o||(o=""),u=i(a,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}return 0},r.pageLimitFun=function(t){if("false"===o.tsDisplayPagination||""===r.pagination.template)return t;for(var e=(r.pagination.currentPage-1)*r.pagination.perPage,n=r.pagination.currentPage*r.pagination.perPage,i=[],a=0;a<t.length;a++)a>=e&&a<n&&i.push(t[a]);return i};var d;if("false"!==o.tsDisplayPagination&&""!==r.pagination.template){var g=n(r,r.pagination.template);d=e(g)(r),a.after(d)}var m;if(r.wrappingElementClass&&""!==r.wrappingElementClass&&(m=a.wrap("<div class='"+r.wrappingElementClass+"' />")),o.tsGetTableDataFunction){var v=t(o.tsGetTableDataFunction),y=v.assign,b=function(e,n,i){var a=t(r.itemsArrayExpression)(r);return e&&(a=a.sort(r.sortFun)),n&&(a=r.filterLimitFun(a)),i&&(a=r.pageLimitFun(a)),a};y(r.$parent,b)}r.$on("$destroy",function(){p&&p.remove(),d&&d.remove(),m&&m.replaceWith(a)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(t,e,n,r){var i=function(i){t.$apply(function(){i.shiftKey?r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy):r.setSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy)})};e.bind("click",i),e.addClass("tablesort-sortable"),"tsDefault"in n&&"0"!==n.tsDefault&&(r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy),"descending"===n.tsDefault&&r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy)),"tsFilter"in n&&r.addFilterField(n.tsCriteria,e),r.registerHeading(e)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function(t,e){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(n,r,i,a){for(var o=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],s=o[0],l="ts-repeat",u=0;u<o.length;u++)if(angular.isDefined(r.attr(o[u]))){s=o[u],l=s.replace(/^(data-)?ng/,"$1ts");break}var f="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",c=r.attr(s),p=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,h=c.match(/\s+track\s+by\s+\S+?\.(\S+)/),d=c.match(p);if(h&&a.setTrackBy(h[1]),c.search(/tablesort/)!==-1?(c=c.replace(/tablesort/,f),h&&(c=c.replace(h[0],"")+h[0])):c=c.replace(p,"$1 in $2 | "+f+"$3"),angular.isUndefined(i.tsHideNoData)){var g=e.startSymbol(),m=e.endSymbol(),v=angular.element(r[0]).clone();v.removeAttr(s),v.removeAttr(l),v.addClass("showIfLast"),v.children().remove(),v.append('<td colspan="'+r[0].childElementCount+'">'+g+"noDataText"+m+"</td>"),v=t(v)(n),r.parent().prepend(v)}a.setArrayExpr(d[2]),angular.element(r[0]).attr(s,c),t(r,null,1e6)(n)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(t,e){if(t)return e(t)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(t,e){if(t){var n=t.concat();return n.sort(e)}}}),tableSortModule.filter("parseInt",function(){return function(t){return parseInt(t)||null}}),tableSortModule.filter("parseFloat",function(){return function(t){return parseFloat(t)||null}}),tableSortModule.filter("parseDate",function(){return function(t){var e=Date.parse(t);return isNaN(e)?null:e}}),angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(t,e,n){function r(t,r){var i;n.$observe(t,function(){r=r||"fa-"+t,e.removeClass(a[t]),n[t]&&(i=[r,n[t]].join("-"),e.addClass(i),a[t]=i)})}function i(t,r){var i;n.$observe(t,function(){r=r||"fa-"+t,i=t in n&&"false"!==n[t]&&n[t]!==!1,e.toggleClass(r,i)})}var a={};r("name","fa"),r("rotate"),r("flip"),r("stack"),n.$observe("size",function(){var t;e.removeClass(a.size),"large"===n.size?t="fa-lg":isNaN(parseInt(n.size,10))||(t="fa-"+n.size+"x"),e.addClass(t),a.size=t}),n.$observe("stack",function(){var t;e.removeClass(a.stack),"large"===n.stack?t="fa-stack-lg":isNaN(parseInt(n.stack,10))||(t="fa-stack-"+n.stack+"x"),e.addClass(t),a.stack=t}),i("border"),i("fw"),i("inverse"),i("spin"),e.toggleClass("fa-li",e.parent()&&"LI"===e.parent().prop("tagName")&&e.parent().parent()&&e.parent().parent().hasClass("fa-ul")&&e.parent().children()[0]===e[0]&&"false"!==n.list&&n.list!==!1),n.$observe("alt",function(){var t=n.alt,r=e.next(),i="fa-alt-text";t?(e.removeAttr("alt"),r&&r.hasClass(i)||(e.after('<span class="sr-only fa-alt-text"></span>'),r=e.next()),r.text(t)):r&&r.hasClass(i)&&r.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(t,e,n){function r(t,r){var a;n.$observe(t,function(){r=r||"fa-"+t,e.removeClass(i[t]),n[t]&&(a=[r,n[t]].join("-"),e.addClass(a),i[t]=a)})}var i={};r("size"),n.$observe("size",function(){var t;e.removeClass(i.size),"large"===n.size?t="fa-lg":isNaN(parseInt(n.size,10))||(t="fa-"+n.size+"x"),e.addClass(t),i.size=t})}}}),function(t,e,n,r){"use strict";function i(e,n){this.options=t.extend({},o,n),this._defaults=o,this._name=a,this.$element=t(e),this.init()}var a="menuButton",o={propertyName:"value"};i.prototype={constructor:i,init:function(){this.toggle()},toggle:function(t,e){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},t.fn[a]=function(e){return this.each(function(){t.data(this,"plugin_"+a)?t.data(this,"plugin_"+a).toggle():t.data(this,"plugin_"+a,new i(this,e))})},t(n).on("click",function(e){t.each(t("[data-buttons=dropdown]"),function(n,r){t(e.target.offsetParent)[0]!=t(this)[0]&&t.data(this,"plugin_"+a)&&(t.data(this,"plugin_"+a).hideMenu(),t(this).find("ul").hide())})}),t(n).on("click","[data-buttons=dropdown]",function(e){var n=t(e.currentTarget);n.menuButton()}),t(n).on("click","[data-buttons=dropdown] > a",function(t){t.preventDefault()})}(jQuery,window,document),angular.module("angularPayments",[]),angular.module("angularPayments").factory("Common",[function(){var t={};return t.parseExpiry=function(t){var e,n,r,i;return t=t||"",t=t.replace(/\s/g,""),i=t.split("/",2),e=i[0],r=i[1],2===(null!=r?r.length:void 0)&&/^\d+$/.test(r)&&(n=(new Date).getFullYear(),n=n.toString().slice(0,2),r=n+r),e=parseInt(e,10),r=parseInt(r,10),{month:e,year:r}},t}]),angular.module("angularPayments").factory("Cards",[function(){var t=/(\d{1,4})/g,e=/(?:^|\s)(\d{4})$/,n=[{type:"maestro",pattern:/^(5018|5020|5038|6304|6759|676[1-3])/,format:t,inputFormat:e,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"dinersclub",pattern:/^(36|38|30[0-5])/,format:t,inputFormat:e,length:[14],cvcLength:[3],luhn:!0},{type:"laser",pattern:/^(6706|6771|6709)/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!0},{type:"jcb",pattern:/^35/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^62/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"discover",pattern:/^(6011|65|64[4-9]|622)/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^5[1-5]/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,inputFormat:/^(\d{4}|\d{4}\s\d{6})$/,length:[15],cvcLength:[3,4],luhn:!0},{type:"visa",pattern:/^4/,format:t,inputFormat:e,length:[13,14,15,16],cvcLength:[3],luhn:!0}],r=function(t){var e,r,i;for(t=(t+"").replace(/\D/g,""),r=0,i=n.length;r<i;r++)if(e=n[r],e.pattern.test(t))return e},i=function(t){var e,r,i;for(r=0,i=n.length;r<i;r++)if(e=n[r],e.type===t)return e};return{fromNumber:function(t){return r(t)},fromType:function(t){return i(t)},defaultFormat:function(){return t},defaultInputFormat:function(){return e}}}]),angular.module("angularPayments").factory("_Format",["Cards","Common","$filter",function(t,e,n){var r={},i=function(t){var e;return null!=t.prop("selectionStart")&&t.prop("selectionStart")!==t.prop("selectionEnd")||!("undefined"==typeof document||null===document||null==(e=document.selection)||"function"!=typeof e.createRange||!e.createRange().text)},a=function(e){var n,r,i,a,o,s,l;if(i=String.fromCharCode(e.which),n=angular.element(e.currentTarget),l=n.val(),r=t.fromNumber(l+i),a=(l.replace(/\D/g,"")+i).length,s=16,r&&(s=r.length[r.length.length-1]),!(a>=s)){if(!/^\d+$/.test(i)&&!e.meta&&e.keyCode>=46)return void e.preventDefault();if(null==n.prop("selectionStart")||n.prop("selectionStart")===l.length)return o=t.defaultInputFormat(),r&&(o=r.inputFormat),o.test(l)?(e.preventDefault(),n.val(l+" "+i)):o.test(l+i)?(e.preventDefault(),n.val(l+i+" ")):void 0}},o=function(e){var n,r,a,o;n=angular.element(e.currentTarget),a=String.fromCharCode(e.which),/^\d+$/.test(a)&&(i(n)||(o=(n.val()+a).replace(/\D/g,""),r=t.fromNumber(o),r?o.length<=r.length[r.length.length-1]||e.preventDefault():o.length<=16||e.preventDefault()))},s=function(t){var e,n;if(e=angular.element(t.currentTarget),n=e.val(),!t.meta&&8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===n.length))return/\d\s$/.test(n)&&!t.meta&&t.keyCode>=46?(t.preventDefault(),e.val(n.replace(/\d\s$/,""))):/\s\d?$/.test(n)?(t.preventDefault(),e.val(n.replace(/\s\d?$/,""))):void 0},l=function(e){var n,r,i,a;return(n=t.fromNumber(e))?(i=n.length[n.length.length-1],e=e.replace(/\D/g,""),e=e.slice(0,+i+1||9e9),n.format.global?null!=(a=e.match(n.format))?a.join(" "):void 0:(r=n.format.exec(e),null!=r&&r.shift(),null!=r?r.join(" "):void 0)):e},u=function(t){return setTimeout(function(){var e,n;return e=angular.element(t.target),n=e.val(),n=l(n),e.val(n)})},f=function(t){return null!=t?t.replace(/\s/g,""):t};r.card=function(t,e){t.bind("keypress",o),t.bind("keypress",a),t.bind("keydown",s),t.bind("paste",u),e.$parsers.push(f),e.$formatters.push(l)},_formatCVC=function(t){return $target=angular.element(t.currentTarget),digit=String.fromCharCode(t.which),!/^\d+$/.test(digit)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(val=$target.val()+digit,val.length<=4?void 0:void t.preventDefault())},r.cvc=function(t){t.bind("keypress",_formatCVC)},_restrictExpiry=function(t){var e,n,r;return e=angular.element(t.currentTarget),n=String.fromCharCode(t.which),!/^\d+$/.test(n)&&!t.meta&&t.keyCode>=46?void t.preventDefault():i(e)?void 0:(r=e.val()+n,r=r.replace(/\D/g,""),r.length>6?void t.preventDefault():void 0)},_formatExpiry=function(t){var e,n,r;return n=String.fromCharCode(t.which),!/^\d+$/.test(n)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(e=angular.element(t.currentTarget),r=e.val()+n,/^\d$/.test(r)&&"0"!==r&&"1"!==r?(t.preventDefault(),e.val("0"+r+" / ")):/^\d\d$/.test(r)?(t.preventDefault(),e.val(""+r+" / ")):void 0)},_formatForwardExpiry=function(t){var e,n,r;if(n=String.fromCharCode(t.which),/^\d+$/.test(n)||t.meta||!(t.keyCode>=46))return e=angular.element(t.currentTarget),r=e.val(),/^\d\d$/.test(r)?e.val(""+r+" / "):void 0},_formatForwardSlash=function(t){var e,n,r;if(n=String.fromCharCode(t.which),"/"===n)return e=angular.element(t.currentTarget),r=e.val(),/^\d$/.test(r)&&"0"!==r?e.val("0"+r+" / "):void 0},_formatBackExpiry=function(t){var e,n;if(!t.meta&&(e=angular.element(t.currentTarget),n=e.val(),8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===n.length)))return/\d(\s|\/)+$/.test(n)?(t.preventDefault(),e.val(n.replace(/\d(\s|\/)*$/,""))):/\s\/\s?\d?$/.test(n)?(t.preventDefault(),e.val(n.replace(/\s\/\s?\d?$/,""))):void 0};var c=function(t){if(null!=t){var r=e.parseExpiry(t),i=new Date(r.year,r.month-1);return n("date")(i,"MM/yyyy")}return null},p=function(t){if(null!=t){var r=e.parseExpiry(t),i=new Date(r.year,r.month-1);return n("date")(i,"MM / yyyy")}return null};return r.expiry=function(t,e){t.bind("keypress",_restrictExpiry),t.bind("keypress",_formatExpiry),t.bind("keypress",_formatForwardSlash),t.bind("keypress",_formatForwardExpiry),t.bind("keydown",_formatBackExpiry),e.$parsers.push(c),e.$formatters.push(p)},function(t,e,n){if(!r[t])throw types=Object.keys(r),errstr='Unknown type for formatting: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return r[t](e,n)}}]).directive("paymentsFormat",["$window","_Format",function(t,e){return{restrict:"A",require:"ngModel",link:function(t,n,r,i){e(r.paymentsFormat,n,i)}}}]),angular.module("angularPayments").factory("_Validate",["Cards","Common","$parse",function(t,e,n){var r=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1},i=function(t){var e,n,r,i,a,o;for(r=!0,i=0,n=(t+"").split("").reverse(),a=0,o=n.length;a<o;a++)e=n[a],e=parseInt(e,10),(r=!r)&&(e*=2),e>9&&(e-=9),i+=e;return i%10===0},a={};return a.cvc=function(e,i,a,o){var s,l;if(null==e||0==e.length)return!0;if(!/^\d+$/.test(e))return!1;var u;if(o.paymentsTypeModel){var f=n(o.paymentsTypeModel);u=f(a)}return u?(s=e.length,r.call(null!=(l=t.fromType(u))?l.cvcLength:void 0,s)>=0):e.length>=3&&e.length<=4},a.card=function(e,a,o,s){var l,u,f;s.paymentsTypeModel&&(f=n(s.paymentsTypeModel));var c=function(){f&&f.assign(o,null),a.$card=null};return null==e||0==e.length?(c(),!0):(e=(e+"").replace(/\s+|-/g,""),/^\d+$/.test(e)&&(l=t.fromNumber(e))?(a.$card=angular.copy(l),f&&f.assign(o,l.type),ret=(u=e.length,r.call(l.length,u)>=0&&(l.luhn===!1||i(e))),ret):(c(),!1))},a.expiry=function(t){if(null==t||0==t.length)return!0;obj=e.parseExpiry(t),month=obj.month,year=obj.year;var n,r,i;return!(!month||!year)&&(!!/^\d+$/.test(month)&&(!!/^\d+$/.test(year)&&(parseInt(month,10)<=12&&(2===year.length&&(i=(new Date).getFullYear(),i=i.toString().slice(0,2),year=i+year),r=new Date(year,month),n=new Date,r.setMonth(r.getMonth()-1),r.setMonth(r.getMonth()+1,1),r>n))))},function(t,e,n,r,i){if(!a[t])throw types=Object.keys(a),errstr='Unknown type for validation: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return a[t](e,n,r,i)}}]).factory("_ValidateWatch",["_Validate",function(t){var e={};return e.cvc=function(e,n,r,i){i.paymentsTypeModel&&r.$watch(i.paymentsTypeModel,function(a,o){if(a!=o){var s=t(e,n.$modelValue,n,r,i);n.$setValidity(e,s)}})},function(t,n,r,i){if(e[t])return e[t](t,n,r,i)}}]).directive("paymentsValidate",["$window","_Validate","_ValidateWatch",function(t,e,n){return{restrict:"A",require:"ngModel",link:function(t,r,i,a){var o=i.paymentsValidate;n(o,a,t,i);var s=function(n){var r=e(o,n,a,t,i);return a.$setValidity(o,r),r?n:void 0};a.$formatters.push(s),a.$parsers.push(s)}}}]),angular.module("angularPayments").directive("stripeForm",["$window","$parse","Common",function(t,e,n){return _getDataToSend=function(t){var e=["number","expMonth","expYear","cvc","name","addressLine1","addressLine2","addressCity","addressState","addressZip","addressCountry"],n=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},r={};for(i in e)t.hasOwnProperty(e[i])&&(r[n(e[i])]=angular.copy(t[e[i]]));return r.number=(r.number||"").replace(/ /g,""),r},{restrict:"A",link:function(e,r,i){if(!t.Stripe)throw"stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html.";var a=angular.element(r);a.bind("submit",function(){expMonthUsed=!!e.expMonth,expYearUsed=!!e.expYear,expMonthUsed&&expYearUsed||(exp=n.parseExpiry(e.expiry),e.expMonth=exp.month,e.expYear=exp.year);var r=a.find("button");r.prop("disabled",!0),a.hasClass("ng-valid")?t.Stripe.createToken(_getDataToSend(e),function(){var t=arguments;e.$apply(function(){e[i.stripeForm].apply(e,t)}),r.prop("disabled",!1)}):(e.$apply(function(){e[i.stripeForm].apply(e,[400,{error:"Invalid form submitted."}])}),r.prop("disabled",!1)),e.expMonth=null,e.expYear=null})}}}]),!function(t,e,n){"use strict";function r(e){if(this.support=!("undefined"==typeof File||"undefined"==typeof Blob||"undefined"==typeof FileList||!Blob.prototype.slice&&!Blob.prototype.webkitSlice&&!Blob.prototype.mozSlice),this.support){this.supportDirectory=/Chrome/.test(t.navigator.userAgent),this.files=[],this.defaults={chunkSize:1048576,forceChunkSize:!1,simultaneousUploads:3,singleFile:!1,fileParameterName:"file",progressCallbacksInterval:500,speedSmoothingFactor:.1,query:{},headers:{},withCredentials:!1,preprocess:null,method:"multipart",testMethod:"GET",uploadMethod:"POST",prioritizeFirstAndLastChunk:!1,allowDuplicateUploads:!1,target:"/",testChunks:!0,generateUniqueIdentifier:null,maxChunkRetries:0,chunkRetryInterval:null,permanentErrors:[404,413,415,500,501],successStatuses:[200,201,202],onDropStopPropagation:!1,initFileFn:null,readFileFn:a},this.opts={},this.events={};var n=this;this.onDrop=function(t){n.opts.onDropStopPropagation&&t.stopPropagation(),t.preventDefault();var e=t.dataTransfer;e.items&&e.items[0]&&e.items[0].webkitGetAsEntry?n.webkitReadDataTransfer(t):n.addFiles(e.files,t)},this.preventEvent=function(t){t.preventDefault()},this.opts=r.extend({},this.defaults,e||{})}}function i(t,e){this.flowObj=t,this.bytes=null,this.file=e,this.name=e.fileName||e.name,this.size=e.size,this.relativePath=e.relativePath||e.webkitRelativePath||this.name,this.uniqueIdentifier=t.generateUniqueIdentifier(e),this.chunks=[],this.paused=!1,this.error=!1,this.averageSpeed=0,this.currentSpeed=0,this._lastProgressCallback=Date.now(),this._prevUploadedSize=0,this._prevProgress=0,this.bootstrap()}function a(t,e,n,r,i){var a="slice";t.file.slice?a="slice":t.file.mozSlice?a="mozSlice":t.file.webkitSlice&&(a="webkitSlice"),i.readFinished(t.file[a](e,n,r))}function o(t,e,n){this.flowObj=t,this.fileObj=e,this.offset=n,this.tested=!1,this.retries=0,this.pendingRetry=!1,this.preprocessState=0,this.readState=0,this.loaded=0,this.total=0,this.chunkSize=this.flowObj.opts.chunkSize,this.startByte=this.offset*this.chunkSize,this.computeEndByte=function(){var t=Math.min(this.fileObj.size,(this.offset+1)*this.chunkSize);return this.fileObj.size-t<this.chunkSize&&!this.flowObj.opts.forceChunkSize&&(t=this.fileObj.size),t},this.endByte=this.computeEndByte(),this.xhr=null;var r=this;this.event=function(t,e){e=Array.prototype.slice.call(arguments),e.unshift(r),r.fileObj.chunkEvent.apply(r.fileObj,e)},this.progressHandler=function(t){t.lengthComputable&&(r.loaded=t.loaded,r.total=t.total),r.event("progress",t)},this.testHandler=function(t){var e=r.status(!0);"error"===e?(r.event(e,r.message()),r.flowObj.uploadNextChunk()):"success"===e?(r.tested=!0,r.event(e,r.message()),r.flowObj.uploadNextChunk()):r.fileObj.paused||(r.tested=!0,r.send())},this.doneHandler=function(t){var e=r.status();if("success"===e||"error"===e)delete this.data,r.event(e,r.message()),r.flowObj.uploadNextChunk();else{r.event("retry",r.message()),r.pendingRetry=!0,r.abort(),r.retries++;var n=r.flowObj.opts.chunkRetryInterval;null!==n?setTimeout(function(){r.send()},n):r.send()}}}function s(t,e){var n=t.indexOf(e);n>-1&&t.splice(n,1)}function l(t,e){return"function"==typeof t&&(e=Array.prototype.slice.call(arguments),t=t.apply(null,e.slice(1))),t}function u(t,e){setTimeout(t.bind(e),0)}function f(t,e){return c(arguments,function(e){e!==t&&c(e,function(e,n){t[n]=e})}),t}function c(t,e,n){if(t){var r;if("undefined"!=typeof t.length){for(r=0;r<t.length;r++)if(e.call(n,t[r],r)===!1)return}else for(r in t)if(t.hasOwnProperty(r)&&e.call(n,t[r],r)===!1)return}}var p=t.navigator.msPointerEnabled;r.prototype={on:function(t,e){t=t.toLowerCase(),this.events.hasOwnProperty(t)||(this.events[t]=[]),this.events[t].push(e)},off:function(t,e){t!==n?(t=t.toLowerCase(),e!==n?this.events.hasOwnProperty(t)&&s(this.events[t],e):delete this.events[t]):this.events={}},fire:function(t,e){e=Array.prototype.slice.call(arguments),t=t.toLowerCase();var n=!1;return this.events.hasOwnProperty(t)&&c(this.events[t],function(t){n=t.apply(this,e.slice(1))===!1||n},this),"catchall"!=t&&(e.unshift("catchAll"),n=this.fire.apply(this,e)===!1||n),!n},webkitReadDataTransfer:function(t){function e(t){t.readEntries(function(a){a.length?(o+=a.length,c(a,function(t){if(t.isFile){var i=t.fullPath;t.file(function(t){n(t,i)},r)}else t.isDirectory&&e(t.createReader())}),e(t)):i()},r)}function n(t,e){t.relativePath=e.substring(1),s.push(t),i()}function r(t){throw t}function i(){0==--o&&a.addFiles(s,t)}var a=this,o=t.dataTransfer.items.length,s=[];c(t.dataTransfer.items,function(t){var r=t.webkitGetAsEntry();return r?void(r.isFile?n(t.getAsFile(),r.fullPath):e(r.createReader())):void i()})},generateUniqueIdentifier:function(t){var e=this.opts.generateUniqueIdentifier;if("function"==typeof e)return e(t);var n=t.relativePath||t.webkitRelativePath||t.fileName||t.name;return t.size+"-"+n.replace(/[^0-9a-zA-Z_-]/gim,"")},uploadNextChunk:function(t){var e=!1;if(this.opts.prioritizeFirstAndLastChunk&&(c(this.files,function(t){return!t.paused&&t.chunks.length&&"pending"===t.chunks[0].status()?(t.chunks[0].send(),e=!0,!1):!t.paused&&t.chunks.length>1&&"pending"===t.chunks[t.chunks.length-1].status()?(t.chunks[t.chunks.length-1].send(),e=!0,!1):void 0}),e))return e;if(c(this.files,function(t){return t.paused||c(t.chunks,function(t){return"pending"===t.status()?(t.send(),e=!0,!1):void 0}),!e&&void 0}),e)return!0;var n=!1;return c(this.files,function(t){return t.isComplete()?void 0:(n=!0,!1)}),n||t||u(function(){this.fire("complete")},this),!1},assignBrowse:function(t,n,r,i){t instanceof Element&&(t=[t]),c(t,function(t){var a;"INPUT"===t.tagName&&"file"===t.type?a=t:(a=e.createElement("input"),a.setAttribute("type","file"),f(a.style,{visibility:"hidden",position:"absolute",width:"1px",height:"1px"}),t.appendChild(a),t.addEventListener("click",function(){a.click()},!1)),this.opts.singleFile||r||a.setAttribute("multiple","multiple"),n&&a.setAttribute("webkitdirectory","webkitdirectory"),c(i,function(t,e){a.setAttribute(e,t)});var o=this;a.addEventListener("change",function(t){t.target.value&&(o.addFiles(t.target.files,t),t.target.value="")},!1)},this)},assignDrop:function(t){"undefined"==typeof t.length&&(t=[t]),c(t,function(t){t.addEventListener("dragover",this.preventEvent,!1),t.addEventListener("dragenter",this.preventEvent,!1),t.addEventListener("drop",this.onDrop,!1)},this)},unAssignDrop:function(t){"undefined"==typeof t.length&&(t=[t]),c(t,function(t){t.removeEventListener("dragover",this.preventEvent),t.removeEventListener("dragenter",this.preventEvent),t.removeEventListener("drop",this.onDrop)},this)},isUploading:function(){var t=!1;return c(this.files,function(e){return e.isUploading()?(t=!0,!1):void 0}),t},_shouldUploadNext:function(){var t=0,e=!0,n=this.opts.simultaneousUploads;return c(this.files,function(r){c(r.chunks,function(r){return"uploading"===r.status()&&(t++,t>=n)?(e=!1,!1):void 0})}),e&&t},upload:function(){var t=this._shouldUploadNext();if(t!==!1){this.fire("uploadStart");for(var e=!1,n=1;n<=this.opts.simultaneousUploads-t;n++)e=this.uploadNextChunk(!0)||e;e||u(function(){this.fire("complete")},this)}},resume:function(){c(this.files,function(t){t.resume()})},pause:function(){c(this.files,function(t){t.pause()})},cancel:function(){for(var t=this.files.length-1;t>=0;t--)this.files[t].cancel()},progress:function(){var t=0,e=0;return c(this.files,function(n){t+=n.progress()*n.size,e+=n.size}),e>0?t/e:0},addFile:function(t,e){this.addFiles([t],e)},addFiles:function(t,e){var n=[];c(t,function(t){if((!p||p&&t.size>0)&&(t.size%4096!==0||"."!==t.name&&"."!==t.fileName)&&(this.opts.allowDuplicateUploads||!this.getFromUniqueIdentifier(this.generateUniqueIdentifier(t)))){var r=new i(this,t);this.fire("fileAdded",r,e)&&n.push(r)}},this),this.fire("filesAdded",n,e)&&(c(n,function(t){this.opts.singleFile&&this.files.length>0&&this.removeFile(this.files[0]),this.files.push(t)},this),this.fire("filesSubmitted",n,e))},removeFile:function(t){for(var e=this.files.length-1;e>=0;e--)this.files[e]===t&&(this.files.splice(e,1),t.abort(),this.fire("fileRemoved",t))},getFromUniqueIdentifier:function(t){var e=!1;return c(this.files,function(n){n.uniqueIdentifier===t&&(e=n)}),e},getSize:function(){var t=0;return c(this.files,function(e){t+=e.size}),t},sizeUploaded:function(){var t=0;return c(this.files,function(e){t+=e.sizeUploaded()}),t},timeRemaining:function(){var t=0,e=0;return c(this.files,function(n){n.paused||n.error||(t+=n.size-n.sizeUploaded(),e+=n.averageSpeed)}),t&&!e?Number.POSITIVE_INFINITY:t||e?Math.floor(t/e):0}},i.prototype={measureSpeed:function(){var t=Date.now()-this._lastProgressCallback;if(t){var e=this.flowObj.opts.speedSmoothingFactor,n=this.sizeUploaded();this.currentSpeed=Math.max((n-this._prevUploadedSize)/t*1e3,0),this.averageSpeed=e*this.currentSpeed+(1-e)*this.averageSpeed,this._prevUploadedSize=n}},chunkEvent:function(t,e,n){switch(e){case"progress":if(Date.now()-this._lastProgressCallback<this.flowObj.opts.progressCallbacksInterval)break;this.measureSpeed(),this.flowObj.fire("fileProgress",this,t),this.flowObj.fire("progress"),this._lastProgressCallback=Date.now();break;case"error":this.error=!0,this.abort(!0),this.flowObj.fire("fileError",this,n,t),this.flowObj.fire("error",n,this,t);break;case"success":if(this.error)return;this.measureSpeed(),this.flowObj.fire("fileProgress",this,t),this.flowObj.fire("progress"),this._lastProgressCallback=Date.now(),this.isComplete()&&(this.currentSpeed=0,this.averageSpeed=0,this.flowObj.fire("fileSuccess",this,n,t));break;case"retry":this.flowObj.fire("fileRetry",this,t)}},pause:function(){this.paused=!0,this.abort()},resume:function(){this.paused=!1,this.flowObj.upload()},abort:function(t){this.currentSpeed=0,this.averageSpeed=0;var e=this.chunks;t&&(this.chunks=[]),c(e,function(t){"uploading"===t.status()&&(t.abort(),this.flowObj.uploadNextChunk())},this)},cancel:function(){this.flowObj.removeFile(this)},retry:function(){this.bootstrap(),this.flowObj.upload()},bootstrap:function(){"function"==typeof this.flowObj.opts.initFileFn&&this.flowObj.opts.initFileFn(this),this.abort(!0),this.error=!1,this._prevProgress=0;for(var t=this.flowObj.opts.forceChunkSize?Math.ceil:Math.floor,e=Math.max(t(this.size/this.flowObj.opts.chunkSize),1),n=0;e>n;n++)this.chunks.push(new o(this.flowObj,this,n))},progress:function(){if(this.error)return 1;if(1===this.chunks.length)return this._prevProgress=Math.max(this._prevProgress,this.chunks[0].progress()),this._prevProgress;var t=0;c(this.chunks,function(e){t+=e.progress()*(e.endByte-e.startByte)});var e=t/this.size;return this._prevProgress=Math.max(this._prevProgress,e>.9999?1:e),this._prevProgress},isUploading:function(){var t=!1;return c(this.chunks,function(e){return"uploading"===e.status()?(t=!0,!1):void 0}),t},isComplete:function(){var t=!1;return c(this.chunks,function(e){var n=e.status();return"pending"===n||"uploading"===n||"reading"===n||1===e.preprocessState||1===e.readState?(t=!0,!1):void 0}),!t},sizeUploaded:function(){var t=0;return c(this.chunks,function(e){t+=e.sizeUploaded()}),t},timeRemaining:function(){if(this.paused||this.error)return 0;var t=this.size-this.sizeUploaded();return t&&!this.averageSpeed?Number.POSITIVE_INFINITY:t||this.averageSpeed?Math.floor(t/this.averageSpeed):0},getType:function(){return this.file.type&&this.file.type.split("/")[1]},getExtension:function(){return this.name.substr((~-this.name.lastIndexOf(".")>>>0)+2).toLowerCase()}},o.prototype={getParams:function(){return{flowChunkNumber:this.offset+1,flowChunkSize:this.flowObj.opts.chunkSize,flowCurrentChunkSize:this.endByte-this.startByte,flowTotalSize:this.fileObj.size,flowIdentifier:this.fileObj.uniqueIdentifier,flowFilename:this.fileObj.name,flowRelativePath:this.fileObj.relativePath,flowTotalChunks:this.fileObj.chunks.length}},getTarget:function(t,e){return t+=t.indexOf("?")<0?"?":"&",t+e.join("&")},test:function(){this.xhr=new XMLHttpRequest,this.xhr.addEventListener("load",this.testHandler,!1),this.xhr.addEventListener("error",this.testHandler,!1);var t=l(this.flowObj.opts.testMethod,this.fileObj,this),e=this.prepareXhrRequest(t,!0);this.xhr.send(e)},preprocessFinished:function(){this.endByte=this.computeEndByte(),this.preprocessState=2,this.send()},readFinished:function(t){this.readState=2,this.bytes=t,this.send()},send:function(){var t=this.flowObj.opts.preprocess,e=this.flowObj.opts.readFileFn;if("function"==typeof t)switch(this.preprocessState){case 0:return this.preprocessState=1,void t(this);case 1:return}switch(this.readState){
case 0:return this.readState=1,void e(this.fileObj,this.startByte,this.endByte,this.fileObj.file.type,this);case 1:return}if(this.flowObj.opts.testChunks&&!this.tested)return void this.test();this.loaded=0,this.total=0,this.pendingRetry=!1,this.xhr=new XMLHttpRequest,this.xhr.upload.addEventListener("progress",this.progressHandler,!1),this.xhr.addEventListener("load",this.doneHandler,!1),this.xhr.addEventListener("error",this.doneHandler,!1);var n=l(this.flowObj.opts.uploadMethod,this.fileObj,this),r=this.prepareXhrRequest(n,!1,this.flowObj.opts.method,this.bytes);this.xhr.send(r)},abort:function(){var t=this.xhr;this.xhr=null,t&&t.abort()},status:function(t){return 1===this.readState?"reading":this.pendingRetry||1===this.preprocessState?"uploading":this.xhr?this.xhr.readyState<4?"uploading":this.flowObj.opts.successStatuses.indexOf(this.xhr.status)>-1?"success":this.flowObj.opts.permanentErrors.indexOf(this.xhr.status)>-1||!t&&this.retries>=this.flowObj.opts.maxChunkRetries?"error":(this.abort(),"pending"):"pending"},message:function(){return this.xhr?this.xhr.responseText:""},progress:function(){if(this.pendingRetry)return 0;var t=this.status();return"success"===t||"error"===t?1:"pending"===t?0:this.total>0?this.loaded/this.total:0},sizeUploaded:function(){var t=this.endByte-this.startByte;return"success"!==this.status()&&(t=this.progress()*t),t},prepareXhrRequest:function(t,e,n,r){var i=l(this.flowObj.opts.query,this.fileObj,this,e);i=f(i,this.getParams());var a=l(this.flowObj.opts.target,this.fileObj,this,e),o=null;if("GET"===t||"octet"===n){var s=[];c(i,function(t,e){s.push([encodeURIComponent(e),encodeURIComponent(t)].join("="))}),a=this.getTarget(a,s),o=r||null}else o=new FormData,c(i,function(t,e){o.append(e,t)}),o.append(this.flowObj.opts.fileParameterName,r,this.fileObj.file.name);return this.xhr.open(t,a,!0),this.xhr.withCredentials=this.flowObj.opts.withCredentials,c(l(this.flowObj.opts.headers,this.fileObj,this,e),function(t,e){this.xhr.setRequestHeader(e,t)},this),o}},r.evalOpts=l,r.extend=f,r.each=c,r.FlowFile=i,r.FlowChunk=o,r.version="2.11.2","object"==typeof module&&module&&"object"==typeof module.exports?module.exports=r:(t.Flow=r,"function"==typeof define&&define.amd&&define("flow",[],function(){return r}))}(window,document),angular.module("flow.provider",[]).provider("flowFactory",function(){"use strict";this.defaults={},this.factory=function(t){return new Flow(t)},this.events=[],this.on=function(t,e){this.events.push([t,e])},this.$get=function(){var t=this.factory,e=this.defaults,n=this.events;return{create:function(r){var i=t(angular.extend({},e,r));return angular.forEach(n,function(t){i.on(t[0],t[1])}),i}}}}),angular.module("flow.init",["flow.provider"]).controller("flowCtrl",["$scope","$attrs","$parse","flowFactory",function(t,e,n,r){var i=angular.extend({},t.$eval(e.flowInit)),a=t.$eval(e.flowObject)||r.create(i),o=function(e){var n=Array.prototype.slice.call(arguments);n.shift();var r=t.$broadcast.apply(t,["flow::"+e,a].concat(n));return{progress:1,filesSubmitted:1,fileSuccess:1,fileError:1,complete:1}[e]&&t.$apply(),!r.defaultPrevented&&void 0};a.on("catchAll",o),t.$on("$destroy",function(){a.off("catchAll",o)}),t.$flow=a,e.hasOwnProperty("flowName")&&(n(e.flowName).assign(t,a),t.$on("$destroy",function(){n(e.flowName).assign(t)}))}]).directive("flowInit",[function(){return{scope:!0,controller:"flowCtrl"}}]),angular.module("flow.btn",["flow.init"]).directive("flowBtn",[function(){return{restrict:"EA",scope:!1,require:"^flowInit",link:function(t,e,n){var r=n.hasOwnProperty("flowDirectory"),i=n.hasOwnProperty("flowSingleFile"),a=n.hasOwnProperty("flowAttrs")&&t.$eval(n.flowAttrs);t.$flow.assignBrowse(e,r,i,a)}}}]),angular.module("flow.dragEvents",["flow.init"]).directive("flowPreventDrop",function(){return{scope:!1,link:function(t,e,n){e.bind("drop dragover",function(t){t.preventDefault()})}}}).directive("flowDragEnter",["$timeout",function(t){return{scope:!1,link:function(e,n,r){function i(t){var e=!1,n=t.dataTransfer||t.originalEvent.dataTransfer;return angular.forEach(n&&n.types,function(t){"Files"===t&&(e=!0)}),e}var a,o=!1;n.bind("dragover",function(n){i(n)&&(o||(e.$apply(r.flowDragEnter),o=!0),t.cancel(a),n.preventDefault())}),n.bind("dragleave drop",function(n){t.cancel(a),a=t(function(){e.$eval(r.flowDragLeave),a=null,o=!1},100)})}}}]),angular.module("flow.drop",["flow.init"]).directive("flowDrop",function(){return{scope:!1,require:"^flowInit",link:function(t,e,n){function r(){t.$flow.assignDrop(e)}function i(){t.$flow.unAssignDrop(e)}n.flowDropEnabled?t.$watch(n.flowDropEnabled,function(t){t?r():i()}):r()}}}),!function(t){"use strict";function e(t){return t.charAt(0).toUpperCase()+t.slice(1)}var n=t.module("flow.events",["flow.init"]),r={fileSuccess:["$file","$message"],fileProgress:["$file"],fileAdded:["$file","$event"],filesAdded:["$files","$event"],filesSubmitted:["$files","$event"],fileRetry:["$file"],fileError:["$file","$message"],uploadStart:[],complete:[],progress:[],error:["$message","$file"]};t.forEach(r,function(r,i){var a="flow"+e(i);"flowUploadStart"==a&&(a="flowUploadStarted"),n.directive(a,[function(){return{require:"^flowInit",controller:["$scope","$attrs",function(e,n){e.$on("flow::"+i,function(){var i=Array.prototype.slice.call(arguments),o=i.shift();if(e.$flow===i.shift()){var s={};t.forEach(r,function(t,e){s[t]=i[e]}),e.$eval(n[a],s)===!1&&o.preventDefault()}})}]}}])})}(angular),angular.module("flow.img",["flow.init"]).directive("flowImg",[function(){return{scope:!1,require:"^flowInit",link:function(t,e,n){var r=n.flowImg;t.$watch(r,function(e){if(e){var r=new FileReader;r.readAsDataURL(e.file),r.onload=function(e){t.$apply(function(){n.$set("src",e.target.result)})}}})}}}]),angular.module("flow.transfers",["flow.init"]).directive("flowTransfers",[function(){return{scope:!0,require:"^flowInit",link:function(t){t.transfers=t.$flow.files}}}]),angular.module("flow",["flow.provider","flow.init","flow.events","flow.btn","flow.drop","flow.transfers","flow.img","flow.dragEvents"]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
