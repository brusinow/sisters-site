"use strict";angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function(t,e,r,a){t.$on("ngCart:change",function(){e.$save()}),angular.isObject(a.get("cart"))?e.$restore(a.get("cart")):e.init()}]).service("ngCart",["$rootScope","$location","$window","ngCartItem","store",function(t,e,r,a,n){this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(e,r,n,o,i,s,l){var u=this.getItemById(e);if("object"==typeof u)u.setQuantity(i,!1),t.$broadcast("ngCart:itemUpdated",u);else{var c=new a(e,r,n,o,i,s,l);this.$cart.items.push(c),t.$broadcast("ngCart:itemAdded",c)}t.$broadcast("ngCart:change",{})},this.addItemBtn=function(r,n,o,i,s,l){var u=l.skus;if(1===u.length){var c=this.getItemById(r);if("object"==typeof c)c.setQuantity(s,!1),t.$broadcast("ngCart:itemUpdated",c);else{var d=new a(r,n,o,i,s,l);this.$cart.items.push(d),t.$broadcast("ngCart:itemAdded",d)}t.$broadcast("ngCart:change",{})}else e.url("/store/"+l.id)},this.changeQuantity=function(e,r){var a=this.getItemById(e);"object"==typeof a?(a.setQuantity(r,!0),t.$broadcast("ngCart:itemUpdated",a)):console.log("nothing there"),t.$broadcast("ngCart:change",{})},this.getItemById=function(t){var e=this.getCart().items,r=!1;return angular.forEach(e,function(e){e.getId()===t&&(r=e)}),r},this.setShipping=function(e){return this.$cart.shipping=e,t.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(e){return this.$cart.taxRate=+parseFloat(e).toFixed(2),t.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(t){return this.$cart=t,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var t=0,e=this.getItems();return angular.forEach(e,function(e){t+=e.getQuantity()}),t},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getSubTotal=function(){var t=0;return angular.forEach(this.getCart().items,function(e){t+=e.getTotal()}),+parseFloat(t).toFixed(2)},this.totalCost=function(){return+parseFloat(this.getSubTotal()+this.getShipping()+this.getTax()).toFixed(2)},this.removeItem=function(e){var r=this.$cart.items.splice(e,1)[0]||{};t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.removeItemById=function(e){var r,a=this.getCart();angular.forEach(a.items,function(t,r){t.getId()===e&&(t=a.items.splice(r,1)[0]||{})}),this.setCart(a),t.$broadcast("ngCart:itemRemoved",r),t.$broadcast("ngCart:change",{})},this.empty=function(){t.$broadcast("ngCart:change",{}),this.$cart.items=[],r.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var t=[];return angular.forEach(this.getItems(),function(e){t.push(e.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:t}},this.$restore=function(t){var e=this;e.init(),e.$cart.shipping=t.shipping,e.$cart.taxRate=t.taxRate,e.$cart.tax=t.tax,angular.forEach(t.items,function(t){e.$cart.items.push(new a(t.parent,t.sku,t.description,t.amount,t.quantity,t._data,t.attr))}),this.$save()},this.$save=function(){return n.set("cart",JSON.stringify(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function(t,e){var r=function(t,e,r,a,n,o,i){this.setId(t),this.setSku(e),this.setName(r),this.setPrice(a),this.setQuantity(n),this.setData(o),this.setAttr(i)};return r.prototype.setId=function(t){t?this.parent=t:e.error("An ID must be provided")},r.prototype.setSku=function(t){t?this.sku=t:e.error("A sku must be provided")},r.prototype.getId=function(){return this.parent},r.prototype.getSku=function(){return this.sku},r.prototype.setName=function(t){t?this.description=t:e.error("A name must be provided")},r.prototype.getName=function(){return this.description},r.prototype.setPrice=function(t){var r=parseFloat(t);r?r<=0?e.error("A price must be over 0"):this.amount=r:e.error("A price must be provided")},r.prototype.getPrice=function(){return this.amount},r.prototype.setQuantity=function(t,r){var a=parseInt(t);a%1===0?(r===!0?this.quantity+=a:this.quantity=a,this.quantity<1&&(this.quantity=1)):(this.quantity=1,e.info("Quantity must be an integer and was defaulted to 1"))},r.prototype.getQuantity=function(){return this.quantity},r.prototype.setData=function(t){t&&(this._data=t)},r.prototype.getData=function(){return this._data?this._data:void e.info("This item has no data")},r.prototype.setAttr=function(t){t&&(this.attr=t)},r.prototype.getAttr=function(){if(this.attr){if(this.attr.size)return this.attr.size;if(this.attr.color)return this.attr.size}},r.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},r.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},r}]).service("store",["$window",function(t){return{get:function(e){if(t.localStorage.getItem(e)){var r=angular.fromJson(t.localStorage.getItem(e));return JSON.parse(r)}return!1},set:function(e,r){return void 0===r?t.localStorage.removeItem(e):t.localStorage.setItem(e,angular.toJson(r)),t.localStorage.getItem(e)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function(t,e,r,a){t.loaded=!1,t.toggleCart=!1,t.ngCart=r,a(function(){t.loaded=!0});var n=r.getItems(),o=[];angular.forEach(n,function(t){"shippable"===t._data.product_type&&o.push(t)}),o.length>0?(t.shipBool=!0,t.$emit("setShippable",!0)):(t.shipBool=!1,t.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function(t,e,r){t.loaded=!1,t.toggleCart=!1,t.ngCart=e,r(function(){t.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function(t,e){t.ngCart=e}]).directive("ngcartAddBtn",["ngCart",function(t){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartBtn.html":e.templateUrl},link:function(e,r,a){e.attrs=a,e.inCart=function(){return t.getItemById(a.id)},e.inCart()?e.q=t.getItemById(a.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var n=1;n<=e.quantityMax;n++)e.qtyOpt.push(n)}}}]).directive("ngcartAddtocart",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocart.html":e.templateUrl},link:function(e,r,a){e.attrs=a,e.inCart=function(){return t.getItemById(a.id)},e.inCart()?e.q=t.getItemById(a.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];var n,o=firebase.database().ref("tickets/"+e.id+"/totalTickets");o.once("value").then(function(t){if(e.totalTix=t.val(),n=e.quantityMax<e.totalTix?e.quantityMax:e.totalTix,n>0)for(var r=1;r<=n;r++)e.qtyOpt.push(r)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/summary.html":e.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart-confirm.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart-collapse.html":e.templateUrl},link:function(t,e,r){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function(t,e,r,a){e.ngCart=r,e.checkout=function(){a.setService(e.service),a.setSettings(e.settings),a.checkout().success(function(e,r,a,n){t.$broadcast("ngCart:checkout_succeeded",e)}).error(function(e,r,a,n){t.$broadcast("ngCart:checkout_failed",{statusCode:r,error:e})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"template/ngCart/checkout.html":e.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function(t){this._obj={service:void 0,settings:void 0},this.setService=function(t){this._obj.service=t},this.setSettings=function(t){this._obj.settings=t},this.checkout=function(){var e=t.get("ngCart.fulfilment."+this._obj.service);return e.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function(t,e,r){this.checkout=function(){var a=t.defer();return e.info(r.toObject()),a.resolve({cart:r.toObject()}),a.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function(t,e){this.checkout=function(r){return t.post(r.url,{data:e.toObject(),options:r.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function(t,e){}]),angular.module("angular-parallax",[]).directive("parallax",["$window",function(t){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function(e,r,a){var n=function(){e.parallaxHorizontalOffset||(e.parallaxHorizontalOffset="0");var a=t.pageYOffset*(e.parallaxRatio?e.parallaxRatio:1.1);if(a<=t.innerHeight){var n=a<e.parallaxVerticalOffset?e.parallaxVerticalOffset:a,o=e.parallaxHorizontalOffset.indexOf("%")===-1?e.parallaxHorizontalOffset+"px":e.parallaxHorizontalOffset;r.css("transform","translate("+o+", "+n+"px)")}};n(),angular.element(t).bind("scroll",n),angular.element(t).bind("touchmove",n)}}}]).directive("parallaxBackground",["$window",function(t){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function(e,r,a){var n=function(){var a=e.parallaxVerticalOffset/100*r[0].offsetHeight,n=(r.prop("offsetTop")-t.pageYOffset)*(e.parallaxRatio?e.parallaxRatio:1.1)-(a||0);n>=e.parallaxStartPoint&&(n=e.parallaxStartPoint),r.css("background-position","50% "+n+"px")};angular.element(t).bind("load",function(t){n(),e.$apply()}),angular.element(t).bind("scroll",n),angular.element(t).bind("touchmove",n)}}}]),function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r=e();for(var a in r)("object"==typeof exports?exports:t)[a]=r[a]}}(this,function(){return function(t){function e(a){if(r[a])return r[a].exports;var n=r[a]={exports:{},id:a,loaded:!1};return t[a].call(n.exports,n,n.exports,e),n.loaded=!0,n.exports}var r={};return e.m=t,e.c=r,e.p="",e(0)}([function(t,e,r){t.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",r(1)]).factory("FileSaverUtils",[r(2)]).factory("Blob",["$window",r(3)]).factory("SaveAs",[r(5)])},function(t,e){t.exports=function(t,e,r){function a(t,a,n){try{e(t,a,n)}catch(t){r.handleErrors(t.message)}}return{saveAs:function(t,e,n){return r.isBlobInstance(t)||r.handleErrors("Data argument should be a blob instance"),r.isString(e)||r.handleErrors("Filename argument should be a string"),a(t,e,n)}}}},function(t,e){t.exports=function(){return{handleErrors:function(t){throw new Error(t)},isString:function(t){return"string"==typeof t||t instanceof String},isUndefined:function(t){return"undefined"==typeof t},isBlobInstance:function(t){return t instanceof Blob}}}},function(t,e,r){r(4),t.exports=function(t){return t.Blob}},function(t,e){!function(t){if(t.URL=t.URL||t.webkitURL,t.Blob&&t.URL)try{return void new Blob}catch(t){}var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},r=function(){this.data=[]},a=function(t,e,r){this.data=t,this.size=t.length,this.type=e,this.encoding=r},n=r.prototype,o=a.prototype,i=t.FileReaderSync,s=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=l.length,c=t.URL||t.webkitURL||t,d=c.createObjectURL,g=c.revokeObjectURL,f=c,p=t.btoa,h=t.atob,m=t.ArrayBuffer,v=t.Uint8Array,b=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(a.fake=o.fake=!0;u--;)s.prototype[l[u]]=u+1;return c.createObjectURL||(f=t.URL=function(t){var e,r=document.createElementNS("http://www.w3.org/1999/xhtml","a");return r.href=t,"origin"in r||("data:"===r.protocol.toLowerCase()?r.origin=null:(e=t.match(b),r.origin=e&&e[1])),r}),f.createObjectURL=function(t){var e,r=t.type;return null===r&&(r="application/octet-stream"),t instanceof a?(e="data:"+r,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):p?e+";base64,"+p(t.data):e+","+encodeURIComponent(t.data)):d?d.call(c,t):void 0},f.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&g&&g.call(c,t)},n.append=function(t){var r=this.data;if(v&&(t instanceof m||t instanceof v)){for(var n="",o=new v(t),l=0,u=o.length;l<u;l++)n+=String.fromCharCode(o[l]);r.push(n)}else if("Blob"===e(t)||"File"===e(t)){if(!i)throw new s("NOT_READABLE_ERR");var c=new i;r.push(c.readAsBinaryString(t))}else t instanceof a?"base64"===t.encoding&&h?r.push(h(t.data)):"URI"===t.encoding?r.push(decodeURIComponent(t.data)):"raw"===t.encoding&&r.push(t.data):("string"!=typeof t&&(t+=""),r.push(unescape(encodeURIComponent(t))))},n.getBlob=function(t){return arguments.length||(t=null),new a(this.data.join(""),t,"raw")},n.toString=function(){return"[object BlobBuilder]"},o.slice=function(t,e,r){var n=arguments.length;return n<3&&(r=null),new a(this.data.slice(t,n>1?e:this.data.length),r,this.encoding)},o.toString=function(){return"[object Blob]"},o.close=function(){this.size=0,delete this.data},r}(t);t.Blob=function(t,r){var a=r?r.type||"":"",n=new e;if(t)for(var o=0,i=t.length;o<i;o++)Uint8Array&&t[o]instanceof Uint8Array?n.append(t[o].buffer):n.append(t[o]);var s=n.getBlob(a);return!s.slice&&s.webkitSlice&&(s.slice=s.webkitSlice),s};var r=Object.getPrototypeOf||function(t){return t.__proto__};t.Blob.prototype=r(new t.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(t,e,r){t.exports=function(){return r(6).saveAs||function(){}}},function(t,e,r){var a,n,o=o||function(t){if(!("undefined"==typeof t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,r=function(){return t.URL||t.webkitURL||t},a=e.createElementNS("http://www.w3.org/1999/xhtml","a"),n="download"in a,o=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},i=/constructor/i.test(t.HTMLElement),s=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",c=4e4,d=function(t){var e=function(){"string"==typeof t?r().revokeObjectURL(t):t.remove()};setTimeout(e,c)},g=function(t,e,r){e=[].concat(e);for(var a=e.length;a--;){var n=t["on"+e[a]];if("function"==typeof n)try{n.call(t,r||t)}catch(t){l(t)}}},f=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},p=function(e,l,c){c||(e=f(e));var p,h=this,m=e.type,v=m===u,b=function(){g(h,"writestart progress write writeend".split(" "))},$=function(){if((s||v&&i)&&t.FileReader){var a=new FileReader;return a.onloadend=function(){var e=s?a.result:a.result.replace(/^data:[^;]*;/,"data:attachment/file;"),r=t.open(e,"_blank");r||(t.location.href=e),e=void 0,h.readyState=h.DONE,b()},a.readAsDataURL(e),void(h.readyState=h.INIT)}if(p||(p=r().createObjectURL(e)),v)t.location.href=p;else{var n=t.open(p,"_blank");n||(t.location.href=p)}h.readyState=h.DONE,b(),d(p)};return h.readyState=h.INIT,n?(p=r().createObjectURL(e),void setTimeout(function(){a.href=p,a.download=l,o(a),b(),d(p),h.readyState=h.DONE})):void $()},h=p.prototype,m=function(t,e,r){return new p(t,e||t.name||"download",r)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,r){return e=e||t.name||"download",r||(t=f(t)),navigator.msSaveOrOpenBlob(t,e)}:(h.abort=function(){},h.readyState=h.INIT=0,h.WRITING=1,h.DONE=2,h.error=h.onwritestart=h.onprogress=h.onwrite=h.onabort=h.onerror=h.onwriteend=null,m)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=o:null!==r(7)&&null!==r(8)&&(a=[],n=function(){return o}.apply(e,a),!(void 0!==n&&(t.exports=n)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})}])});var uiroutermetatags;!function(t){function e(t,e,r,a){function n(t,e,r,n,o){a.prerenderReady=!1}function o(e,a){a.metaTags||t.debug('MetaTags - route: "'+a.name+'" does not contain any metatags'),r.update(a.metaTags)}function i(t,e,n,o,i,s){r.prerender.statusCode=500,a.prerenderReady=!0}function s(t,e,n){r.prerender.statusCode=404,a.prerenderReady=!0}e.MetaTags=r,e.$on("$stateChangeStart",n),e.$on("$stateChangeSuccess",o),e.$on("$stateChangeError",i),e.$on("$stateNotFound",s)}e.$inject=["$log","$rootScope","MetaTags","$window"];var r=angular.module("ui.router.metatags",["ui.router"]),a=function(){function t(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return t.prototype.setTitlePrefix=function(t){return this.prefix=t,this},t.prototype.setTitleSuffix=function(t){return this.suffix=t,this},t.prototype.setDefaultTitle=function(t){return this.defaultTitle=t,this},t.prototype.setDefaultDescription=function(t){return this.defaultDescription=t,this},t.prototype.setDefaultKeywords=function(t){return this.defaultKeywords=t,this},t.prototype.setDefaultRobots=function(t){return this.defaultRobots=t,this},t.prototype.setStaticProperties=function(t){return this.staticProperties=t,this},t.prototype.setOGURL=function(t){return this.enableOGURL=t,this},t.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},t}();r.provider("UIRouterMetatags",a);var n=function(){function t(t,e,r,a,n,o,i){this.$log=t,this.UIRouterMetatags=e,this.$interpolate=r,this.$injector=a,this.$state=n,this.$location=o,this.$window=i,this.prerender={}}return t.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],t.prototype.update=function(t){var e=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),t?(this.title=t.title?this.UIRouterMetatags.prefix+(this.getValue("title",t.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=t.description?this.getValue("description",t.description):this.UIRouterMetatags.defaultDescription,this.keywords=t.keywords?this.getValue("keywords",t.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=t.robots?this.getValue("robots",t.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(t.properties,function(t,r){var a=e.getValue(r,t);a&&(e.properties[r]=a)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),t&&t.prerender?(this.prerender.statusCode=t.prerender.statusCode?this.getValue("prerender.statusCode",t.prerender.statusCode):200,this.prerender.header=t.prerender.header?this.getValue("rerender.header",t.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(t){this.$log.error("error occured when extracting metatags:",t)}},t.prototype.getValue=function(t,e){try{return e?"number"==typeof e?e:"string"==typeof e&&0===e.trim().length?null:angular.isFunction(e)||Array.isArray(e)?this.$injector.invoke(e,this,this.$state.$current.locals.globals):this.$interpolate(e)(this.$state.$current.locals.globals):null}catch(e){return this.$log.error("error occured when trying to get the value of tag:",t,e),null}},t}();r.service("MetaTags",n),r.run(e)}(uiroutermetatags||(uiroutermetatags={}));var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(t,e){return t-e}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function(t,e){function r(t,e){console.log("what is templateString? ",e);var r=e.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,t.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",r),r}function a(){function t(t,e){return t>e?1:t<e?-1:0}var e=t,r=t;"object"==typeof Intl?e=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(e=function(t,e){return(t+"").localeCompare(e,void 0,{sensitivity:"case"})});var a=function(t,a){return"number"==typeof t&&"number"==typeof a?r(t,a):t instanceof Date&&a instanceof Date?r(t.getTime(),a.getTime()):e(t,a)};return a}var n=a();return{scope:!0,controller:["$scope","tableSortConfig",function(e,r){e.pagination={template:r.paginationTemplate,perPageOptions:r.perPageOptions.concat(),perPage:r.perPageDefault,currentPage:1,getPageRangeString:function(t){var r=t!==e.filtering.filteredCount?e.filtering.filteredCount:t,a=Math.max((e.pagination.currentPage-1)*e.pagination.perPage+1,1),n=Math.min(e.pagination.currentPage*e.pagination.perPage,r);return 0===e.filtering.filteredCount?"":(n===r&&1===a?"":a+"-")+n}},console.log("what is pagination: ",e.pagination),e.filtering={template:r.filterTemplate,filterString:"",filterFunction:r.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",e.filtering),e.itemsArrayExpression="",e.itemNameSingular=r.itemNameSingular,e.itemNamePlural=r.itemNamePlural,e.noDataText=r.noDataText,e.wrappingElementClass=r.wrappingElementClass,e.sortExpression=[],e.headings=[];var a=function(e,r){return[t(e),null,!1,r?r:e]};this.setSortField=function(t,r,n,o){var i,s=a(t,n);if(s.push(o),1===e.sortExpression.length&&e.sortExpression[0][0]===s[0])e.sortExpression[0][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[0][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[0][2]=!0),e.$emit("tablesort:sortOrder",[{name:e.sortExpression[0][3],order:e.sortExpression[0][2]}]);else{for(i=0;i<e.headings.length;i+=1)e.headings[i].removeClass("tablesort-desc").removeClass("tablesort-asc");r.addClass("tablesort-asc"),e.sortExpression=[s],e.$emit("tablesort:sortOrder",[{name:s[3],order:s[2]}])}},this.addSortField=function(t,r,n,o){var i,s=!1,l=a(t,n);for(l.push(o),i=0;i<e.sortExpression.length;i+=1)e.sortExpression[i][0]===l[0]&&(e.sortExpression[i][2]?(r.removeClass("tablesort-desc"),r.addClass("tablesort-asc"),e.sortExpression[i][2]=!1):(r.removeClass("tablesort-asc"),r.addClass("tablesort-desc"),e.sortExpression[i][2]=!0),s=!0);s||(r.addClass("tablesort-asc"),e.sortExpression.push(l)),e.$emit("tablesort:sortOrder",e.sortExpression.map(function(t){return{name:t[3],order:t[2]}}))},this.setTrackBy=function(t){e.trackBy=t},this.registerHeading=function(t){e.headings.push(t)},this.addFilterField=function(t,r){var n=a(t);e.filtering.filterFields.push(n)},this.setArrayExpr=function(t){e.itemsArrayExpression=t}}],link:function(a,o,i,s){if(i.tsItemName){var l="No "+a.itemNamePlural;a.itemNameSingular=i.tsItemName,i.tsItemNamePlural?a.itemNamePlural=i.tsItemNamePlural:a.itemNamePlural=i.tsItemName+"s",i.tsNoDataText||a.noDataText!==l||(a.noDataText="No "+a.itemNamePlural)}if(i.tsNoDataText&&(a.noDataText=i.tsNoDataText),i.tsWrappingElementClass&&(a.wrappingElementClass=i.tsWrappingElementClass),i.tsPerPageOptions&&(a.pagination.perPageOptions=a.$eval(i.tsPerPageOptions)),i.tsPerPageDefault){var u=a.$eval(i.tsPerPageDefault);isNaN(u)||(a.pagination.perPage=u,a.pagination.perPageOptions.indexOf(a.pagination.perPage)===-1&&(a.pagination.perPageOptions.push(a.pagination.perPage),a.pagination.perPageOptions.sort(function(t,e){return t-e})))}if(i.tsFilterFields)for(var c=i.tsFilterFields.split(",").filter(function(t){return t&&""!==t.trim()}),d=0;d<c.length;d+=1)s.addFilterField(c[d]);var g;if("false"!==i.tsDisplayFiltering&&""!==a.filtering.template&&a.filtering.filterFields.length>0){var f=r(a,a.filtering.template);g=e(f)(a),o.parent()[0].insertBefore(g[0],o[0])}i.tsFilterFunction&&(a.filtering.filterFunction=a.$eval(i.tsFilterFunction)),angular.isFunction(a.filtering.filterFunction)||(0===a.filtering.filterFields.length?a.filtering.filterFunction=function(t){return!0}:a.filtering.filterFunction=function(t){for(var e=!1,r=0;r<a.filtering.filterFields.length;r+=1)if(!e){var n=(a.filtering.filterFields[r][0](t)||"").toString().toLowerCase();e=n.indexOf(a.filtering.filterString.toLowerCase())>-1}return e}),a.filterLimitFun=function(t){if(!i.tsFilterFunction&&""===a.filtering.filterString)return a.filtering.filteredCount=t.length,t;var e=t.filter(a.filtering.filterFunction);return a.filtering.filteredCount=e.length,e},a.sortFun=function(t,e){var r,o,i,s,l,u;for(r=0;r<a.sortExpression.length;r+=1){if(o=a.sortExpression[r][0](t),i=a.sortExpression[r][0](e),l=e[a.sortExpression[r][1]],l&&(o=l(o),i=l(i)),void 0!==o&&null!==o||(o=""),void 0!==i&&null!==i||(i=""),s=a.sortExpression[r][2],u=(a.sortExpression[r][4]||n)(o,i),1===u)return s?-1:1;if(u===-1)return s?1:-1}if(a.trackBy){if(o=t[a.trackBy],i=e[a.trackBy],void 0!==o&&null!==o||(o=""),void 0!==i&&null!==i||(i=""),u=n(o,i),1===u)return s?-1:1;if(u===-1)return s?1:-1}return 0},a.pageLimitFun=function(t){if("false"===i.tsDisplayPagination||""===a.pagination.template)return t;for(var e=(a.pagination.currentPage-1)*a.pagination.perPage,r=a.pagination.currentPage*a.pagination.perPage,n=[],o=0;o<t.length;o++)o>=e&&o<r&&n.push(t[o]);return n};var p;if("false"!==i.tsDisplayPagination&&""!==a.pagination.template){var h=r(a,a.pagination.template);p=e(h)(a),o.after(p)}var m;if(a.wrappingElementClass&&""!==a.wrappingElementClass&&(m=o.wrap("<div class='"+a.wrappingElementClass+"' />")),i.tsGetTableDataFunction){var v=t(i.tsGetTableDataFunction),b=v.assign,$=function(e,r,n){var o=t(a.itemsArrayExpression)(a);return e&&(o=o.sort(a.sortFun)),r&&(o=a.filterLimitFun(o)),n&&(o=a.pageLimitFun(o)),o};b(a.$parent,$)}a.$on("$destroy",function(){g&&g.remove(),p&&p.remove(),m&&m.replaceWith(o)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(t,e,r,a){var n=function(n){t.$apply(function(){n.shiftKey?a.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy):a.setSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)})};e.bind("click",n),e.addClass("tablesort-sortable"),"tsDefault"in r&&"0"!==r.tsDefault&&(a.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy),"descending"===r.tsDefault&&a.addSortField(r.tsCriteria,e,r.tsName,t.tsOrderBy)),"tsFilter"in r&&a.addFilterField(r.tsCriteria,e),a.registerHeading(e)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function(t,e){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(r,a,n,o){for(var i=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],s=i[0],l="ts-repeat",u=0;u<i.length;u++)if(angular.isDefined(a.attr(i[u]))){s=i[u],l=s.replace(/^(data-)?ng/,"$1ts");break}var c="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",d=a.attr(s),g=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,f=d.match(/\s+track\s+by\s+\S+?\.(\S+)/),p=d.match(g);if(f&&o.setTrackBy(f[1]),d.search(/tablesort/)!==-1?(d=d.replace(/tablesort/,c),f&&(d=d.replace(f[0],"")+f[0])):d=d.replace(g,"$1 in $2 | "+c+"$3"),angular.isUndefined(n.tsHideNoData)){var h=e.startSymbol(),m=e.endSymbol(),v=angular.element(a[0]).clone();v.removeAttr(s),v.removeAttr(l),v.addClass("showIfLast"),v.children().remove(),v.append('<td colspan="'+a[0].childElementCount+'">'+h+"noDataText"+m+"</td>"),v=t(v)(r),a.parent().prepend(v)}o.setArrayExpr(p[2]),angular.element(a[0]).attr(s,d),t(a,null,1e6)(r)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(t,e){if(t)return e(t)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(t,e){if(t){var r=t.concat();return r.sort(e)}}}),tableSortModule.filter("parseInt",function(){return function(t){return parseInt(t)||null}}),tableSortModule.filter("parseFloat",function(){return function(t){return parseFloat(t)||null}}),tableSortModule.filter("parseDate",function(){return function(t){var e=Date.parse(t);return isNaN(e)?null:e}}),angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(t,e,r){function a(t,a){var n;r.$observe(t,function(){a=a||"fa-"+t,e.removeClass(o[t]),r[t]&&(n=[a,r[t]].join("-"),e.addClass(n),o[t]=n)})}function n(t,a){var n;r.$observe(t,function(){a=a||"fa-"+t,n=t in r&&"false"!==r[t]&&r[t]!==!1,e.toggleClass(a,n)})}var o={};a("name","fa"),a("rotate"),a("flip"),a("stack"),r.$observe("size",function(){var t;e.removeClass(o.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),o.size=t}),r.$observe("stack",function(){var t;e.removeClass(o.stack),"large"===r.stack?t="fa-stack-lg":isNaN(parseInt(r.stack,10))||(t="fa-stack-"+r.stack+"x"),e.addClass(t),o.stack=t}),n("border"),n("fw"),n("inverse"),n("spin"),e.toggleClass("fa-li",e.parent()&&"LI"===e.parent().prop("tagName")&&e.parent().parent()&&e.parent().parent().hasClass("fa-ul")&&e.parent().children()[0]===e[0]&&"false"!==r.list&&r.list!==!1),r.$observe("alt",function(){var t=r.alt,a=e.next(),n="fa-alt-text";
t?(e.removeAttr("alt"),a&&a.hasClass(n)||(e.after('<span class="sr-only fa-alt-text"></span>'),a=e.next()),a.text(t)):a&&a.hasClass(n)&&a.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(t,e,r){function a(t,a){var o;r.$observe(t,function(){a=a||"fa-"+t,e.removeClass(n[t]),r[t]&&(o=[a,r[t]].join("-"),e.addClass(o),n[t]=o)})}var n={};a("size"),r.$observe("size",function(){var t;e.removeClass(n.size),"large"===r.size?t="fa-lg":isNaN(parseInt(r.size,10))||(t="fa-"+r.size+"x"),e.addClass(t),n.size=t})}}}),function(t,e,r,a){function n(e,r){this.options=t.extend({},i,r),this._defaults=i,this._name=o,this.$element=t(e),this.init()}var o="menuButton",i={propertyName:"value"};n.prototype={constructor:n,init:function(){this.toggle()},toggle:function(t,e){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},t.fn[o]=function(e){return this.each(function(){t.data(this,"plugin_"+o)?t.data(this,"plugin_"+o).toggle():t.data(this,"plugin_"+o,new n(this,e))})},t(r).on("click",function(e){t.each(t("[data-buttons=dropdown]"),function(r,a){t(e.target.offsetParent)[0]!=t(this)[0]&&t.data(this,"plugin_"+o)&&(t.data(this,"plugin_"+o).hideMenu(),t(this).find("ul").hide())})}),t(r).on("click","[data-buttons=dropdown]",function(e){var r=t(e.currentTarget);r.menuButton()}),t(r).on("click","[data-buttons=dropdown] > a",function(t){t.preventDefault()})}(jQuery,window,document),angular.module("angularPayments",[]),angular.module("angularPayments").factory("Common",[function(){var t={};return t.parseExpiry=function(t){var e,r,a,n;return t=t||"",t=t.replace(/\s/g,""),n=t.split("/",2),e=n[0],a=n[1],2===(null!=a?a.length:void 0)&&/^\d+$/.test(a)&&(r=(new Date).getFullYear(),r=r.toString().slice(0,2),a=r+a),e=parseInt(e,10),a=parseInt(a,10),{month:e,year:a}},t}]),angular.module("angularPayments").factory("Cards",[function(){var t=/(\d{1,4})/g,e=/(?:^|\s)(\d{4})$/,r=[{type:"maestro",pattern:/^(5018|5020|5038|6304|6759|676[1-3])/,format:t,inputFormat:e,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"dinersclub",pattern:/^(36|38|30[0-5])/,format:t,inputFormat:e,length:[14],cvcLength:[3],luhn:!0},{type:"laser",pattern:/^(6706|6771|6709)/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!0},{type:"jcb",pattern:/^35/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^62/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"discover",pattern:/^(6011|65|64[4-9]|622)/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^5[1-5]/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,inputFormat:/^(\d{4}|\d{4}\s\d{6})$/,length:[15],cvcLength:[3,4],luhn:!0},{type:"visa",pattern:/^4/,format:t,inputFormat:e,length:[13,14,15,16],cvcLength:[3],luhn:!0}],a=function(t){var e,a,n;for(t=(t+"").replace(/\D/g,""),a=0,n=r.length;a<n;a++)if(e=r[a],e.pattern.test(t))return e},n=function(t){var e,a,n;for(a=0,n=r.length;a<n;a++)if(e=r[a],e.type===t)return e};return{fromNumber:function(t){return a(t)},fromType:function(t){return n(t)},defaultFormat:function(){return t},defaultInputFormat:function(){return e}}}]),angular.module("angularPayments").factory("_Format",["Cards","Common","$filter",function(t,e,r){var a={},n=function(t){var e;return null!=t.prop("selectionStart")&&t.prop("selectionStart")!==t.prop("selectionEnd")||!("undefined"==typeof document||null===document||null==(e=document.selection)||"function"!=typeof e.createRange||!e.createRange().text)},o=function(e){var r,a,n,o,i,s,l;if(n=String.fromCharCode(e.which),r=angular.element(e.currentTarget),l=r.val(),a=t.fromNumber(l+n),o=(l.replace(/\D/g,"")+n).length,s=16,a&&(s=a.length[a.length.length-1]),!(o>=s)){if(!/^\d+$/.test(n)&&!e.meta&&e.keyCode>=46)return void e.preventDefault();if(null==r.prop("selectionStart")||r.prop("selectionStart")===l.length)return i=t.defaultInputFormat(),a&&(i=a.inputFormat),i.test(l)?(e.preventDefault(),r.val(l+" "+n)):i.test(l+n)?(e.preventDefault(),r.val(l+n+" ")):void 0}},i=function(e){var r,a,o,i;r=angular.element(e.currentTarget),o=String.fromCharCode(e.which),/^\d+$/.test(o)&&(n(r)||(i=(r.val()+o).replace(/\D/g,""),a=t.fromNumber(i),a?i.length<=a.length[a.length.length-1]||e.preventDefault():i.length<=16||e.preventDefault()))},s=function(t){var e,r;if(e=angular.element(t.currentTarget),r=e.val(),!t.meta&&8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length))return/\d\s$/.test(r)&&!t.meta&&t.keyCode>=46?(t.preventDefault(),e.val(r.replace(/\d\s$/,""))):/\s\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\d?$/,""))):void 0},l=function(e){var r,a,n,o;return(r=t.fromNumber(e))?(n=r.length[r.length.length-1],e=e.replace(/\D/g,""),e=e.slice(0,+n+1||9e9),r.format.global?null!=(o=e.match(r.format))?o.join(" "):void 0:(a=r.format.exec(e),null!=a&&a.shift(),null!=a?a.join(" "):void 0)):e},u=function(t){return setTimeout(function(){var e,r;return e=angular.element(t.target),r=e.val(),r=l(r),e.val(r)})},c=function(t){return null!=t?t.replace(/\s/g,""):t};a.card=function(t,e){t.bind("keypress",i),t.bind("keypress",o),t.bind("keydown",s),t.bind("paste",u),e.$parsers.push(c),e.$formatters.push(l)},_formatCVC=function(t){return $target=angular.element(t.currentTarget),digit=String.fromCharCode(t.which),!/^\d+$/.test(digit)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(val=$target.val()+digit,val.length<=4?void 0:void t.preventDefault())},a.cvc=function(t){t.bind("keypress",_formatCVC)},_restrictExpiry=function(t){var e,r,a;return e=angular.element(t.currentTarget),r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():n(e)?void 0:(a=e.val()+r,a=a.replace(/\D/g,""),a.length>6?void t.preventDefault():void 0)},_formatExpiry=function(t){var e,r,a;return r=String.fromCharCode(t.which),!/^\d+$/.test(r)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(e=angular.element(t.currentTarget),a=e.val()+r,/^\d$/.test(a)&&"0"!==a&&"1"!==a?(t.preventDefault(),e.val("0"+a+" / ")):/^\d\d$/.test(a)?(t.preventDefault(),e.val(""+a+" / ")):void 0)},_formatForwardExpiry=function(t){var e,r,a;if(r=String.fromCharCode(t.which),/^\d+$/.test(r)||t.meta||!(t.keyCode>=46))return e=angular.element(t.currentTarget),a=e.val(),/^\d\d$/.test(a)?e.val(""+a+" / "):void 0},_formatForwardSlash=function(t){var e,r,a;if(r=String.fromCharCode(t.which),"/"===r)return e=angular.element(t.currentTarget),a=e.val(),/^\d$/.test(a)&&"0"!==a?e.val("0"+a+" / "):void 0},_formatBackExpiry=function(t){var e,r;if(!t.meta&&(e=angular.element(t.currentTarget),r=e.val(),8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===r.length)))return/\d(\s|\/)+$/.test(r)?(t.preventDefault(),e.val(r.replace(/\d(\s|\/)*$/,""))):/\s\/\s?\d?$/.test(r)?(t.preventDefault(),e.val(r.replace(/\s\/\s?\d?$/,""))):void 0};var d=function(t){if(null!=t){var a=e.parseExpiry(t),n=new Date(a.year,a.month-1);return r("date")(n,"MM/yyyy")}return null},g=function(t){if(null!=t){var a=e.parseExpiry(t),n=new Date(a.year,a.month-1);return r("date")(n,"MM / yyyy")}return null};return a.expiry=function(t,e){t.bind("keypress",_restrictExpiry),t.bind("keypress",_formatExpiry),t.bind("keypress",_formatForwardSlash),t.bind("keypress",_formatForwardExpiry),t.bind("keydown",_formatBackExpiry),e.$parsers.push(d),e.$formatters.push(g)},function(t,e,r){if(!a[t])throw types=Object.keys(a),errstr='Unknown type for formatting: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return a[t](e,r)}}]).directive("paymentsFormat",["$window","_Format",function(t,e){return{restrict:"A",require:"ngModel",link:function(t,r,a,n){e(a.paymentsFormat,r,n)}}}]),angular.module("angularPayments").factory("_Validate",["Cards","Common","$parse",function(t,e,r){var a=[].indexOf||function(t){for(var e=0,r=this.length;e<r;e++)if(e in this&&this[e]===t)return e;return-1},n=function(t){var e,r,a,n,o,i;for(a=!0,n=0,r=(t+"").split("").reverse(),o=0,i=r.length;o<i;o++)e=r[o],e=parseInt(e,10),(a=!a)&&(e*=2),e>9&&(e-=9),n+=e;return n%10===0},o={};return o.cvc=function(e,n,o,i){var s,l;if(null==e||0==e.length)return!0;if(!/^\d+$/.test(e))return!1;var u;if(i.paymentsTypeModel){var c=r(i.paymentsTypeModel);u=c(o)}return u?(s=e.length,a.call(null!=(l=t.fromType(u))?l.cvcLength:void 0,s)>=0):e.length>=3&&e.length<=4},o.card=function(e,o,i,s){var l,u,c;s.paymentsTypeModel&&(c=r(s.paymentsTypeModel));var d=function(){c&&c.assign(i,null),o.$card=null};return null==e||0==e.length?(d(),!0):(e=(e+"").replace(/\s+|-/g,""),/^\d+$/.test(e)&&(l=t.fromNumber(e))?(o.$card=angular.copy(l),c&&c.assign(i,l.type),ret=(u=e.length,a.call(l.length,u)>=0&&(l.luhn===!1||n(e))),ret):(d(),!1))},o.expiry=function(t){if(null==t||0==t.length)return!0;obj=e.parseExpiry(t),month=obj.month,year=obj.year;var r,a,n;return!(!month||!year)&&(!!/^\d+$/.test(month)&&(!!/^\d+$/.test(year)&&(parseInt(month,10)<=12&&(2===year.length&&(n=(new Date).getFullYear(),n=n.toString().slice(0,2),year=n+year),a=new Date(year,month),r=new Date,a.setMonth(a.getMonth()-1),a.setMonth(a.getMonth()+1,1),a>r))))},function(t,e,r,a,n){if(!o[t])throw types=Object.keys(o),errstr='Unknown type for validation: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return o[t](e,r,a,n)}}]).factory("_ValidateWatch",["_Validate",function(t){var e={};return e.cvc=function(e,r,a,n){n.paymentsTypeModel&&a.$watch(n.paymentsTypeModel,function(o,i){if(o!=i){var s=t(e,r.$modelValue,r,a,n);r.$setValidity(e,s)}})},function(t,r,a,n){if(e[t])return e[t](t,r,a,n)}}]).directive("paymentsValidate",["$window","_Validate","_ValidateWatch",function(t,e,r){return{restrict:"A",require:"ngModel",link:function(t,a,n,o){var i=n.paymentsValidate;r(i,o,t,n);var s=function(r){var a=e(i,r,o,t,n);return o.$setValidity(i,a),a?r:void 0};o.$formatters.push(s),o.$parsers.push(s)}}}]),angular.module("angularPayments").directive("stripeForm",["$window","$parse","Common",function(t,e,r){return _getDataToSend=function(t){var e=["number","expMonth","expYear","cvc","name","addressLine1","addressLine2","addressCity","addressState","addressZip","addressCountry"],r=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},a={};for(i in e)t.hasOwnProperty(e[i])&&(a[r(e[i])]=angular.copy(t[e[i]]));return a.number=(a.number||"").replace(/ /g,""),a},{restrict:"A",link:function(e,a,n){if(!t.Stripe)throw"stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html.";var o=angular.element(a);o.bind("submit",function(){expMonthUsed=!!e.expMonth,expYearUsed=!!e.expYear,expMonthUsed&&expYearUsed||(exp=r.parseExpiry(e.expiry),e.expMonth=exp.month,e.expYear=exp.year);var a=o.find("button");a.prop("disabled",!0),o.hasClass("ng-valid")?t.Stripe.createToken(_getDataToSend(e),function(){var t=arguments;e.$apply(function(){e[n.stripeForm].apply(e,t)}),a.prop("disabled",!1)}):(e.$apply(function(){e[n.stripeForm].apply(e,[400,{error:"Invalid form submitted."}])}),a.prop("disabled",!1)),e.expMonth=null,e.expYear=null})}}}]);var authWait=["Auth",function(t){return t.$waitForSignIn()}],authRequire=["Auth",function(t){return t.$requireSignIn()}];angular.module("SistersApp",["SistersCtrls","SistersDirectives","ui.router","ui.bootstrap","firebase","angularMoment","ngCart","ngStorage","angularPayments","ngAnimate","picardy.fontawesome","textAngular","ui.router.metatags","angular-parallax","angular-google-analytics","tableSort","ngFileSaver"]).run(["$rootScope","$state","$location","$window","MetaTags","Analytics",function(t,e,r,a,n,o){t.MetaTags=n,t.$on("$stateChangeError",function(t,r,a,n,o,i){"AUTH_REQUIRED"===i&&e.go("login")}),t.$on("$stateChangeSuccess",function(t){document.body.scrollTop=document.documentElement.scrollTop=0,a.ga&&a.ga("send","pageview",{page:r.path()})})}]).config(["tableSortConfigProvider",function(t){var e="<div class='row'>";e+="<div class='col-sm-4 col-md-3 col-sm-offset-8 col-md-offset-9'>",e+="<div class='form-group has-feedback'>",e+="<input type='search' class='form-control' placeholder='filter {{ITEM_NAME_PLURAL}}' ng-model='FILTER_STRING'/>",e+="<span class='glyphicon glyphicon-search form-control-feedback' aria-hidden='true'></span>",e+="</div>",e+="</div>",e+="</div>",t.filterTemplate=e;var r="<div class='text-right'>";r+="<small class='text-muted'>Showing {{CURRENT_PAGE_RANGE}} {{FILTERED_COUNT === 0 ? '' : 'of'}} ",r+="<span ng-if='FILTERED_COUNT === TOTAL_COUNT'>{{TOTAL_COUNT | number}} {{TOTAL_COUNT === 1 ? ITEM_NAME_SINGULAR : ITEM_NAME_PLURAL}}</span>",r+="<span ng-if='FILTERED_COUNT !== TOTAL_COUNT'>{{FILTERED_COUNT | number}} {{FILTERED_COUNT === 1 ? ITEM_NAME_SINGULAR : ITEM_NAME_PLURAL}} (filtered from {{TOTAL_COUNT | number}})</span>",r+="</small>&nbsp;",r+="<uib-pagination style='vertical-align:middle;' ng-if='ITEMS_PER_PAGE < TOTAL_COUNT' ng-model='CURRENT_PAGE_NUMBER' ",r+="total-items='FILTERED_COUNT' items-per-page='ITEMS_PER_PAGE' max-size='5' force-ellipses='true'></uib-pagination>&nbsp;",r+="<div class='form-group' style='display:inline-block;'>",r+="<select class='form-control' ng-model='ITEMS_PER_PAGE' ng-options='opt as (opt + \" per page\") for opt in PER_PAGE_OPTIONS'></select>",r+="</div>",r+="</div>",t.paginationTemplate=r}]).config(["$stateProvider","$urlRouterProvider","$locationProvider","UIRouterMetatagsProvider","$provide","AnalyticsProvider",function(t,e,r,a,n,o){a.setDefaultTitle("SISTERS").setDefaultDescription('Seattle duo. "Drink Champagne", the debut album, available now!').setStaticProperties({"og:site_name":"SISTERS"}).setOGURL(!0),o.logAllCalls(!0).setAccount("UA-85668273-1"),e.otherwise("/"),t.state("home",{url:"/",metaTags:{title:"SISTERS",description:'Seattle duo. "Drink Champagne", the debut album, available now!'},templateUrl:"/views/home.html",controller:"HomeCtrl"}).state("admin",{url:"/admin",templateUrl:"/views/admin/adminMain.html",controller:"AdminMainCtrl",resolve:{currentAuth:authRequire}}).state("admin-orders",{url:"/admin/orders",templateUrl:"/views/admin/adminOrders.html",controller:"AdminOrdersCtrl",resolve:{currentAuth:authRequire,Orders:["GetAllOrders",function(t){return t().$loaded()}]}}).state("admin-tickets",{url:"/admin/tickets",templateUrl:"/views/admin/adminTickets.html",controller:"AdminTicketsCtrl",resolve:{currentAuth:authRequire,Tickets:["GetAllTickets",function(t){return t().$loaded()}]}}).state("admin-ticket-each",{url:"/admin/tickets/:id",templateUrl:"/views/admin/adminTicketEach.html",controller:"AdminTicketsEachCtrl",resolve:{currentAuth:authRequire,ThisTicket:["GetSingleTicket","$stateParams",function(t,e){return t(e.id).$loaded()}],WillCall:["ThisWillCall","$stateParams",function(t,e){return t(e.id).$loaded()}]}}).state("about",{url:"/about",templateUrl:"/views/about.html",controller:"AboutCtrl"}).state("press",{url:"/press",templateUrl:"/views/press.html",controller:"PressCtrl"}).state("contact",{url:"/contact",templateUrl:"/views/contact.html",controller:"ContactCtrl"}).state("download",{url:"/download/:id",resolve:{downloadKey:["DownloadKeyService","$stateParams",function(t,e){return t(e.id).$loaded()}]},onEnter:["$state","$stateParams","$timeout","downloadKey",function(t,e,r,a){a===!0?r(function(){console.log("success!")},0):r(function(){console.log("failed!")},0)}]}).state("blog",{templateUrl:"/views/blog/blog.html",controller:"BlogMasterCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(t){return t().$loaded()}]}}).state("blog-new",{url:"/blog/new",templateUrl:"/views/blog/newBlogPost.html",controller:"NewBlogCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(t){return t().$loaded()}]}}).state("blog-edit",{url:"/blog/edit/:slug",templateUrl:"/views/blog/editBlogPost.html",controller:"EditBlogCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(t){return t().$loaded()}],thisPost:["$stateParams","ThisPostService",function(t,e){return e(t.slug).$loaded()}]}}).state("blog-tags-edit",{url:"/blog/editTags/",templateUrl:"/views/blog/editTags.html",controller:"EditBlogTagsCtrl",resolve:{currentAuth:authRequire,AllTags:["AllTagsService",function(t){return t().$loaded()}]}}).state("blog.main",{url:"/blog",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogCtrl",resolve:{currentAuth:authWait}}).state("blog.page",{url:"/blog/:page",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogCtrl",resolve:{currentAuth:authWait}}).state("blog.archive",{url:"/blog/archives/:year/:month",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogArchiveCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(t){return t().$loaded()}],Archive:["$stateParams","ArchiveShowService",function(t,e){return e(t.year,t.month).$loaded()}]}}).state("blog.archivePage",{url:"/blog/archives/:year/:month/:page",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogArchiveCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(t){return t().$loaded()}],Archive:["$stateParams","ArchiveShowService",function(t,e){return e(t.year,t.month).$loaded()}]}}).state("blog.tags",{url:"/blog/tags/:tagName",metaTags:{title:"SISTERS - Blog",description:"Updates, news, and commentary from Seattle band SISTERS."},templateUrl:"/views/blog/blog-content.html",controller:"BlogTagsCtrl",resolve:{currentAuth:authWait,Blog:["BlogPosts",function(t){return t().$loaded()}],TagsShow:["$stateParams","TagsShowService",function(t,e){return e(t.tagName).$loaded()}]}}).state("blog.show",{url:"/blog/show/:slug",templateUrl:"/views/blog/blog-content.html",controller:"BlogShowCtrl",resolve:{currentAuth:authWait,thisPost:["$stateParams","ThisPostService",function(t,e){return e(t.slug).$loaded()}],Blog:["BlogPosts",function(t){return t().$loaded()}]},metaTags:{title:function(t){console.log("what is Blog? ",t);var e="SISTERS - "+t[0].postTitle;return e},description:function(t){return t[0].postBody}}}).state("shows",{url:"/shows",metaTags:{title:"SISTERS - Shows",description:"Upcoming shows for Seattle duo SISTERS."},templateUrl:"/views/shows/shows.html",controller:"ShowsCtrl",resolve:{currentAuth:authWait,getShows:["GetShows",function(t){return console.log("app resolve entered"),t().$loaded()}]}}).state("shows-new",{url:"/shows/new",templateUrl:"/views/shows/newShow.html",controller:"NewShowCtrl",resolve:{currentAuth:authWait,getShows:["GetShows",function(t){return console.log("app resolve entered"),t().$loaded()}]}}).state("showTickets",{url:"/shows/:showId",templateUrl:"/views/shows/singleShow.html",controller:"SingleShowCtrl",resolve:{currentAuth:authWait,GetShow:["GetSingleShow","$stateParams",function(t,e){return t(e.showId).$loaded()}],GetTicket:["GetTicket","$stateParams",function(t,e){return t(e.showId).$loaded()}]}}).state("storeCart",{url:"/store/cart",templateUrl:"/views/store/cart.html",controller:"StoreCartCtrl",resolve:{currentAuth:authWait}}).state("checkout",{templateUrl:"/views/store/checkoutTemplate.html",controller:"CheckoutTemplateCtrl",resolve:{currentAuth:authWait}}).state("checkout.address",{url:"/store/checkout/address",templateUrl:"/views/store/checkoutAddress.html",controller:"StoreAddressCtrl",resolve:{currentAuth:authWait}}).state("checkout.payment",{url:"/store/checkout/payment",templateUrl:"/views/store/checkoutPayment.html",controller:"StorePaymentCtrl",resolve:{currentAuth:authWait,currentOrder:["CurrentOrderService",function(t){return t.get()}]}}).state("checkout.confirm",{url:"/store/checkout/confirm",templateUrl:"/views/store/checkoutConfirm.html",controller:"StoreConfirmCtrl",resolve:{currentAuth:authWait,AllTickets:["GetAllTickets",function(t){return t().$loaded()}]}}).state("login",{url:"/login",templateUrl:"/views/login.html",controller:"LoginCtrl"}),r.html5Mode(!0)}]).filter("cut",function(){return function(t,e,r,a,n){var o=angular.element("<div/>").html(t);console.log("source: ",o);var i=o.text().length;console.log("length: ",i)}}).filter("trustAsResourceUrl",["$sce",function(t){return function(e){return t.trustAsResourceUrl("https://www.youtube.com/embed/"+e)}}]).filter("MomentFilter",["moment",function(t){return function(e){return t(e).format("dddd, MMMM Do, YYYY")}}]).filter("tooOld",function(){return function(t){var e=moment().unix(),r=[];return angular.forEach(t,function(t){var a=t.unixDate/1e3;e-a<=86400&&r.push(t)}),r}}).filter("DeliveryEstDate",["moment",function(t){return function(e){return t(e).format("dddd, MMMM Do")}}]).filter("TimeDate",["moment",function(t){return function(e){return t(e).format("MMMM Do YYYY, h:mm:ss a")}}]).filter("slashDate",["moment",function(t){return function(e){return t(1e3*e).format("MM/DD/YYYY")}}]).filter("timeAgo",["moment",function(){return function(t){var e=new Date(t);return console.log(e),console.log(typeof e),moment(e).fromNow()}}]).filter("reverse",function(){return function(t){return t.slice().reverse()}}).filter("centsToDollars",function(){return function(t){return t/100}}),angular.module("SistersCtrls",["SistersServices"]).controller("MainCtrl",["$scope","$state","$timeout","$http",function(t,e,r,a){t.$on("loadMainContainer",function(e,r){"loaded"===r?t.mainLoaded=!0:t.mainLoaded=!1})}]).controller("HomeCtrl",["$scope","$state","$timeout","$http","LoadedService",function(t,e,r,a,n){var o=document.getElementById("main");o.style.backgroundColor="rgba(247, 237, 245, 0)",o.style.width="",o.style.padding="",o.style.paddingBottom="400px",t.loaded=n.get();var i=window.innerWidth;!t.loaded&&i>806?r(function(){t.$emit("loadMainContainer","loaded"),t.fadeHome=!0,n.set(!0)},2500):r(function(){t.$emit("loadMainContainer","loaded"),t.fadeHome=!0,n.set(!0)},2500),t.mailchimpSubmit=function(e,r,n){if(e.$valid){t.isPopup=!1;var o="//sisterstheband.us14.list-manage.com/subscribe/post-json?u=bc38720b0bcc7a32641bb572c&amp;id=242f4adc89&EMAIL="+r+"&c=JSON_CALLBACK";a.jsonp(o).then(function(e){console.log(e),t.user={},n&&(t.mailConfirm=!0)},function(t){console.log(t)})}}}]).controller("AboutCtrl",["$scope","$state","$timeout",function(t,e,r){var a=document.getElementById("main");a.style.backgroundColor="rgba(255, 255, 255, 1)",a.style.padding="0 0 176px 0",a.style.width="100%",t.$emit("loadMainContainer","loaded")}]).controller("ContactCtrl",["$scope","$state","$timeout",function(t,e,r){var a=document.getElementById("main");a.style.backgroundColor="rgba(255, 255, 255, 0)",a.style.padding="",a.style.width="",t.$emit("loadMainContainer","loaded")}]).controller("PressCtrl",["$scope","$state","$timeout",function(t,e,r){var a=document.getElementById("main");a.style.backgroundColor="rgba(255, 255, 255, 0)",a.style.padding="0 0 176px 0",a.style.width="90%",t.$emit("loadMainContainer","loaded")}]),angular.module("SistersCtrls").controller("LoginCtrl",["$scope","$state","Auth",function(t,e,r){var a=document.getElementById("main");a.style.backgroundColor="rgba(0,0,0,0)",t.$emit("loadMainContainer","loaded"),t.submitted=!1,t.logged=!1,r.$onAuthStateChanged(function(r){r?(t.logged=!0,e.go("home")):console.log("Not logged in.")}),t.user={},t.login=function(){t.submitted=!0,t.firebaseUser=null,r.$signInWithEmailAndPassword(t.user.email,t.user.password).then(function(e){t.firebaseUser=e}).catch(function(t){console.error("Authentication failed:",t)})}}]),angular.module("SistersCtrls").controller("NewBlogCtrl",["$scope","$state","$http","Auth","BlogPosts","AllTags","HelperService","SubmitImage","moment",function(t,e,r,a,n,o,i,s,l){var u=document.getElementById("main");u.style.backgroundColor="rgba(0,0,0,0)",t.$emit("loadMainContainer","loaded"),t.BlogPosts=n(),t.tags=o,t.checkedTags={},t.data={},t.resetMedia=function(){t.data.youtube="",t.data.image=""},t.submit=function(){console.log("submit clicked"),console.log("what is post? ",t.post),"image"===t.data.mediaSelect?s(t.post,t.BlogPosts,t.data.image,c):"youtube"===t.data.mediaSelect&&(t.data.youtube=i.parseYouTube(t.data.youtube),c(t.post,t.BlogPosts,null,t.data.youtube))},t.addTag=function(){t.tags.$add({name:t.data.newTag}).then(function(e){t.postId=e.key,console.log("what is post id? ",e.key),t.data.newTag=""})},t.resizeImg=function(t){i.imgResize(t)},t.deleteTag=function(e){t.tags.$remove(e).then(function(t){t.key===e.$id})};var c=function(r,a,n,o){var s=i.slugify(r.title),u=(new Date).getTime(),c=l(u).format("YYYY"),d=l(u).format("MMMM"),g={};for(var f in t.checkedTags)g[f]=t.checkedTags[f];var p={postTitle:r.title,slug:s,postBody:r.postBody,youtube:o?o:null,img:n?n:null,tags:g,timestamp:u};console.log("thisPost: ",p),a.$add(p).then(function(t){var r=t.key,a={key:r};firebase.database().ref("archives/"+c+"/"+d+"/"+r).set(a),e.go("blog.main")})}}]).controller("EditBlogCtrl",["$scope","$state","$timeout","$stateParams","SendDataService","AllTags","thisPost","HelperService","SubmitImage","$uibModal","$log","BlogPosts",function(t,e,r,a,n,o,i,s,l,u,c,d){var g=document.getElementById("main");if(g.style.backgroundColor="rgba(0,0,0,0)",t.$emit("loadMainContainer","loaded"),t.data={},t.postArray=i,t.post=i[0],t.originalTags=angular.copy(t.post.tags),t.tags=o,t.post.youtube){console.log(t.post.youtube);var f=t.post.youtube;t.data.youtube="https://www.youtube.com/watch?v="+f}t.confirmBlogDelete=function(t){var e=u.open({animation:!0,backdrop:!0,templateUrl:"/views/blog/deleteBlogConfirmModal.html",controller:"DeleteBlogConfirmCtrl",size:"sm",resolve:{Post:t}});e.result.then(function(){console.log("submitted modal")},function(){c.info("Modal dismissed at: "+new Date)})},t.addTag=function(){t.tags.$add({name:t.data.newTag}).then(function(e){t.postId=e.key,console.log("what is post id? ",e.key),t.data.newTag=""})},t.deleteTag=function(e){t.tags.$remove(e).then(function(t){t.key===e.$id})},t.resetMedia=function(){t.data.youtube="",t.data.image=""},t.submit=function(){"image"===t.data.mediaSelect&&t.data.image?l(t.post,t.postArray,t.data.image,p):"image"!==t.data.mediaSelect||t.data.image?"youtube"===t.data.mediaSelect&&(t.data.youtube=s.parseYouTube(t.data.youtube),p(t.post,t.BlogPosts,null,t.data.youtube)):p(t.post,t.BlogPosts,t.post.img,null)};var p=function(a,n,o,i){var l=s.slugify(a.postTitle);console.log(l);var u=moment(a.timestamp).format("YYYY"),c=moment(a.timestamp).format("MMMM"),d={};for(var g in a.tags)d[g]=a.tags[g];a.slug=l,a.tags=d,a.youtube=i?i:null,a.img=o?o:null;var f={postTitle:a.postTitle,slug:l,postBody:a.postBody,youtube:a.youtube,img:a.img,tags:d,timestamp:a.timestamp};t.postArray.$save(a).then(function(a){var n=a.key;firebase.database().ref("archives/"+u+"/"+c+"/"+n).remove(),firebase.database().ref("archives/"+u+"/"+c+"/"+n).set(f);for(g in t.originalTags)if(t.originalTags[g]===!0){var o="tags/"+g+"/posts/"+n;firebase.database().ref(o).remove().then(function(t){}).catch(function(t){console.log("Remove failed: "+t.message)})}else console.log(g+" not a tag for old edit!");r(function(){for(g in f.tags)f.tags[g]===!0?firebase.database().ref("tags/"+g+"/posts/"+n).set(f):console.log(g+" not a tag for new edit!")},100),e.go("blog.main")})}}]).controller("EditBlogTagsCtrl",["$scope","$uibModalInstance","tag","Blog",function(t,e,r,a){t.prompted=!1,t.tag=angular.copy(r),console.log(r),t.ok=function(r){var a={name:t.tag.name};firebase.database().ref("/tags/"+t.tag.$id).update(a),e.close()},t.cancel=function(){e.dismiss("cancel")},t.deletePrompt=function(){t.prompted=!0},t.delete=function(r){if("no"===r)t.prompted=!1;else if("yes"===r){firebase.database().ref("/tags/"+t.tag.$id).remove();for(var n=0;n<a.length;n++){var o=a[n].tags;o[t.tag.$id]===!0&&(o[t.tag.$id]=null,firebase.database().ref("/blog_posts/"+a[n].$id+"/tags").update(o))}e.close()}}}]).controller("DeleteBlogConfirmCtrl",["$scope","$uibModalInstance","Post","moment","$location",function(t,e,r,a,n){console.log(r),t.yes=function(){var t=a(r.timestamp).format("YYYY"),o=a(r.timestamp).format("MMMM");console.log(o+" of "+t),firebase.database().ref("blog_posts/"+r.$id).remove(),firebase.database().ref("archives/"+t+"/"+o+"/"+r.$id).remove(),e.close(),n.url("/blog")},t.no=function(){e.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("BlogMasterCtrl",["$scope","$state","$http","$timeout","$location","$stateParams","Auth","Blog","HelperService","InstagramFactory","AllTagsService","TwitterFactory",function(t,e,r,a,n,o,i,s,l,u,c,d){t.loadedInsta=!1,t.loadedTwitter=!1,t.$emit("loadMainContainer","loaded"),u.then(function(e){t.photos=e.data,t.loadedInsta=!0,t.loadedTwitter&&(t.loaded=!0)}),d.then(function(e){t.tweetDate=e.allTweetData.created_at,t.twitterUser=e.allTweetData.user.name,t.twitterHandle=e.allTweetData.user.screen_name,t.tweetId=e.allTweetData.id_str,t.tweet=e.tweetBody,t.favorites=e.favorites,t.retweets=e.retweets,t.loadedTwitter=!0,t.loadedInsta&&(t.loaded=!0)}),t.enable=!0,t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e})}]).controller("BlogCtrl",["$scope","$state","$http","$timeout","$location","$stateParams","Auth","Blog","HelperService","InstagramFactory","AllTagsService",function(t,e,r,a,n,o,i,s,l,u,c){var d=document.getElementById("main");d.style.backgroundColor="rgba(255,255,255,0)",d.style.width="",d.style.padding="0",t.$emit("loadMainContainer","loaded"),t.allTags=c(),t.location=n.$$path,u.then(function(e){t.photos=e.data,t.loaded=!0}),t.enable=!0,t.parseTitle=l.titleToURL,t.allPosts=s,t.page=o.page||0,t.pageUp="/blog/"+(parseInt(t.page)+1),t.pageDown="/blog/"+l.pageDown(t.page),t.length=s.length,t.first=l.findFirst(t.length,t.page),t.last=t.length-4*t.page,t.posts=s.slice(t.first,t.last),t.editPost=function(t){n.url("/blog/edit/"+t)}}]).controller("BlogArchiveCtrl",["$scope","$state","$timeout","$stateParams","$location","Blog","Archive","Auth","HelperService","AllTagsService",function(t,e,r,a,n,o,i,s,l,u){t.$emit("loadMainContainer","notLoaded"),t.location=n.$$path,t.allTags=u(),t.enable=!0,t.fullBlog=o;for(var c=[],d=0;d<i.length;d++)for(var g=i[d].$id,f=0;f<o.length;f++){var p=o[f].$id;g===p&&c.push(o[f])}t.allPosts=c,t.params=a,t.parseTitle=l.titleToURL,t.auth=s,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.page=a.page||0,t.pageUp="/blog/archives/"+a.year+"/"+a.month+"/"+(parseInt(t.page)+1),t.pageDown="/blog/archives/"+a.year+"/"+a.month+"/"+l.pageDown(t.page),t.length=t.allPosts.length,t.first=l.findFirst(t.length,t.page),t.last=t.length-4*t.page,t.posts=t.allPosts.slice(t.first,t.last),r(function(){t.$emit("loadMainContainer","loaded"),t.loaded=!0}),t.editPost=function(t){var e=l.titleToURL(t.postTitle);n.url("/blog/edit/"+e)}}]).controller("BlogTagsCtrl",["$scope","$state","$stateParams","$location","$timeout","Blog","TagsShow","Auth","HelperService","AllTagsService",function(t,e,r,a,n,o,i,s,l,u){t.$emit("loadMainContainer","notLoaded"),t.location=a.$$path,t.allTags=u(),t.enable=!0,t.tagName=i[0].name;for(var c=i[0].$id,d=[],g=0;g<o.length;g++){var f=o[g].tags;f[c]&&d.push(o[g])}t.auth=s,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.page=r.page||0,t.pageUp="/blog/tags/"+r.tagName+"/"+(parseInt(t.page)+1),t.pageDown="/blog/tags/"+r.tagName+"/"+l.pageDown(t.page),t.length=length,t.first=l.findFirst(t.length,t.page),t.last=t.length-4*t.page,t.posts=d.slice(t.first,t.last),n(function(){t.$emit("loadMainContainer","loaded"),t.loaded=!0}),t.editPost=function(t){var e=l.titleToURL(t.postTitle);a.url("/blog/edit/"+e)}}]).controller("BlogShowCtrl",["$scope","$state","$stateParams","$location","$timeout","thisPost","Blog","AllTagsService",function(t,e,r,a,n,o,i,s){
t.$emit("loadMainContainer","notLoaded"),t.location=a.$$path,t.allTags=s(),t.enable=!1,t.recentPosts=i,t.posts=o,t.allPosts=o,n(function(){t.$emit("loadMainContainer","loaded"),t.loaded=!0})}]).controller("BlogSidebarCtrl",["$scope","$state","$stateParams","$timeout","ArchiveService","AllTagsService","BlogPosts","HelperService","$uibModal","$log",function(t,e,r,a,n,o,i,s,l,u){t.recentPosts=i(),t.parseTitle=s.titleToURL,t.years=n.years(),t.years.$loaded().then(function(){console.log(t.years),t.monthObj={};for(var e=0;e<t.years.length;e++)t.monthObj[t.years[e].$id]=n.months(t.years[e].$id);a(function(){console.log(t.monthObj)},7e3)}),t.allTags=o(),t.newBlogPost=function(){e.go("blog-new")},t.editTag=function(t){var e=l.open({animation:!0,backdrop:!0,templateUrl:"/views/blog/editTagsModal.html",controller:"EditBlogTagsCtrl",size:"lg",resolve:{Blog:["BlogPosts",function(t){return t().$loaded()}],tag:t}});e.result.then(function(){},function(){u.info("Modal dismissed at: "+new Date)})}}]),angular.module("SistersCtrls").controller("editModalCtrl",["$scope","$uibModalInstance","editShow","index","$firebaseArray",function(t,e,r,a,n){t.shows=r,t.show=r[a],console.log("index is ",a),t.dateObj=new Date(1e3*t.show.unix),console.log(t.dateObj),t.ok=function(){t.show.date=moment(t.dateObj).format("ddd, MMMM Do"),t.show.unix=t.dateObj.getTime()/1e3,t.shows.$save(t.show).then(function(t){console.log("success")},function(t){console.log("Error:",t)}),e.close()},t.cancel=function(){e.dismiss("cancel")},t.delete=function(){t.shows.$remove(t.show).then(function(t){console.log("successful delete: ",t)},function(t){console.log("error: ",t)}),e.close()}}]).controller("newModalCtrl",["$scope","$uibModalInstance","$firebaseArray",function(t,e,r){t.show={};var a=firebase.database().ref("shows");t.showsArray=r(a),t.ok=function(){var r=moment(t.show.showDate).format("ddd, MMMM Do YYYY"),a=t.show.showDate.getTime()/1e3;console.log(r);var n={date:r,unix:a,location:t.show.showLocation,venue:t.show.venue,venueLink:t.show.venueLink||"",ticketLink:t.show.ticketLink||""};console.log(n),t.showsArray.$add(n),e.close()},t.cancel=function(){e.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("NavCtrl",["$scope","$timeout","$log","$uibModal","$http","Auth","$state","$sessionStorage","$location","$window",function(t,e,r,a,n,o,i,s,l,u){t.auth=o,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.user={},t.mailConfirm=!1;var c=window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth,d=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight;t.height=d;var g=document.getElementById("mobile-background-div");c<900?g.style.height=d+"px":g.style.height="0px",!t.loaded&&c>806?t.mobileWidth=!1:t.mobileWidth=!0,e(function(){if(null===t.firebaseUser&&"/login"!==l.$$path){if(!document.getElementById("overlayMail")){var e=document.createElement("div");e.id="overlayMail",e.className="overlay-start";var r=document.body,a=document.querySelector("#pop-up");e.style.height=r.scrollHeight+"px",a.appendChild(e);var n=document.querySelector("#overlayMail");n.classList.add("active")}t.isPopup=!0}},6e3),t.closePopup=function(){t.isPopup=!1},t.toStore=function(){t.isPopup=!1,e(function(){u.open("https://iheartsisters.bandcamp.com/")},300)},t.toggle=!0;var f=window.innerWidth;f>806?e(function(){t.fade=!0},100):t.fade=!0}]).controller("FooterCtrl",["$scope","$timeout","$log","$uibModal","$http","Auth","$state","$sessionStorage",function(t,e,r,a,n,o,i,s){t.auth=o,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.logout=function(){o.$signOut()},t.login=function(){i.go("login")};var l=window.innerWidth;l>806?e(function(){t.fade=!0},100):t.fade=!0}]).controller("MailModalCtrl",["$scope","$timeout","$uibModal","$uibModalInstance","$http","Auth","$state","$sessionStorage",function(t,e,r,a,n,o,i,s){t.close=function(){a.dismiss("cancel")}}]),angular.module("SistersCtrls").controller("ShowsCtrl",["$scope","$state","currentAuth","$log","$firebaseArray","moment","Auth","getShows","$uibModal",function(t,e,r,a,n,o,i,s,l){var u=document.getElementById("main");u.style.backgroundColor="rgba(252, 244, 247, 0)",u.style.width="",u.style.padding="",t.$emit("loadMainContainer","loaded"),t.shows=s,t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.open=function(e,r){var n=l.open({animation:!0,backdrop:!0,templateUrl:"/views/shows/"+e+"ShowModal.html",controller:e+"ModalCtrl",size:"lg",resolve:{editShow:function(){return t.shows},index:r}});n.result.then(function(e){t.selected=e},function(){a.info("Modal dismissed at: "+new Date)})}}]).controller("SingleShowCtrl",["$scope","$stateParams","$state","$http","$timeout","$location","$sessionStorage","GetShow","GetTicket",function(t,e,r,a,n,o,i,s,l){var u=document.getElementById("main");if(u.style.backgroundColor="rgba(252, 244, 247, 0)",u.style.width="",u.style.padding="",l.description){t.show=s,t.ticket=l,t.showUnix=1e3*t.ticket.unix,t.images=t.ticket.images;var c=t.images[0],d=document.querySelector(".main-product-photo img");d.src=t.images[0],t.$emit("loadMainContainer","loaded")}else o.url("/store");t.isActiveImg=function(){return this.img===c},t.changeActive=function(){c=this.img,d.src=this.img}}]),angular.module("SistersCtrls").controller("StoreCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","allProducts","Auth",function(t,e,r,a,n,o,i,s){var l=document.getElementById("main");l.style.backgroundColor="rgba(255,255,255,0)",l.style.width="",l.style.padding="",t.loaded=!1,t.products=i,t.auth=s,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.showProduct=function(t){e.go("storeShow",{id:t})},t.addProduct=function(){e.go("addProduct")},a(function(){t.loaded=!0,t.$emit("loadMainContainer","loaded")})}]).controller("StoreCartCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage",function(t,e,r,a,n,o){var i=document.getElementById("main");i.style.backgroundColor="rgba(255,255,255,0)",a(function(){t.$emit("loadMainContainer","loaded")},1),t.toCheckout=function(){n.url("/store/checkout/address")},t.continue=function(){n.url("/store")}}]).controller("StoreShowCtrl",["$scope","$stateParams","$state","$http","$timeout","$location","$sessionStorage","oneProduct",function(t,e,r,a,n,o,i,s){var l=document.getElementById("main");if(l.style.backgroundColor="",t.$emit("loadMainContainer","loaded"),s.description){t.product=s,t.images=s.images;var u=t.images[0];t.skus=t.product.skus.data,t.data={},t.data.selected=t.product.skus[0];var c=document.querySelector(".main-product-photo img");c.src=t.images[0]}else o.url("/store");t.isActiveImg=function(){return this.img===u},t.changeActive=function(){u=this.img,c.src=this.img}}]).controller("CheckoutTemplateCtrl",["$scope","$state","$http","$timeout","$location","$localStorage",function(t,e,r,a,n,o){t.$emit("loadMainContainer","loaded"),t.$storage=o,t.$on("pathChange",function(e,r){t.path=r}),t.$on("pathCountChange",function(e,r){t.pathCount=r})}]).controller("StoreAddressCtrl",["$scope","$state","$window","$timeout","$http","$location","$localStorage","ngCart","$rootScope","CurrentOrderService","moment",function(t,e,r,a,n,o,i,s,l,u,c){var d=document.getElementById("main");d.style.backgroundColor="rgba(247, 237, 245, 0)",t.$emit("loadMainContainer","loaded"),t.$storage=i,t.cartItems=s.getItems(),t.$on("setShippable",function(e,r){t.shipBool=r}),t.$storage.billingAddress||(t.$storage.pathCount=1),t.$emit("pathChange",o.$$path),t.$emit("pathCountChange",t.$storage.pathCount),t.loaded=[],t.data={shipping:{country:{}}},t.$storage.billingAddress?t.data.billing=t.$storage.billingAddress:t.data.billing={country:{}},t.mailingListAdd=!0,t.shippingSameBool=!1,n.get("/js/JSON/countries.json").success(function(e){t.countries=e,t.data.shipping.country=t.countries[0],t.data.billing.country=t.countries[0],t.loaded.push("go")}),n.get("/js/JSON/states.json").success(function(e){t.states=e,t.loaded.push("go")}),n.get("/js/JSON/provinces.json").success(function(e){t.provinces=e,t.loaded.push("go")}),t.isShippingSame=function(){t.data.shippingSame?(t.data.billing=t.data.shipping,t.shippingSameBool=!0):(t.data.billing={},t.shippingSameBool=!1)},t.countryChange=function(e){"US"===e.code?t.shippingType=t.shipRates.domestic:t.shippingType=t.shipRates.international},t.submitForm=function(e){if(e.$valid){t.loaded=[],g();var r={amount:s.getTax(),description:"tax: ("+s.getTaxRate()+"%)"},a=t.data.shipping,i=t.data.billing;t.$storage.billingAddress=t.data.billing,t.$storage.shippingAddress=t.data.shipping;var l=new Date,u={url:"/store/newOrder",method:"POST",params:{order:{status:"pending",dateCreated:l.getTime(),currency:"usd",items:t.cartItems,totalItemsPrice:s.getSubTotal(),tax:r,billing:{name:i.name,email:i.email,phone:i.phone,address:{line1:i.address1,line2:i.address2||null,city:i.city,state:i.stateProvince.short||null,country:i.country.code,postal_code:i.postalCode}},metadata:{taxRate:s.getTaxRate()}}}};t.shipBool?(u.params.shippable=!0,u.params.shipping={name:a.name,address:{line1:a.address1,line2:a.address2||null,city:a.city,state:a.stateProvince.short||null,country:a.country.code,postal_code:a.postalCode}}):u.params.shippable=!1;var c=Math.floor(1e5+1e9*Math.random());t.$storage.orderData=u.params.order,t.$storage.orderData.orderNumber=c,firebase.database().ref("orders/order_"+c).set(u.params.order),n(u).then(function(e){t.$storage.shippingData=e.data,t.$storage.pathCount=2,o.url("/store/checkout/payment")},function(t){console.log("error ",t)})}else console.log("form invalid!")};var g=function(){t.mailingListAdd===!0?t.$storage.mailingList=!0:t.$storage.mailingList=!1};t.getTaxRate=function(t,e,a){if("US"===t.code&&"WA"===e.short&&a)if(r.localStorage.currentWaRate){var o=parseFloat(r.localStorage.currentWaRate);s.setTaxRate(o)}else{var i={url:"/taxRate",method:"GET",params:{country:"usa",postal:a}};n(i).then(function(t){s.setTaxRate(t.data.totalRate),r.localStorage.currentWaRate=t.data.totalRate},function(t){console.log("error ",t)})}else"US"===t.code&&"WA"!==e.short?s.setTaxRate(0):"US"!==t.code&&s.setTaxRate(0)}}]).controller("StorePaymentCtrl",["$scope","$state","$http","$timeout","$location","$localStorage","ngCart","$rootScope","currentOrder",function(t,e,r,a,n,o,i,s,l){var u=document.getElementById("main");u.style.backgroundColor="rgba(247, 237, 245, 0)",t.$emit("loadMainContainer","loaded"),t.$storage=o,t.$emit("pathChange",n.$$path),t.$emit("pathCountChange",t.$storage.pathCount),t.data={},t.$on("setShippable",function(e,r){t.shipBool=r});for(var c=(t.$storage.orderData.orderNumber,t.$storage.orderData.items),d=0;d<c.length;d++)"ticket"===c[d]._data.product_type&&(t.showWillCall=!0);if(t.$storage.shippingData.rates_list){t.shipOptions=t.$storage.shippingData.rates_list,t.$storage.savedSelectedShip=t.$storage.shippingData.rates_list[0];for(var d=0;d<t.shipOptions.length;d++)if(t.shipOptions[d].object_id===t.$storage.savedSelectedShip.object_id){t.selectedShip=t.shipOptions[d];break}t.$watch("selectedShip",function(e,r,a){t.$storage.savedSelectedShip=t.selectedShip,i.setShipping(100*t.selectedShip.amount)},!1)}a(function(){t.loaded=!0}),t.submitForm=function(e){e.$valid?(t.$storage.orderData.willCallName=t.data.willCallName,t.loaded=!1,Stripe.card.createToken({number:t.number,cvc:t.cvc,exp:t.expiry,name:t.$storage.billingAddress.name,address_line1:t.$storage.billingAddress.address1,address_line2:t.$storage.billingAddress.address2||null,address_city:t.$storage.billingAddress.city,address_state:t.$storage.billingAddress.stateProvince.short||null,address_zip:t.$storage.billingAddress.postalCode,address_country:t.$storage.billingAddress.country.code},function(e,r){200!=e&&console.log("we have an error: ",e),r&&a(function(){t.$storage.tokenData=r,t.$storage.pathCount=3,t.$emit("pathCountChange",t.$storage.pathCount),n.url("/store/checkout/confirm")},1)})):console.log("form invalid!!")}}]).controller("StoreConfirmCtrl",["$scope","$state","$http","$timeout","$location","$localStorage","ngCart","$rootScope","AllTickets","WillCallListService",function(t,e,r,a,n,o,i,s,l,u){t.$on("setShippable",function(e,r){t.shipBool=r});var c=document.getElementById("main");c.style.backgroundColor="rgba(247, 237, 245, 0)",t.$emit("loadMainContainer","loaded"),t.$storage=o,t.orderComplete=!1,t.$emit("pathChange",n.$$path),t.$emit("pathCountChange",t.$storage.pathCount),t.ngCart=i;var d=t.$storage.orderData.items,g=l;t.currentShipping=t.$storage.savedSelectedShip,t.token=t.$storage.tokenData,t.shipping=t.$storage.shippingAddress,t.billing=t.$storage.billingAddress,t.order=t.$storage.orderData,a(function(){t.loaded=!0});var f=function(e,r){var a=e[r].quantity,n=u(e[r].parent);n.$add({name:t.$storage.orderData.willCallName,quantity:a}).then(function(t){var n=(t.key,firebase.database().ref("tickets/"+e[r].parent+"/totalTickets"));n.once("value").then(function(t){n.set(t.val()-a)})},function(t){console.log("what is err: ",t)})},p=function(t,e){firebase.database().ref("orders/order_"+t+"/status").set("complete"),firebase.database().ref("orders/order_"+t+"/totalItemsPrice").set(e.amount),firebase.database().ref("orders/order_"+t+"/stripeChargeId").set(e.id)};t.createCharge=function(){t.loaded=!1;var e={url:"/store/orderComplete",method:"POST",params:{totalAmount:i.totalCost(),tax:i.getTax(),token:t.token.id,name:t.token.card.name,cart:JSON.stringify(i.getItems()),order:t.$storage.orderData,shipChoice:t.currentShipping}};r(e).then(function(e){console.log(e),t.isError=!1;for(var r=0;r<d.length;r++)for(var a=0;a<g.length;a++)g[a].$id===d[r].parent&&f(d,r);p(t.$storage.orderData.orderNumber,e.data),t.$storage.mailingList===!0&&h(t.$storage.billingAddress.email),t.orderComplete=!0,t.$storage.pathCount=0,t.$emit("pathCountChange",t.$storage.pathCount),i.setTaxRate(null),i.setShipping(null),i.empty(),o.$reset(),localStorage.clear()},function(e){t.errorMessage=e.data.message,t.isError=!0,t.loaded=!0,console.log("error ",e)})};var h=function(t){var e="//sisterstheband.us14.list-manage.com/subscribe/post-json?u=bc38720b0bcc7a32641bb572c&amp;id=242f4adc89&EMAIL="+t+"&c=JSON_CALLBACK";r.jsonp(e).then(function(t){},function(t){console.log(t)})}}]),angular.module("SistersCtrls").controller("AdminMainCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth",function(t,e,r,a,n,o,i){var s=document.getElementById("main");s.style.backgroundColor="rgba(255,255,255,0)",s.style.width="",s.style.padding="0",t.$emit("loadMainContainer","loaded"),t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e})}]).controller("AdminOrdersCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","Orders","ReturnCompleteOrders","ReturnPendingOrders",function(t,e,r,a,n,o,i,s,l,u){console.log(s),t.completeOrders=l(s),t.pendingOrders=u(s),t.orders=t.completeOrders;var c=document.getElementById("main");c.style.backgroundColor="rgba(255,255,255,0)",c.style.width="",c.style.padding="0",t.$emit("loadMainContainer","loaded"),t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e})}]).controller("AdminTicketsCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","Tickets",function(t,e,r,a,n,o,i,s){var l=document.getElementById("main");l.style.backgroundColor="rgba(255,255,255,0)",l.style.width="",l.style.padding="0",t.tickets=s,t.$emit("loadMainContainer","loaded"),t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e})}]).controller("AdminTicketsEachCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth","ThisTicket","WillCall","WillCallToBlob","FileSaver","moment",function(t,e,r,a,n,o,i,s,l,u,c,d){var g=document.getElementById("main");g.style.backgroundColor="rgba(255,255,255,0)",g.style.width="",g.style.padding="0",t.ticket=s,t.ticketsSold=t.ticket.ticketCapacity-t.ticket.totalTickets,t.chartColors=["#adadad","#f891af"],t.labels=["Remaining Tickets","Tickets Sold"],t.data=[t.ticket.totalTickets,t.ticketsSold],t.$emit("loadMainContainer","loaded"),t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),t.downloadList=function(){console.log("entering!");var e=d(1e3*t.ticket.unix).format("MM/DD/YYYY"),r=t.ticket.title+" ("+e+")",a=u(l,r);c.saveAs(a,d(1e3*t.ticket.unix).format("MM-DD-YYYY")+".txt")}}]).controller("StoreProductAddCtrl",["$scope","$state","$http","$timeout","$location","$sessionStorage","Auth",function(t,e,r,a,n,o,i){var s=document.getElementById("main");s.style.backgroundColor="rgba(255,255,255,0)",s.style.width="",s.style.padding="",t.loaded=!1,t.auth=i,t.auth.$onAuthStateChanged(function(e){t.firebaseUser=e}),a(function(){t.loaded=!0,t.$emit("loadMainContainer","loaded")})}]),angular.module("SistersDirectives",[]).directive("fileread",[function(){return{scope:{fileread:"="},link:function(t,e,r){e.bind("change",function(e){var r=new FileReader;r.onload=function(e){t.$apply(function(){t.fileread=e.target.result})},r.readAsDataURL(e.target.files[0])})}}}]).directive("countryName",["$http",function(t){return{template:"<span>{{name}}</span>",scope:{countryCode:"="},link:function(e){t.get("/js/JSON/countries.json").then(function(t){for(var r=t.data,a=0;a<r.length;a++)if(r[a].code===e.countryCode){e.name=r[a].name;break}},function(t){e.name="unknown"})}}}]),angular.module("SistersServices",["ngResource"]).factory("LoadedService",function(){function t(t){r=t}function e(){return r}var r=!1;return{set:t,get:e}}).factory("Auth",["$firebaseAuth",function(t){return t()}]).factory("SendDataService",function(){function t(t){r=t}function e(){return r}var r={};return{set:t,get:e}}).factory("HelperService",["moment","$q",function(t,e){return{parseYouTube:function(t){var e=t.match(/(?:https?:\/{2})?(?:w{3}\.)?youtu(?:be)?\.(?:com|be)(?:\/watch\?v=|\/)([^\s&]+)/);return null!=e?e[1]:void console.log("The youtube url is not valid.")},base64MimeType:function(t){var e=null;if("string"!=typeof t)return e;var r=t.match(/data:([a-zA-Z0-9]+\/[a-zA-Z0-9-.+]+).*,.*/);return r&&r.length&&(e=r[1]),console.log("image type is ",e),e},getBase64Image:function(t){var e=t.replace(/^data:image\/(png|jpeg);base64,/,"");return e},b64toBlob:function(t,e,r){e=e||"",r=r||512;for(var a=atob(t),n=[],o=0;o<a.length;o+=r){for(var i=a.slice(o,o+r),s=new Array(i.length),l=0;l<i.length;l++)s[l]=i.charCodeAt(l);var u=new Uint8Array(s);n.push(u)}var c=new Blob(n,{type:e});return c},pageDown:function(t){return t<2?"":t-1},findFirst:function(t,e){var r=t-4*(1+e);return r>=0?r:0},getToday:function(){var e=t().unix();return e},titleToURL:function(t){return t.split(" ").join("-")},slugify:function(t){return t.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w\-]+/g,"").replace(/\-\-+/g,"-").replace(/^-+/,"").replace(/-+$/,"")},imgResize:function(t){console.log("inside resize!!");var r=e.defer(),a=new Image;return a.src=t,a.onload=function(){console.log(this.width+" "+this.height);var t=a.width/a.height;console.log("WHAT IS RATIO??? ",t);var e=document.createElement("canvas");if(t>=1.776&&a.height>=500){console.log("loadIMG: ",a);var n=(a.height-500)/a.height;e.height=500,e.width=a.width-a.width*n}else if(t<1.776&&a.width>=889){console.log("loadIMG: ",a);var n=(a.width-889)/a.width;e.width=889,e.height=a.height-a.height*n}else console.log("loadIMG: ",a),console.log("image is not big enough!");var o=e.getContext("2d");o.drawImage(a,0,0,e.width,e.height);var i=e.toDataURL("image/jpeg");r.resolve(i)},r.promise}}}]).factory("SubmitImage",["HelperService",function(t){return function(e,r,a,n){t.imgResize(a).then(function(a){var o=t.base64MimeType(a);console.log("TYPE IS ",o);var i=t.getBase64Image(a),s=t.b64toBlob(i,o),l={contentType:o},u=(1e32*Math.random()).toString(36),c=firebase.storage().ref(),d=c.child("blog-images/"+u).put(s,l);d.on(firebase.storage.TaskEvent.STATE_CHANGED,function(t){var e=t.bytesTransferred/t.totalBytes*100;switch(console.log("Upload is "+e+"% done"),t.state){case firebase.storage.TaskState.PAUSED:console.log("Upload is paused");break;case firebase.storage.TaskState.RUNNING:console.log("Upload is running")}},function(t){switch(t.code){case"storage/unauthorized":break;case"storage/canceled":break;case"storage/unknown":}},function(){console.log("upload finished");var t=d.snapshot.downloadURL;n(e,r,t,null)})})}}]),angular.module("SistersServices").factory("ProductsService",["$firebaseArray","$firebaseObject",function(t,e){return{allProducts:function(){var e=firebase.database().ref("products");return t(e)},oneProduct:function(t){var r=firebase.database().ref("products/"+t);return e(r)}}}]).factory("CurrentOrderService",["$window",function(t){function e(e){t.localStorage.setItem("orderData",angular.toJson(e))}function r(){var e=angular.fromJson(t.localStorage.getItem("orderData"));return JSON.parse(e)}return{set:e,get:r}}]),angular.module("SistersServices").service("InstagramFactory",["$http","$q",function(t,e){var r=e.defer();return t({method:"GET",url:"/instagram",cache:!0}).success(function(t){r.resolve(t)}).error(function(t){r.reject(t)}),r.promise}]).service("TwitterFactory",["$http","$q",function(t,e){var r=e.defer();return t({method:"GET",url:"/twitter",cache:!0}).success(function(t){r.resolve(t)}).error(function(t){r.reject(t)}),r.promise}]).factory("BlogPosts",["$firebaseArray",function(t){return function(){var e=firebase.database().ref("blog_posts").orderByChild("timestamp");return t(e)}}]).factory("ThisPostService",["$firebaseArray",function(t){return function(e){var r=firebase.database().ref("blog_posts"),a=r.orderByChild("slug").equalTo(e);return t(a)}}]).factory("AllTagsService",["$firebaseArray",function(t){return function(){var e=firebase.database().ref("tags");return t(e)}}]).factory("TagsShowService",["$firebaseArray",function(t){return function(e){var r=firebase.database().ref("tags"),a=r.orderByChild("name").equalTo(e);return t(a)}}]).factory("ArchiveService",["$firebaseArray",function(t){return{years:function(){var e=firebase.database().ref("archives");return t(e)},months:function(e){var r=firebase.database().ref("archives/"+e);return t(r)}}}]).factory("ArchiveShowService",["$firebaseArray",function(t){return function(e,r){var a=firebase.database().ref("archives/"+e+"/"+r);return t(a)}}]),angular.module("SistersServices").factory("GetShows",["$firebaseArray","moment",function(t,e){var r=e().unix(),a=r-86400;return function(){var e=firebase.database().ref("shows").orderByChild("unix").startAt(a);return t(e)}}]).factory("GetSingleShow",["$firebaseObject",function(t){return function(e){var r=firebase.database().ref("shows/"+e);return t(r)}}]).factory("GetAllTickets",["$firebaseArray",function(t){return function(){var e=firebase.database().ref("tickets");return t(e)}}]).factory("GetTicket",["$firebaseObject",function(t){return function(e){var r=firebase.database().ref("tickets/"+e);return t(r)}}]).factory("WillCallListService",["$firebaseArray",function(t){return function(e){var r=firebase.database().ref("tickets/"+e+"/willCallList");return t(r)}}]),angular.module("SistersServices").factory("GetAllOrders",["$firebaseArray",function(t){return function(){var e=firebase.database().ref("orders");return t(e)}}]).factory("GetAllTickets",["$firebaseArray","moment",function(t,e){var r=e().unix(),a=r-86400;return function(){var e=firebase.database().ref("tickets").orderByChild("unix").startAt(a);return t(e)}}]).factory("GetSingleTicket",["$firebaseObject",function(t){return function(e){var r=firebase.database().ref("tickets/"+e);return t(r)}}]).factory("ReturnCompleteOrders",function(){return function(t){for(var e=[],r=0;r<t.length;r++)"complete"===t[r].status&&e.push(t[r]);return e}}).factory("ReturnPendingOrders",function(){return function(t){for(var e=[],r=0;r<t.length;r++)"pending"===t[r].status&&e.push(t[r]);return e}}).factory("ThisWillCall",["$firebaseArray",function(t){return function(e){var r=firebase.database().ref("tickets/"+e+"/willCallList");return t(r)}}]).factory("WillCallFormat",function(){return function(t,e){var r="";r+=e+"\n \n";for(var a=0;a<t.length;a++)r+=t[a].name,r+=t[a].quantity>1?" +"+(t[a].quantity-1)+"\n":"\n";return r}}).factory("WillCallToBlob",["Blob","WillCallFormat",function(t,e){return function(r,a){var n=e(r,a);console.log(n);var o=new t([n],{type:"text/plain;charset=utf-8"});return o}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
