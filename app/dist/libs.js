"use strict";angular.module("ngCart",["ngCart.directives"]).config([function(){}]).provider("$ngCart",function(){this.$get=function(){}}).run(["$rootScope","ngCart","ngCartItem","store",function(t,e,n,r){t.$on("ngCart:change",function(){e.$save()}),angular.isObject(r.get("cart"))?e.$restore(r.get("cart")):e.init()}]).service("ngCart",["$rootScope","$location","$window","ngCartItem","store",function(t,e,n,r,a){this.init=function(){this.$cart={shipping:null,taxRate:null,tax:null,items:[]}},this.addItem=function(e,n,a,i,o,s,l){var u=this.getItemById(e);if("object"==typeof u)u.setQuantity(o,!1),t.$broadcast("ngCart:itemUpdated",u);else{var c=new r(e,n,a,i,o,s,l);this.$cart.items.push(c),t.$broadcast("ngCart:itemAdded",c)}t.$broadcast("ngCart:change",{})},this.addItemBtn=function(n,a,i,o,s,l){var u=l.skus;if(1===u.length){var c=this.getItemById(n);if("object"==typeof c)c.setQuantity(s,!1),t.$broadcast("ngCart:itemUpdated",c);else{var d=new r(n,a,i,o,s,l);this.$cart.items.push(d),t.$broadcast("ngCart:itemAdded",d)}t.$broadcast("ngCart:change",{})}else e.url("/store/"+l.id)},this.changeQuantity=function(e,n){var r=this.getItemById(e);"object"==typeof r?(r.setQuantity(n,!0),t.$broadcast("ngCart:itemUpdated",r)):console.log("nothing there"),t.$broadcast("ngCart:change",{})},this.getItemById=function(t){var e=this.getCart().items,n=!1;return angular.forEach(e,function(e){e.getId()===t&&(n=e)}),n},this.setShipping=function(e){return this.$cart.shipping=e,t.$broadcast("ngCart:change",{}),this.getShipping()},this.getShipping=function(){return 0==this.getCart().items.length?0:this.getCart().shipping},this.setTaxRate=function(e){return this.$cart.taxRate=+parseFloat(e).toFixed(2),t.$broadcast("ngCart:change",{}),this.getTaxRate()},this.getTaxRate=function(){return this.$cart.taxRate},this.getTax=function(){return Math.round(this.getSubTotal()/100*this.getCart().taxRate)},this.setCart=function(t){return this.$cart=t,this.getCart()},this.getCart=function(){return this.$cart},this.getItems=function(){return this.getCart().items},this.getTotalItems=function(){var t=0,e=this.getItems();return angular.forEach(e,function(e){t+=e.getQuantity()}),t},this.getTotalUniqueItems=function(){return this.getCart().items.length},this.getSubTotal=function(){var t=0;return angular.forEach(this.getCart().items,function(e){t+=e.getTotal()}),+parseFloat(t).toFixed(2)},this.totalCost=function(){return+parseFloat(this.getSubTotal()+this.getShipping()+this.getTax()).toFixed(2)},this.removeItem=function(e){var n=this.$cart.items.splice(e,1)[0]||{};t.$broadcast("ngCart:itemRemoved",n),t.$broadcast("ngCart:change",{})},this.removeItemById=function(e){var n,r=this.getCart();angular.forEach(r.items,function(t,n){t.getId()===e&&(t=r.items.splice(n,1)[0]||{})}),this.setCart(r),t.$broadcast("ngCart:itemRemoved",n),t.$broadcast("ngCart:change",{})},this.empty=function(){t.$broadcast("ngCart:change",{}),this.$cart.items=[],n.localStorage.removeItem("cart")},this.isEmpty=function(){return!(this.$cart.items.length>0)},this.toObject=function(){if(0===this.getItems().length)return!1;var t=[];return angular.forEach(this.getItems(),function(e){t.push(e.toObject())}),{shipping:this.getShipping(),tax:this.getTax(),taxRate:this.getTaxRate(),subTotal:this.getSubTotal(),totalCost:this.totalCost(),items:t}},this.$restore=function(t){var e=this;e.init(),e.$cart.shipping=t.shipping,e.$cart.taxRate=t.taxRate,e.$cart.tax=t.tax,angular.forEach(t.items,function(t){e.$cart.items.push(new r(t.parent,t.sku,t.description,t.amount,t.quantity,t._data,t.attr))}),this.$save()},this.$save=function(){return a.set("cart",JSON.stringify(this.getCart()))}}]).factory("ngCartItem",["$rootScope","$log",function(t,e){var n=function(t,e,n,r,a,i,o){this.setId(t),this.setSku(e),this.setName(n),this.setPrice(r),this.setQuantity(a),this.setData(i),this.setAttr(o)};return n.prototype.setId=function(t){t?this.parent=t:e.error("An ID must be provided")},n.prototype.setSku=function(t){t?this.sku=t:e.error("A sku must be provided")},n.prototype.getId=function(){return this.parent},n.prototype.getSku=function(){return this.sku},n.prototype.setName=function(t){t?this.description=t:e.error("A name must be provided")},n.prototype.getName=function(){return this.description},n.prototype.setPrice=function(t){var n=parseFloat(t);n?n<=0?e.error("A price must be over 0"):this.amount=n:e.error("A price must be provided")},n.prototype.getPrice=function(){return this.amount},n.prototype.setQuantity=function(t,n){var r=parseInt(t);r%1===0?(n===!0?this.quantity+=r:this.quantity=r,this.quantity<1&&(this.quantity=1)):(this.quantity=1,e.info("Quantity must be an integer and was defaulted to 1"))},n.prototype.getQuantity=function(){return this.quantity},n.prototype.setData=function(t){t&&(this._data=t)},n.prototype.getData=function(){return this._data?this._data:void e.info("This item has no data")},n.prototype.setAttr=function(t){t&&(this.attr=t)},n.prototype.getAttr=function(){if(this.attr){if(this.attr.size)return this.attr.size;if(this.attr.color)return this.attr.size}},n.prototype.getTotal=function(){return+parseFloat(this.getQuantity()*this.getPrice()).toFixed(2)},n.prototype.toObject=function(){return{id:this.getId(),name:this.getName(),price:this.getPrice(),quantity:this.getQuantity(),data:this.getData(),total:this.getTotal()}},n}]).service("store",["$window",function(t){return{get:function(e){if(t.localStorage.getItem(e)){var n=angular.fromJson(t.localStorage.getItem(e));return JSON.parse(n)}return!1},set:function(e,n){return void 0===n?t.localStorage.removeItem(e):t.localStorage.setItem(e,angular.toJson(n)),t.localStorage.getItem(e)}}}]).controller("CartController",["$scope","$rootScope","ngCart","$timeout",function(t,e,n,r){t.loaded=!1,t.toggleCart=!1,t.ngCart=n,r(function(){t.loaded=!0});var a=n.getItems(),i=[];angular.forEach(a,function(t){"shippable"===t._data.product_type&&i.push(t)}),i.length>0?(t.shipBool=!0,t.$emit("setShippable",!0)):(t.shipBool=!1,t.$emit("setShippable",!1))}]).controller("CartBtnController",["$scope","ngCart","$timeout",function(t,e,n){t.loaded=!1,t.toggleCart=!1,t.ngCart=e,n(function(){t.loaded=!0})}]).value("version","1.0.0"),angular.module("ngCart.directives",["ngCart.fulfilment"]).controller("CartController",["$scope","ngCart",function(t,e){t.ngCart=e}]).directive("ngcartAddBtn",["ngCart",function(t){return{restrict:"E",controller:"CartBtnController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocartBtn.html":e.templateUrl},link:function(e,n,r){e.attrs=r,e.inCart=function(){return t.getItemById(r.id)},e.inCart()?e.q=t.getItemById(r.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];for(var a=1;a<=e.quantityMax;a++)e.qtyOpt.push(a)}}}]).directive("ngcartAddtocart",["ngCart",function(t){return{restrict:"E",controller:"CartController",scope:{id:"@",sku:"@",name:"@",quantity:"@",quantityMax:"@",price:"@",data:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/addtocart.html":e.templateUrl},link:function(e,n,r){e.attrs=r,e.inCart=function(){return t.getItemById(r.id)},e.inCart()?e.q=t.getItemById(r.id).getQuantity():e.q=parseInt(e.quantity),e.qtyOpt=[];var a,i=firebase.database().ref("tickets/"+e.id+"/totalTickets");i.once("value").then(function(t){if(e.totalTix=t.val(),a=e.quantityMax<e.totalTix?e.quantityMax:e.totalTix,a>0)for(var n=1;n<=a;n++)e.qtyOpt.push(n)})}}}]).directive("ngcartCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSummary",[function(){return{restrict:"E",controller:"CartController",scope:{},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/summary.html":e.templateUrl}}}]).directive("ngcartCartConfirm",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/cart-confirm.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSmallCart",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartSmallCartCollapse",[function(){return{restrict:"E",controller:"CartController",scope:{},templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"views/ngCart/small-cart-collapse.html":e.templateUrl},link:function(t,e,n){}}}]).directive("ngcartCheckout",[function(){return{restrict:"E",controller:["$rootScope","$scope","ngCart","fulfilmentProvider",function(t,e,n,r){e.ngCart=n,e.checkout=function(){r.setService(e.service),r.setSettings(e.settings),r.checkout().success(function(e,n,r,a){t.$broadcast("ngCart:checkout_succeeded",e)}).error(function(e,n,r,a){t.$broadcast("ngCart:checkout_failed",{statusCode:n,error:e})})}}],scope:{service:"@",settings:"="},transclude:!0,templateUrl:function(t,e){return"undefined"==typeof e.templateUrl?"template/ngCart/checkout.html":e.templateUrl}}}]),angular.module("ngCart.fulfilment",[]).service("fulfilmentProvider",["$injector",function(t){this._obj={service:void 0,settings:void 0},this.setService=function(t){this._obj.service=t},this.setSettings=function(t){this._obj.settings=t},this.checkout=function(){var e=t.get("ngCart.fulfilment."+this._obj.service);return e.checkout(this._obj.settings)}}]).service("ngCart.fulfilment.log",["$q","$log","ngCart",function(t,e,n){this.checkout=function(){var r=t.defer();return e.info(n.toObject()),r.resolve({cart:n.toObject()}),r.promise}}]).service("ngCart.fulfilment.http",["$http","ngCart",function(t,e){this.checkout=function(n){return t.post(n.url,{data:e.toObject(),options:n.options})}}]).service("ngCart.fulfilment.paypal",["$http","ngCart",function(t,e){}]),angular.module("angular-parallax",[]).directive("parallax",["$window",function(t){return{restrict:"A",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxHorizontalOffset:"@"},link:function(e,n,r){var a=function(){e.parallaxHorizontalOffset||(e.parallaxHorizontalOffset="0");var r=t.pageYOffset*(e.parallaxRatio?e.parallaxRatio:1.1);if(r<=t.innerHeight){var a=r<e.parallaxVerticalOffset?e.parallaxVerticalOffset:r,i=e.parallaxHorizontalOffset.indexOf("%")===-1?e.parallaxHorizontalOffset+"px":e.parallaxHorizontalOffset;n.css("transform","translate("+i+", "+a+"px)")}};a(),angular.element(t).bind("scroll",a),angular.element(t).bind("touchmove",a)}}}]).directive("parallaxBackground",["$window",function(t){return{restrict:"A",transclude:!0,template:"<div ng-transclude></div>",scope:{parallaxRatio:"@",parallaxVerticalOffset:"@",parallaxStartPoint:"@"},link:function(e,n,r){var a=function(){var r=e.parallaxVerticalOffset/100*n[0].offsetHeight,a=(n.prop("offsetTop")-t.pageYOffset)*(e.parallaxRatio?e.parallaxRatio:1.1)-(r||0);a>=e.parallaxStartPoint&&(a=e.parallaxStartPoint),n.css("background-position","50% "+a+"px")};angular.element(t).bind("load",function(t){a(),e.$apply()}),angular.element(t).bind("scroll",a),angular.element(t).bind("touchmove",a)}}}]),function(t,e){if("object"==typeof exports&&"object"==typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var n=e();for(var r in n)("object"==typeof exports?exports:t)[r]=n[r]}}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={exports:{},id:r,loaded:!1};return t[r].call(a.exports,a,a.exports,e),a.loaded=!0,a.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports="ngFileSaver",angular.module("ngFileSaver",[]).factory("FileSaver",["Blob","SaveAs","FileSaverUtils",n(1)]).factory("FileSaverUtils",[n(2)]).factory("Blob",["$window",n(3)]).factory("SaveAs",[n(5)])},function(t,e){t.exports=function(t,e,n){function r(t,r,a){try{e(t,r,a)}catch(t){n.handleErrors(t.message)}}return{saveAs:function(t,e,a){return n.isBlobInstance(t)||n.handleErrors("Data argument should be a blob instance"),n.isString(e)||n.handleErrors("Filename argument should be a string"),r(t,e,a)}}}},function(t,e){t.exports=function(){return{handleErrors:function(t){throw new Error(t)},isString:function(t){return"string"==typeof t||t instanceof String},isUndefined:function(t){return"undefined"==typeof t},isBlobInstance:function(t){return t instanceof Blob}}}},function(t,e,n){n(4),t.exports=function(t){return t.Blob}},function(t,e){!function(t){if(t.URL=t.URL||t.webkitURL,t.Blob&&t.URL)try{return void new Blob}catch(t){}var e=t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||function(t){var e=function(t){return Object.prototype.toString.call(t).match(/^\[object\s(.*)\]$/)[1]},n=function(){this.data=[]},r=function(t,e,n){this.data=t,this.size=t.length,this.type=e,this.encoding=n},a=n.prototype,i=r.prototype,o=t.FileReaderSync,s=function(t){this.code=this[this.name=t]},l="NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR".split(" "),u=l.length,c=t.URL||t.webkitURL||t,d=c.createObjectURL,p=c.revokeObjectURL,f=c,m=t.btoa,g=t.atob,h=t.ArrayBuffer,v=t.Uint8Array,y=/^[\w-]+:\/*\[?[\w\.:-]+\]?(?::[0-9]+)?/;for(r.fake=i.fake=!0;u--;)s.prototype[l[u]]=u+1;return c.createObjectURL||(f=t.URL=function(t){var e,n=document.createElementNS("http://www.w3.org/1999/xhtml","a");return n.href=t,"origin"in n||("data:"===n.protocol.toLowerCase()?n.origin=null:(e=t.match(y),n.origin=e&&e[1])),n}),f.createObjectURL=function(t){var e,n=t.type;return null===n&&(n="application/octet-stream"),t instanceof r?(e="data:"+n,"base64"===t.encoding?e+";base64,"+t.data:"URI"===t.encoding?e+","+decodeURIComponent(t.data):m?e+";base64,"+m(t.data):e+","+encodeURIComponent(t.data)):d?d.call(c,t):void 0},f.revokeObjectURL=function(t){"data:"!==t.substring(0,5)&&p&&p.call(c,t)},a.append=function(t){var n=this.data;if(v&&(t instanceof h||t instanceof v)){for(var a="",i=new v(t),l=0,u=i.length;l<u;l++)a+=String.fromCharCode(i[l]);n.push(a)}else if("Blob"===e(t)||"File"===e(t)){if(!o)throw new s("NOT_READABLE_ERR");var c=new o;n.push(c.readAsBinaryString(t))}else t instanceof r?"base64"===t.encoding&&g?n.push(g(t.data)):"URI"===t.encoding?n.push(decodeURIComponent(t.data)):"raw"===t.encoding&&n.push(t.data):("string"!=typeof t&&(t+=""),n.push(unescape(encodeURIComponent(t))))},a.getBlob=function(t){return arguments.length||(t=null),new r(this.data.join(""),t,"raw")},a.toString=function(){return"[object BlobBuilder]"},i.slice=function(t,e,n){var a=arguments.length;return a<3&&(n=null),new r(this.data.slice(t,a>1?e:this.data.length),n,this.encoding)},i.toString=function(){return"[object Blob]"},i.close=function(){this.size=0,delete this.data},n}(t);t.Blob=function(t,n){var r=n?n.type||"":"",a=new e;if(t)for(var i=0,o=t.length;i<o;i++)Uint8Array&&t[i]instanceof Uint8Array?a.append(t[i].buffer):a.append(t[i]);var s=a.getBlob(r);return!s.slice&&s.webkitSlice&&(s.slice=s.webkitSlice),s};var n=Object.getPrototypeOf||function(t){return t.__proto__};t.Blob.prototype=n(new t.Blob)}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content||this)},function(t,e,n){t.exports=function(){return n(6).saveAs||function(){}}},function(t,e,n){var r,a,i=i||function(t){if(!("undefined"==typeof t||"undefined"!=typeof navigator&&/MSIE [1-9]\./.test(navigator.userAgent))){var e=t.document,n=function(){return t.URL||t.webkitURL||t},r=e.createElementNS("http://www.w3.org/1999/xhtml","a"),a="download"in r,i=function(t){var e=new MouseEvent("click");t.dispatchEvent(e)},o=/constructor/i.test(t.HTMLElement),s=/CriOS\/[\d]+/.test(navigator.userAgent),l=function(e){(t.setImmediate||t.setTimeout)(function(){throw e},0)},u="application/octet-stream",c=4e4,d=function(t){var e=function(){"string"==typeof t?n().revokeObjectURL(t):t.remove()};setTimeout(e,c)},p=function(t,e,n){e=[].concat(e);for(var r=e.length;r--;){var a=t["on"+e[r]];if("function"==typeof a)try{a.call(t,n||t)}catch(t){l(t)}}},f=function(t){return/^\s*(?:text\/\S*|application\/xml|\S*\/\S*\+xml)\s*;.*charset\s*=\s*utf-8/i.test(t.type)?new Blob([String.fromCharCode(65279),t],{type:t.type}):t},m=function(e,l,c){c||(e=f(e));var m,g=this,h=e.type,v=h===u,y=function(){p(g,"writestart progress write writeend".split(" "))},b=function(){if((s||v&&o)&&t.FileReader){var r=new FileReader;return r.onloadend=function(){var e=s?r.result:r.result.replace(/^data:[^;]*;/,"data:attachment/file;"),n=t.open(e,"_blank");n||(t.location.href=e),e=void 0,g.readyState=g.DONE,y()},r.readAsDataURL(e),void(g.readyState=g.INIT)}if(m||(m=n().createObjectURL(e)),v)t.location.href=m;else{var a=t.open(m,"_blank");a||(t.location.href=m)}g.readyState=g.DONE,y(),d(m)};return g.readyState=g.INIT,a?(m=n().createObjectURL(e),void setTimeout(function(){r.href=m,r.download=l,i(r),y(),d(m),g.readyState=g.DONE})):void b()},g=m.prototype,h=function(t,e,n){return new m(t,e||t.name||"download",n)};return"undefined"!=typeof navigator&&navigator.msSaveOrOpenBlob?function(t,e,n){return e=e||t.name||"download",n||(t=f(t)),navigator.msSaveOrOpenBlob(t,e)}:(g.abort=function(){},g.readyState=g.INIT=0,g.WRITING=1,g.DONE=2,g.error=g.onwritestart=g.onprogress=g.onwrite=g.onabort=g.onerror=g.onwriteend=null,h)}}("undefined"!=typeof self&&self||"undefined"!=typeof window&&window||this.content);"undefined"!=typeof t&&t.exports?t.exports.saveAs=i:null!==n(7)&&null!==n(8)&&(r=[],a=function(){return i}.apply(e,r),!(void 0!==a&&(t.exports=a)))},function(t,e){t.exports=function(){throw new Error("define cannot be used indirect")}},function(t,e){(function(e){t.exports=e}).call(e,{})}])});var uiroutermetatags;!function(t){function e(t,e,n,r){function a(t,e,n,a,i){r.prerenderReady=!1}function i(e,r){r.metaTags||t.debug('MetaTags - route: "'+r.name+'" does not contain any metatags'),n.update(r.metaTags)}function o(t,e,a,i,o,s){n.prerender.statusCode=500,r.prerenderReady=!0}function s(t,e,a){n.prerender.statusCode=404,r.prerenderReady=!0}e.MetaTags=n,e.$on("$stateChangeStart",a),e.$on("$stateChangeSuccess",i),e.$on("$stateChangeError",o),e.$on("$stateNotFound",s)}e.$inject=["$log","$rootScope","MetaTags","$window"];var n=angular.module("ui.router.metatags",["ui.router"]),r=function(){function t(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return t.prototype.setTitlePrefix=function(t){return this.prefix=t,this},t.prototype.setTitleSuffix=function(t){return this.suffix=t,this},t.prototype.setDefaultTitle=function(t){return this.defaultTitle=t,this},t.prototype.setDefaultDescription=function(t){return this.defaultDescription=t,this},t.prototype.setDefaultKeywords=function(t){return this.defaultKeywords=t,this},t.prototype.setDefaultRobots=function(t){return this.defaultRobots=t,this},t.prototype.setStaticProperties=function(t){return this.staticProperties=t,this},t.prototype.setOGURL=function(t){return this.enableOGURL=t,this},t.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},t}();n.provider("UIRouterMetatags",r);var a=function(){function t(t,e,n,r,a,i,o){this.$log=t,this.UIRouterMetatags=e,this.$interpolate=n,this.$injector=r,this.$state=a,this.$location=i,this.$window=o,this.prerender={}}return t.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],t.prototype.update=function(t){var e=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),t?(this.title=t.title?this.UIRouterMetatags.prefix+(this.getValue("title",t.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=t.description?this.getValue("description",t.description):this.UIRouterMetatags.defaultDescription,this.keywords=t.keywords?this.getValue("keywords",t.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=t.robots?this.getValue("robots",t.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(t.properties,function(t,n){var r=e.getValue(n,t);r&&(e.properties[n]=r)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),t&&t.prerender?(this.prerender.statusCode=t.prerender.statusCode?this.getValue("prerender.statusCode",t.prerender.statusCode):200,this.prerender.header=t.prerender.header?this.getValue("rerender.header",t.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(t){this.$log.error("error occured when extracting metatags:",t)}},t.prototype.getValue=function(t,e){try{return e?"number"==typeof e?e:"string"==typeof e&&0===e.trim().length?null:angular.isFunction(e)||Array.isArray(e)?this.$injector.invoke(e,this,this.$state.$current.locals.globals):this.$interpolate(e)(this.$state.$current.locals.globals):null}catch(e){return this.$log.error("error occured when trying to get the value of tag:",t,e),null}},t}();n.service("MetaTags",a),n.run(e)}(uiroutermetatags||(uiroutermetatags={}));var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(t,e){return t-e}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function(t,e){function n(t,e){console.log("what is templateString? ",e);var n=e.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,t.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",n),n}function r(){function t(t,e){return t>e?1:t<e?-1:0}var e=t,n=t;"object"==typeof Intl?e=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(e=function(t,e){return(t+"").localeCompare(e,void 0,{sensitivity:"case"})});var r=function(t,r){return"number"==typeof t&&"number"==typeof r?n(t,r):t instanceof Date&&r instanceof Date?n(t.getTime(),r.getTime()):e(t,r)};return r}var a=r();return{scope:!0,controller:["$scope","tableSortConfig",function(e,n){e.pagination={template:n.paginationTemplate,perPageOptions:n.perPageOptions.concat(),perPage:n.perPageDefault,currentPage:1,getPageRangeString:function(t){var n=t!==e.filtering.filteredCount?e.filtering.filteredCount:t,r=Math.max((e.pagination.currentPage-1)*e.pagination.perPage+1,1),a=Math.min(e.pagination.currentPage*e.pagination.perPage,n);return 0===e.filtering.filteredCount?"":(a===n&&1===r?"":r+"-")+a}},console.log("what is pagination: ",e.pagination),e.filtering={template:n.filterTemplate,filterString:"",filterFunction:n.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",e.filtering),e.itemsArrayExpression="",e.itemNameSingular=n.itemNameSingular,e.itemNamePlural=n.itemNamePlural,e.noDataText=n.noDataText,e.wrappingElementClass=n.wrappingElementClass,e.sortExpression=[],e.headings=[];var r=function(e,n){return[t(e),null,!1,n?n:e]};this.setSortField=function(t,n,a,i){var o,s=r(t,a);if(s.push(i),1===e.sortExpression.length&&e.sortExpression[0][0]===s[0])e.sortExpression[0][2]?(n.removeClass("tablesort-desc"),n.addClass("tablesort-asc"),e.sortExpression[0][2]=!1):(n.removeClass("tablesort-asc"),n.addClass("tablesort-desc"),e.sortExpression[0][2]=!0),e.$emit("tablesort:sortOrder",[{name:e.sortExpression[0][3],order:e.sortExpression[0][2]}]);else{for(o=0;o<e.headings.length;o+=1)e.headings[o].removeClass("tablesort-desc").removeClass("tablesort-asc");n.addClass("tablesort-asc"),e.sortExpression=[s],e.$emit("tablesort:sortOrder",[{name:s[3],order:s[2]}])}},this.addSortField=function(t,n,a,i){var o,s=!1,l=r(t,a);for(l.push(i),o=0;o<e.sortExpression.length;o+=1)e.sortExpression[o][0]===l[0]&&(e.sortExpression[o][2]?(n.removeClass("tablesort-desc"),n.addClass("tablesort-asc"),e.sortExpression[o][2]=!1):(n.removeClass("tablesort-asc"),n.addClass("tablesort-desc"),e.sortExpression[o][2]=!0),s=!0);s||(n.addClass("tablesort-asc"),e.sortExpression.push(l)),e.$emit("tablesort:sortOrder",e.sortExpression.map(function(t){return{name:t[3],order:t[2]}}))},this.setTrackBy=function(t){e.trackBy=t},this.registerHeading=function(t){e.headings.push(t)},this.addFilterField=function(t,n){var a=r(t);e.filtering.filterFields.push(a)},this.setArrayExpr=function(t){e.itemsArrayExpression=t}}],link:function(r,i,o,s){if(o.tsItemName){var l="No "+r.itemNamePlural;r.itemNameSingular=o.tsItemName,o.tsItemNamePlural?r.itemNamePlural=o.tsItemNamePlural:r.itemNamePlural=o.tsItemName+"s",o.tsNoDataText||r.noDataText!==l||(r.noDataText="No "+r.itemNamePlural)}if(o.tsNoDataText&&(r.noDataText=o.tsNoDataText),o.tsWrappingElementClass&&(r.wrappingElementClass=o.tsWrappingElementClass),o.tsPerPageOptions&&(r.pagination.perPageOptions=r.$eval(o.tsPerPageOptions)),o.tsPerPageDefault){var u=r.$eval(o.tsPerPageDefault);isNaN(u)||(r.pagination.perPage=u,r.pagination.perPageOptions.indexOf(r.pagination.perPage)===-1&&(r.pagination.perPageOptions.push(r.pagination.perPage),r.pagination.perPageOptions.sort(function(t,e){return t-e})))}if(o.tsFilterFields)for(var c=o.tsFilterFields.split(",").filter(function(t){return t&&""!==t.trim()}),d=0;d<c.length;d+=1)s.addFilterField(c[d]);var p;if("false"!==o.tsDisplayFiltering&&""!==r.filtering.template&&r.filtering.filterFields.length>0){var f=n(r,r.filtering.template);p=e(f)(r),i.parent()[0].insertBefore(p[0],i[0])}o.tsFilterFunction&&(r.filtering.filterFunction=r.$eval(o.tsFilterFunction)),angular.isFunction(r.filtering.filterFunction)||(0===r.filtering.filterFields.length?r.filtering.filterFunction=function(t){return!0}:r.filtering.filterFunction=function(t){for(var e=!1,n=0;n<r.filtering.filterFields.length;n+=1)if(!e){var a=(r.filtering.filterFields[n][0](t)||"").toString().toLowerCase();e=a.indexOf(r.filtering.filterString.toLowerCase())>-1}return e}),r.filterLimitFun=function(t){if(!o.tsFilterFunction&&""===r.filtering.filterString)return r.filtering.filteredCount=t.length,t;var e=t.filter(r.filtering.filterFunction);return r.filtering.filteredCount=e.length,e},r.sortFun=function(t,e){var n,i,o,s,l,u;for(n=0;n<r.sortExpression.length;n+=1){if(i=r.sortExpression[n][0](t),o=r.sortExpression[n][0](e),l=e[r.sortExpression[n][1]],l&&(i=l(i),o=l(o)),void 0!==i&&null!==i||(i=""),void 0!==o&&null!==o||(o=""),s=r.sortExpression[n][2],u=(r.sortExpression[n][4]||a)(i,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}if(r.trackBy){if(i=t[r.trackBy],o=e[r.trackBy],void 0!==i&&null!==i||(i=""),void 0!==o&&null!==o||(o=""),u=a(i,o),1===u)return s?-1:1;if(u===-1)return s?1:-1}return 0},r.pageLimitFun=function(t){if("false"===o.tsDisplayPagination||""===r.pagination.template)return t;for(var e=(r.pagination.currentPage-1)*r.pagination.perPage,n=r.pagination.currentPage*r.pagination.perPage,a=[],i=0;i<t.length;i++)i>=e&&i<n&&a.push(t[i]);return a};var m;if("false"!==o.tsDisplayPagination&&""!==r.pagination.template){var g=n(r,r.pagination.template);m=e(g)(r),i.after(m)}var h;if(r.wrappingElementClass&&""!==r.wrappingElementClass&&(h=i.wrap("<div class='"+r.wrappingElementClass+"' />")),o.tsGetTableDataFunction){var v=t(o.tsGetTableDataFunction),y=v.assign,b=function(e,n,a){var i=t(r.itemsArrayExpression)(r);return e&&(i=i.sort(r.sortFun)),n&&(i=r.filterLimitFun(i)),a&&(i=r.pageLimitFun(i)),i};y(r.$parent,b)}r.$on("$destroy",function(){p&&p.remove(),m&&m.remove(),h&&h.replaceWith(i)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(t,e,n,r){var a=function(a){t.$apply(function(){a.shiftKey?r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy):r.setSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy)})};e.bind("click",a),e.addClass("tablesort-sortable"),"tsDefault"in n&&"0"!==n.tsDefault&&(r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy),"descending"===n.tsDefault&&r.addSortField(n.tsCriteria,e,n.tsName,t.tsOrderBy)),"tsFilter"in n&&r.addFilterField(n.tsCriteria,e),r.registerHeading(e)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function(t,e){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(n,r,a,i){for(var o=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],s=o[0],l="ts-repeat",u=0;u<o.length;u++)if(angular.isDefined(r.attr(o[u]))){s=o[u],l=s.replace(/^(data-)?ng/,"$1ts");break}var c="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",d=r.attr(s),p=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,f=d.match(/\s+track\s+by\s+\S+?\.(\S+)/),m=d.match(p);if(f&&i.setTrackBy(f[1]),d.search(/tablesort/)!==-1?(d=d.replace(/tablesort/,c),f&&(d=d.replace(f[0],"")+f[0])):d=d.replace(p,"$1 in $2 | "+c+"$3"),angular.isUndefined(a.tsHideNoData)){var g=e.startSymbol(),h=e.endSymbol(),v=angular.element(r[0]).clone();v.removeAttr(s),v.removeAttr(l),v.addClass("showIfLast"),v.children().remove(),v.append('<td colspan="'+r[0].childElementCount+'">'+g+"noDataText"+h+"</td>"),v=t(v)(n),r.parent().prepend(v)}i.setArrayExpr(m[2]),angular.element(r[0]).attr(s,d),t(r,null,1e6)(n)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(t,e){if(t)return e(t)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(t,e){if(t){var n=t.concat();return n.sort(e)}}}),tableSortModule.filter("parseInt",function(){return function(t){return parseInt(t)||null}}),tableSortModule.filter("parseFloat",function(){return function(t){return parseFloat(t)||null}}),tableSortModule.filter("parseDate",function(){return function(t){var e=Date.parse(t);return isNaN(e)?null:e}}),angular.module("picardy.fontawesome",[]).directive("fa",function(){return{restrict:"E",template:'<span class="fa" aria-hidden="true"></span>',replace:!0,link:function(t,e,n){function r(t,r){var a;n.$observe(t,function(){r=r||"fa-"+t,e.removeClass(i[t]),n[t]&&(a=[r,n[t]].join("-"),e.addClass(a),i[t]=a)})}function a(t,r){var a;n.$observe(t,function(){r=r||"fa-"+t,a=t in n&&"false"!==n[t]&&n[t]!==!1,e.toggleClass(r,a)})}var i={};r("name","fa"),r("rotate"),r("flip"),r("stack"),n.$observe("size",function(){var t;e.removeClass(i.size),"large"===n.size?t="fa-lg":isNaN(parseInt(n.size,10))||(t="fa-"+n.size+"x"),e.addClass(t),i.size=t}),n.$observe("stack",function(){var t;e.removeClass(i.stack),"large"===n.stack?t="fa-stack-lg":isNaN(parseInt(n.stack,10))||(t="fa-stack-"+n.stack+"x"),e.addClass(t),i.stack=t}),a("border"),a("fw"),a("inverse"),a("spin"),e.toggleClass("fa-li",e.parent()&&"LI"===e.parent().prop("tagName")&&e.parent().parent()&&e.parent().parent().hasClass("fa-ul")&&e.parent().children()[0]===e[0]&&"false"!==n.list&&n.list!==!1),n.$observe("alt",function(){var t=n.alt,r=e.next(),a="fa-alt-text";
t?(e.removeAttr("alt"),r&&r.hasClass(a)||(e.after('<span class="sr-only fa-alt-text"></span>'),r=e.next()),r.text(t)):r&&r.hasClass(a)&&r.remove()})}}}).directive("faStack",function(){return{restrict:"E",transclude:!0,template:'<span ng-transclude class="fa-stack fa-lg"></span>',replace:!0,link:function(t,e,n){function r(t,r){var i;n.$observe(t,function(){r=r||"fa-"+t,e.removeClass(a[t]),n[t]&&(i=[r,n[t]].join("-"),e.addClass(i),a[t]=i)})}var a={};r("size"),n.$observe("size",function(){var t;e.removeClass(a.size),"large"===n.size?t="fa-lg":isNaN(parseInt(n.size,10))||(t="fa-"+n.size+"x"),e.addClass(t),a.size=t})}}}),function(t,e,n,r){function a(e,n){this.options=t.extend({},o,n),this._defaults=o,this._name=i,this.$element=t(e),this.init()}var i="menuButton",o={propertyName:"value"};a.prototype={constructor:a,init:function(){this.toggle()},toggle:function(t,e){"show"===this.$element.data("dropdown")?this.hideMenu():this.showMenu()},showMenu:function(){this.$element.data("dropdown","show"),this.$element.find("ul").show()},hideMenu:function(){this.$element.data("dropdown","hide"),this.$element.find("ul").hide()}},t.fn[i]=function(e){return this.each(function(){t.data(this,"plugin_"+i)?t.data(this,"plugin_"+i).toggle():t.data(this,"plugin_"+i,new a(this,e))})},t(n).on("click",function(e){t.each(t("[data-buttons=dropdown]"),function(n,r){t(e.target.offsetParent)[0]!=t(this)[0]&&t.data(this,"plugin_"+i)&&(t.data(this,"plugin_"+i).hideMenu(),t(this).find("ul").hide())})}),t(n).on("click","[data-buttons=dropdown]",function(e){var n=t(e.currentTarget);n.menuButton()}),t(n).on("click","[data-buttons=dropdown] > a",function(t){t.preventDefault()})}(jQuery,window,document),angular.module("angularPayments",[]),angular.module("angularPayments").factory("Common",[function(){var t={};return t.parseExpiry=function(t){var e,n,r,a;return t=t||"",t=t.replace(/\s/g,""),a=t.split("/",2),e=a[0],r=a[1],2===(null!=r?r.length:void 0)&&/^\d+$/.test(r)&&(n=(new Date).getFullYear(),n=n.toString().slice(0,2),r=n+r),e=parseInt(e,10),r=parseInt(r,10),{month:e,year:r}},t}]),angular.module("angularPayments").factory("Cards",[function(){var t=/(\d{1,4})/g,e=/(?:^|\s)(\d{4})$/,n=[{type:"maestro",pattern:/^(5018|5020|5038|6304|6759|676[1-3])/,format:t,inputFormat:e,length:[12,13,14,15,16,17,18,19],cvcLength:[3],luhn:!0},{type:"dinersclub",pattern:/^(36|38|30[0-5])/,format:t,inputFormat:e,length:[14],cvcLength:[3],luhn:!0},{type:"laser",pattern:/^(6706|6771|6709)/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!0},{type:"jcb",pattern:/^35/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"unionpay",pattern:/^62/,format:t,inputFormat:e,length:[16,17,18,19],cvcLength:[3],luhn:!1},{type:"discover",pattern:/^(6011|65|64[4-9]|622)/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"mastercard",pattern:/^5[1-5]/,format:t,inputFormat:e,length:[16],cvcLength:[3],luhn:!0},{type:"amex",pattern:/^3[47]/,format:/(\d{1,4})(\d{1,6})?(\d{1,5})?/,inputFormat:/^(\d{4}|\d{4}\s\d{6})$/,length:[15],cvcLength:[3,4],luhn:!0},{type:"visa",pattern:/^4/,format:t,inputFormat:e,length:[13,14,15,16],cvcLength:[3],luhn:!0}],r=function(t){var e,r,a;for(t=(t+"").replace(/\D/g,""),r=0,a=n.length;r<a;r++)if(e=n[r],e.pattern.test(t))return e},a=function(t){var e,r,a;for(r=0,a=n.length;r<a;r++)if(e=n[r],e.type===t)return e};return{fromNumber:function(t){return r(t)},fromType:function(t){return a(t)},defaultFormat:function(){return t},defaultInputFormat:function(){return e}}}]),angular.module("angularPayments").factory("_Format",["Cards","Common","$filter",function(t,e,n){var r={},a=function(t){var e;return null!=t.prop("selectionStart")&&t.prop("selectionStart")!==t.prop("selectionEnd")||!("undefined"==typeof document||null===document||null==(e=document.selection)||"function"!=typeof e.createRange||!e.createRange().text)},i=function(e){var n,r,a,i,o,s,l;if(a=String.fromCharCode(e.which),n=angular.element(e.currentTarget),l=n.val(),r=t.fromNumber(l+a),i=(l.replace(/\D/g,"")+a).length,s=16,r&&(s=r.length[r.length.length-1]),!(i>=s)){if(!/^\d+$/.test(a)&&!e.meta&&e.keyCode>=46)return void e.preventDefault();if(null==n.prop("selectionStart")||n.prop("selectionStart")===l.length)return o=t.defaultInputFormat(),r&&(o=r.inputFormat),o.test(l)?(e.preventDefault(),n.val(l+" "+a)):o.test(l+a)?(e.preventDefault(),n.val(l+a+" ")):void 0}},o=function(e){var n,r,i,o;n=angular.element(e.currentTarget),i=String.fromCharCode(e.which),/^\d+$/.test(i)&&(a(n)||(o=(n.val()+i).replace(/\D/g,""),r=t.fromNumber(o),r?o.length<=r.length[r.length.length-1]||e.preventDefault():o.length<=16||e.preventDefault()))},s=function(t){var e,n;if(e=angular.element(t.currentTarget),n=e.val(),!t.meta&&8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===n.length))return/\d\s$/.test(n)&&!t.meta&&t.keyCode>=46?(t.preventDefault(),e.val(n.replace(/\d\s$/,""))):/\s\d?$/.test(n)?(t.preventDefault(),e.val(n.replace(/\s\d?$/,""))):void 0},l=function(e){var n,r,a,i;return(n=t.fromNumber(e))?(a=n.length[n.length.length-1],e=e.replace(/\D/g,""),e=e.slice(0,+a+1||9e9),n.format.global?null!=(i=e.match(n.format))?i.join(" "):void 0:(r=n.format.exec(e),null!=r&&r.shift(),null!=r?r.join(" "):void 0)):e},u=function(t){return setTimeout(function(){var e,n;return e=angular.element(t.target),n=e.val(),n=l(n),e.val(n)})},c=function(t){return null!=t?t.replace(/\s/g,""):t};r.card=function(t,e){t.bind("keypress",o),t.bind("keypress",i),t.bind("keydown",s),t.bind("paste",u),e.$parsers.push(c),e.$formatters.push(l)},_formatCVC=function(t){return $target=angular.element(t.currentTarget),digit=String.fromCharCode(t.which),!/^\d+$/.test(digit)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(val=$target.val()+digit,val.length<=4?void 0:void t.preventDefault())},r.cvc=function(t){t.bind("keypress",_formatCVC)},_restrictExpiry=function(t){var e,n,r;return e=angular.element(t.currentTarget),n=String.fromCharCode(t.which),!/^\d+$/.test(n)&&!t.meta&&t.keyCode>=46?void t.preventDefault():a(e)?void 0:(r=e.val()+n,r=r.replace(/\D/g,""),r.length>6?void t.preventDefault():void 0)},_formatExpiry=function(t){var e,n,r;return n=String.fromCharCode(t.which),!/^\d+$/.test(n)&&!t.meta&&t.keyCode>=46?void t.preventDefault():(e=angular.element(t.currentTarget),r=e.val()+n,/^\d$/.test(r)&&"0"!==r&&"1"!==r?(t.preventDefault(),e.val("0"+r+" / ")):/^\d\d$/.test(r)?(t.preventDefault(),e.val(""+r+" / ")):void 0)},_formatForwardExpiry=function(t){var e,n,r;if(n=String.fromCharCode(t.which),/^\d+$/.test(n)||t.meta||!(t.keyCode>=46))return e=angular.element(t.currentTarget),r=e.val(),/^\d\d$/.test(r)?e.val(""+r+" / "):void 0},_formatForwardSlash=function(t){var e,n,r;if(n=String.fromCharCode(t.which),"/"===n)return e=angular.element(t.currentTarget),r=e.val(),/^\d$/.test(r)&&"0"!==r?e.val("0"+r+" / "):void 0},_formatBackExpiry=function(t){var e,n;if(!t.meta&&(e=angular.element(t.currentTarget),n=e.val(),8===t.which&&(null==e.prop("selectionStart")||e.prop("selectionStart")===n.length)))return/\d(\s|\/)+$/.test(n)?(t.preventDefault(),e.val(n.replace(/\d(\s|\/)*$/,""))):/\s\/\s?\d?$/.test(n)?(t.preventDefault(),e.val(n.replace(/\s\/\s?\d?$/,""))):void 0};var d=function(t){if(null!=t){var r=e.parseExpiry(t),a=new Date(r.year,r.month-1);return n("date")(a,"MM/yyyy")}return null},p=function(t){if(null!=t){var r=e.parseExpiry(t),a=new Date(r.year,r.month-1);return n("date")(a,"MM / yyyy")}return null};return r.expiry=function(t,e){t.bind("keypress",_restrictExpiry),t.bind("keypress",_formatExpiry),t.bind("keypress",_formatForwardSlash),t.bind("keypress",_formatForwardExpiry),t.bind("keydown",_formatBackExpiry),e.$parsers.push(d),e.$formatters.push(p)},function(t,e,n){if(!r[t])throw types=Object.keys(r),errstr='Unknown type for formatting: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return r[t](e,n)}}]).directive("paymentsFormat",["$window","_Format",function(t,e){return{restrict:"A",require:"ngModel",link:function(t,n,r,a){e(r.paymentsFormat,n,a)}}}]),angular.module("angularPayments").factory("_Validate",["Cards","Common","$parse",function(t,e,n){var r=[].indexOf||function(t){for(var e=0,n=this.length;e<n;e++)if(e in this&&this[e]===t)return e;return-1},a=function(t){var e,n,r,a,i,o;for(r=!0,a=0,n=(t+"").split("").reverse(),i=0,o=n.length;i<o;i++)e=n[i],e=parseInt(e,10),(r=!r)&&(e*=2),e>9&&(e-=9),a+=e;return a%10===0},i={};return i.cvc=function(e,a,i,o){var s,l;if(null==e||0==e.length)return!0;if(!/^\d+$/.test(e))return!1;var u;if(o.paymentsTypeModel){var c=n(o.paymentsTypeModel);u=c(i)}return u?(s=e.length,r.call(null!=(l=t.fromType(u))?l.cvcLength:void 0,s)>=0):e.length>=3&&e.length<=4},i.card=function(e,i,o,s){var l,u,c;s.paymentsTypeModel&&(c=n(s.paymentsTypeModel));var d=function(){c&&c.assign(o,null),i.$card=null};return null==e||0==e.length?(d(),!0):(e=(e+"").replace(/\s+|-/g,""),/^\d+$/.test(e)&&(l=t.fromNumber(e))?(i.$card=angular.copy(l),c&&c.assign(o,l.type),ret=(u=e.length,r.call(l.length,u)>=0&&(l.luhn===!1||a(e))),ret):(d(),!1))},i.expiry=function(t){if(null==t||0==t.length)return!0;obj=e.parseExpiry(t),month=obj.month,year=obj.year;var n,r,a;return!(!month||!year)&&(!!/^\d+$/.test(month)&&(!!/^\d+$/.test(year)&&(parseInt(month,10)<=12&&(2===year.length&&(a=(new Date).getFullYear(),a=a.toString().slice(0,2),year=a+year),r=new Date(year,month),n=new Date,r.setMonth(r.getMonth()-1),r.setMonth(r.getMonth()+1,1),r>n))))},function(t,e,n,r,a){if(!i[t])throw types=Object.keys(i),errstr='Unknown type for validation: "'+t+'". ',errstr+='Should be one of: "'+types.join('", "')+'"',errstr;return i[t](e,n,r,a)}}]).factory("_ValidateWatch",["_Validate",function(t){var e={};return e.cvc=function(e,n,r,a){a.paymentsTypeModel&&r.$watch(a.paymentsTypeModel,function(i,o){if(i!=o){var s=t(e,n.$modelValue,n,r,a);n.$setValidity(e,s)}})},function(t,n,r,a){if(e[t])return e[t](t,n,r,a)}}]).directive("paymentsValidate",["$window","_Validate","_ValidateWatch",function(t,e,n){return{restrict:"A",require:"ngModel",link:function(t,r,a,i){var o=a.paymentsValidate;n(o,i,t,a);var s=function(n){var r=e(o,n,i,t,a);return i.$setValidity(o,r),r?n:void 0};i.$formatters.push(s),i.$parsers.push(s)}}}]),angular.module("angularPayments").directive("stripeForm",["$window","$parse","Common",function(t,e,n){return _getDataToSend=function(t){var e=["number","expMonth","expYear","cvc","name","addressLine1","addressLine2","addressCity","addressState","addressZip","addressCountry"],n=function(t){return t.replace(/([A-Z])/g,function(t){return"_"+t.toLowerCase()})},r={};for(i in e)t.hasOwnProperty(e[i])&&(r[n(e[i])]=angular.copy(t[e[i]]));return r.number=(r.number||"").replace(/ /g,""),r},{restrict:"A",link:function(e,r,a){if(!t.Stripe)throw"stripeForm requires that you have stripe.js installed. Include https://js.stripe.com/v2/ into your html.";var i=angular.element(r);i.bind("submit",function(){expMonthUsed=!!e.expMonth,expYearUsed=!!e.expYear,expMonthUsed&&expYearUsed||(exp=n.parseExpiry(e.expiry),e.expMonth=exp.month,e.expYear=exp.year);var r=i.find("button");r.prop("disabled",!0),i.hasClass("ng-valid")?t.Stripe.createToken(_getDataToSend(e),function(){var t=arguments;e.$apply(function(){e[a.stripeForm].apply(e,t)}),r.prop("disabled",!1)}):(e.$apply(function(){e[a.stripeForm].apply(e,[400,{error:"Invalid form submitted."}])}),r.prop("disabled",!1)),e.expMonth=null,e.expYear=null})}}}]);var timerModule=angular.module("timer",[]).directive("timer",["$compile",function(t){return{restrict:"EA",replace:!1,scope:{interval:"=interval",startTimeAttr:"=startTime",endTimeAttr:"=endTime",countdownattr:"=countdown",finishCallback:"&finishCallback",autoStart:"&autoStart",language:"@?",fallback:"@?",maxTimeUnit:"=",seconds:"=?",minutes:"=?",hours:"=?",days:"=?",months:"=?",years:"=?",secondsS:"=?",minutesS:"=?",hoursS:"=?",daysS:"=?",monthsS:"=?",yearsS:"=?"},controller:["$scope","$element","$attrs","$timeout","I18nService","$interpolate","progressBarService",function(e,n,r,a,i,o,s){function l(){e.timeoutId&&clearTimeout(e.timeoutId)}function u(){var t={};void 0!==r.startTime&&(e.millis=moment().diff(moment(e.startTimeAttr))),t=c.getTimeUnits(e.millis),e.maxTimeUnit&&"day"!==e.maxTimeUnit?"second"===e.maxTimeUnit?(e.seconds=Math.floor(e.millis/1e3),e.minutes=0,e.hours=0,e.days=0,e.months=0,e.years=0):"minute"===e.maxTimeUnit?(e.seconds=Math.floor(e.millis/1e3%60),e.minutes=Math.floor(e.millis/6e4),e.hours=0,e.days=0,e.months=0,e.years=0):"hour"===e.maxTimeUnit?(e.seconds=Math.floor(e.millis/1e3%60),e.minutes=Math.floor(e.millis/6e4%60),e.hours=Math.floor(e.millis/36e5),e.days=0,e.months=0,e.years=0):"month"===e.maxTimeUnit?(e.seconds=Math.floor(e.millis/1e3%60),e.minutes=Math.floor(e.millis/6e4%60),e.hours=Math.floor(e.millis/36e5%24),e.days=Math.floor(e.millis/36e5/24%30),e.months=Math.floor(e.millis/36e5/24/30),e.years=0):"year"===e.maxTimeUnit&&(e.seconds=Math.floor(e.millis/1e3%60),e.minutes=Math.floor(e.millis/6e4%60),e.hours=Math.floor(e.millis/36e5%24),e.days=Math.floor(e.millis/36e5/24%30),e.months=Math.floor(e.millis/36e5/24/30%12),e.years=Math.floor(e.millis/36e5/24/365)):(e.seconds=Math.floor(e.millis/1e3%60),e.minutes=Math.floor(e.millis/6e4%60),e.hours=Math.floor(e.millis/36e5%24),e.days=Math.floor(e.millis/36e5/24),e.months=0,e.years=0),e.secondsS=1===e.seconds?"":"s",e.minutesS=1===e.minutes?"":"s",e.hoursS=1===e.hours?"":"s",e.daysS=1===e.days?"":"s",e.monthsS=1===e.months?"":"s",e.yearsS=1===e.years?"":"s",e.secondUnit=t.seconds,e.minuteUnit=t.minutes,e.hourUnit=t.hours,e.dayUnit=t.days,e.monthUnit=t.months,e.yearUnit=t.years,e.sseconds=e.seconds<10?"0"+e.seconds:e.seconds,e.mminutes=e.minutes<10?"0"+e.minutes:e.minutes,e.hhours=e.hours<10?"0"+e.hours:e.hours,e.ddays=e.days<10?"0"+e.days:e.days,e.mmonths=e.months<10?"0"+e.months:e.months,e.yyears=e.years<10?"0"+e.years:e.years}"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),e.autoStart=r.autoStart||r.autostart,e.language=e.language||"en",e.fallback=e.fallback||"en",e.$watch("language",function(t,n){void 0!==t&&c.init(t,e.fallback)});var c=new i;c.init(e.language,e.fallback),e.displayProgressBar=0,e.displayProgressActive="active",0===n.html().trim().length?n.append(t("<span>"+o.startSymbol()+"millis"+o.endSymbol()+"</span>")(e)):n.append(t(n.contents())(e)),e.startTime=null,e.endTime=null,e.timeoutId=null,e.countdown=angular.isNumber(e.countdownattr)&&parseInt(e.countdownattr,10)>=0?parseInt(e.countdownattr,10):void 0,e.isRunning=!1,e.$on("timer-start",function(){e.start()}),e.$on("timer-resume",function(){e.resume()}),e.$on("timer-stop",function(){e.stop()}),e.$on("timer-clear",function(){e.clear()}),e.$on("timer-reset",function(){e.reset()}),e.$on("timer-set-countdown",function(t,n){e.countdown=n}),e.$watch("startTimeAttr",function(t,n){t!==n&&e.isRunning&&e.start()}),e.$watch("endTimeAttr",function(t,n){t!==n&&e.isRunning&&e.start()}),e.start=function(){e.startTime=e.startTimeAttr?moment(e.startTimeAttr):moment(),e.endTime=e.endTimeAttr?moment(e.endTimeAttr):null,angular.isNumber(e.countdown)||(e.countdown=angular.isNumber(e.countdownattr)&&parseInt(e.countdownattr,10)>0?parseInt(e.countdownattr,10):void 0),l(),d(),e.isRunning=!0,e.$emit("timer-started",{timeoutId:e.timeoutId,millis:e.millis,seconds:e.seconds,minutes:e.minutes,hours:e.hours,days:e.days})},e.resume=function(){l(),e.countdownattr&&(e.countdown+=1),e.startTime=moment().diff(moment(e.stoppedTime).diff(moment(e.startTime))),d(),e.isRunning=!0,e.$emit("timer-started",{timeoutId:e.timeoutId,millis:e.millis,seconds:e.seconds,minutes:e.minutes,hours:e.hours,days:e.days})},e.stop=e.pause=function(){var t=e.timeoutId;e.clear(),e.$emit("timer-stopped",{timeoutId:t,millis:e.millis,seconds:e.seconds,minutes:e.minutes,hours:e.hours,days:e.days})},e.clear=function(){e.stoppedTime=moment(),l(),e.timeoutId=null,e.isRunning=!1},e.reset=function(){e.startTime=e.startTimeAttr?moment(e.startTimeAttr):moment(),e.endTime=e.endTimeAttr?moment(e.endTimeAttr):null,e.countdown=angular.isNumber(e.countdownattr)&&parseInt(e.countdownattr,10)>0?parseInt(e.countdownattr,10):void 0,l(),d(),e.isRunning=!1,e.clear(),e.$emit("timer-reset",{timeoutId:timeoutId,millis:e.millis,seconds:e.seconds,minutes:e.minutes,hours:e.hours,days:e.days})},n.bind("$destroy",function(){l(),e.isRunning=!1}),e.countdownattr?(e.millis=1e3*e.countdownattr,e.addCDSeconds=function(t){e.countdown+=t,e.isRunning||e.start()},e.$on("timer-add-cd-seconds",function(t,n){e.addCDSeconds(n)}),e.$on("timer-set-countdown-seconds",function(t,n){e.isRunning||e.clear(),e.countdown=n,e.millis=1e3*n,u()})):e.millis=0,u();var d=function t(){var n=null;e.millis=moment().diff(e.startTime);var r=e.millis%1e3;return e.endTimeAttr&&(n=e.endTimeAttr,e.millis=moment(e.endTime).diff(moment()),r=e.interval-e.millis%1e3),e.countdownattr&&(n=e.countdownattr,e.millis=1e3*e.countdown),e.millis<0?(e.stop(),e.millis=0,u(),void(e.finishCallback&&e.$eval(e.finishCallback))):(u(),e.timeoutId=setTimeout(function(){t(),e.$apply()},e.interval-r),e.$emit("timer-tick",{timeoutId:e.timeoutId,millis:e.millis,seconds:e.seconds,minutes:e.minutes,hours:e.hours,days:e.days}),e.countdown>0?e.countdown--:e.countdown<=0&&(e.stop(),e.finishCallback&&e.$eval(e.finishCallback)),void(null!==n&&(e.progressBar=s.calculateProgressBar(e.startTime,e.millis,e.endTime,e.countdownattr),100===e.progressBar&&(e.displayProgressActive=""))))};void 0!==e.autoStart&&e.autoStart!==!0||e.start()}]}}]).directive("timerControls",function(){return{restrict:"EA",scope:!0,controller:["$scope",function(t){t.timerStatus="reset",t.$on("timer-started",function(){t.timerStatus="started"}),t.$on("timer-stopped",function(){t.timerStatus="stopped"}),t.$on("timer-reset",function(){t.timerStatus="reset"}),t.timerStart=function(){t.$broadcast("timer-start")},t.timerStop=function(){t.$broadcast("timer-stop")},t.timerResume=function(){t.$broadcast("timer-resume")},t.timerToggle=function(){switch(t.timerStatus){case"started":t.timerStop();break;case"stopped":t.timerResume();break;case"reset":t.timerStart()}},t.timerAddCDSeconds=function(e){t.$broadcast("timer-add-cd-seconds",e)}}]}});"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports=timerModule);var app=angular.module("timer");app.factory("I18nService",function(){var t=function(){};return t.prototype.language="en",t.prototype.fallback="en",t.prototype.timeHumanizer={},t.prototype.init=function(t,e){var n=humanizeDuration.getSupportedLanguages();this.fallback=void 0!==e?e:"en",n.indexOf(e)===-1&&(this.fallback="en"),this.language=t,n.indexOf(t)===-1&&(this.language=this.fallback),this.timeHumanizer=humanizeDuration.humanizer({language:this.language,halfUnit:!1})},t.prototype.getTimeUnits=function(t){var e=1e3*Math.round(t/1e3),n={};return"undefined"!=typeof this.timeHumanizer?n={millis:this.timeHumanizer(e,{units:["ms"]}),seconds:this.timeHumanizer(e,{units:["s"]}),minutes:this.timeHumanizer(e,{units:["m","s"]}),hours:this.timeHumanizer(e,{units:["h","m","s"]}),days:this.timeHumanizer(e,{units:["d","h","m","s"]}),months:this.timeHumanizer(e,{units:["mo","d","h","m","s"]}),years:this.timeHumanizer(e,{units:["y","mo","d","h","m","s"]})}:console.error('i18nService has not been initialized. You must call i18nService.init("en") for example'),n},t});var app=angular.module("timer");app.factory("progressBarService",function(){var t=function(){};return t.prototype.calculateProgressBar=function(t,e,n,r){var a,i,o=0;return e/=1e3,null!==n?(a=moment(n),i=a.diff(t,"seconds"),o=100*e/i):o=100*e/r,o=100-o,o=Math.round(10*o)/10,o>100&&(o=100),o},new t});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
