var uiroutermetatags;!function(uiroutermetatags){function runBlock($log,$rootScope,MetaTags,$window){function stateChangeStart(event,toState,toParams,from,fromParams){$window.prerenderReady=!1}function stateChangeSuccess(event,toState){toState.metaTags||$log.debug('MetaTags - route: "'+toState.name+'" does not contain any metatags'),MetaTags.update(toState.metaTags)}function stateChangeError(event,toState,toParams,fromState,fromParams,error){MetaTags.prerender.statusCode=500,$window.prerenderReady=!0}function stateNotFound(event,unfoundState,fromState){MetaTags.prerender.statusCode=404,$window.prerenderReady=!0}$rootScope.MetaTags=MetaTags,$rootScope.$on("$stateChangeStart",stateChangeStart),$rootScope.$on("$stateChangeSuccess",stateChangeSuccess),$rootScope.$on("$stateChangeError",stateChangeError),$rootScope.$on("$stateNotFound",stateNotFound)}runBlock.$inject=["$log","$rootScope","MetaTags","$window"];var appModule=angular.module("ui.router.metatags",["ui.router"]),UIRouterMetatags=function(){function UIRouterMetatags(){this.prefix="",this.suffix="",this.defaultTitle="",this.defaultDescription="",this.defaultKeywords="",this.defaultRobots="",this.staticProperties={},this.enableOGURL=!1}return UIRouterMetatags.prototype.setTitlePrefix=function(prefix){return this.prefix=prefix,this},UIRouterMetatags.prototype.setTitleSuffix=function(suffix){return this.suffix=suffix,this},UIRouterMetatags.prototype.setDefaultTitle=function(title){return this.defaultTitle=title,this},UIRouterMetatags.prototype.setDefaultDescription=function(description){return this.defaultDescription=description,this},UIRouterMetatags.prototype.setDefaultKeywords=function(keywords){return this.defaultKeywords=keywords,this},UIRouterMetatags.prototype.setDefaultRobots=function(robots){return this.defaultRobots=robots,this},UIRouterMetatags.prototype.setStaticProperties=function(properties){return this.staticProperties=properties,this},UIRouterMetatags.prototype.setOGURL=function(enabled){return this.enableOGURL=enabled,this},UIRouterMetatags.prototype.$get=function(){return{prefix:this.prefix,suffix:this.suffix,defaultTitle:this.defaultTitle,defaultDescription:this.defaultDescription,defaultKeywords:this.defaultKeywords,defaultRobots:this.defaultRobots,staticProperties:this.staticProperties,enableOGURL:this.enableOGURL}},UIRouterMetatags}();appModule.provider("UIRouterMetatags",UIRouterMetatags);var MetaTags=function(){function MetaTags($log,UIRouterMetatags,$interpolate,$injector,$state,$location,$window){this.$log=$log,this.UIRouterMetatags=UIRouterMetatags,this.$interpolate=$interpolate,this.$injector=$injector,this.$state=$state,this.$location=$location,this.$window=$window,this.prerender={}}return MetaTags.$inject=["$log","UIRouterMetatags","$interpolate","$injector","$state","$location","$window"],MetaTags.prototype.update=function(tags){var _this=this;try{this.properties=angular.extend({},this.UIRouterMetatags.staticProperties),this.UIRouterMetatags.enableOGURL&&(this.properties["og:url"]=this.$location.absUrl()),tags?(this.title=tags.title?this.UIRouterMetatags.prefix+(this.getValue("title",tags.title)||"")+this.UIRouterMetatags.suffix:this.UIRouterMetatags.defaultTitle,this.description=tags.description?this.getValue("description",tags.description):this.UIRouterMetatags.defaultDescription,this.keywords=tags.keywords?this.getValue("keywords",tags.keywords):this.UIRouterMetatags.defaultKeywords,this.robots=tags.robots?this.getValue("robots",tags.robots):this.UIRouterMetatags.defaultRobots,angular.forEach(tags.properties,function(value,key){var v=_this.getValue(key,value);v&&(_this.properties[key]=v)})):(this.title=this.UIRouterMetatags.defaultTitle,this.description=this.UIRouterMetatags.defaultDescription,this.keywords=this.UIRouterMetatags.defaultKeywords,this.robots=this.UIRouterMetatags.defaultRobots),tags&&tags.prerender?(this.prerender.statusCode=tags.prerender.statusCode?this.getValue("prerender.statusCode",tags.prerender.statusCode):200,this.prerender.header=tags.prerender.header?this.getValue("rerender.header",tags.prerender.header):null):(this.prerender.statusCode=200,this.prerender.header=null),this.$window.prerenderReady=!0}catch(err){this.$log.error("error occured when extracting metatags:",err)}},MetaTags.prototype.getValue=function(tagType,tag){try{return tag?"number"==typeof tag?tag:"string"==typeof tag&&0===tag.trim().length?null:angular.isFunction(tag)||Array.isArray(tag)?this.$injector.invoke(tag,this,this.$state.$current.locals.globals):this.$interpolate(tag)(this.$state.$current.locals.globals):null}catch(err){return this.$log.error("error occured when trying to get the value of tag:",tagType,err),null}},MetaTags}();appModule.service("MetaTags",MetaTags),appModule.run(runBlock)}(uiroutermetatags||(uiroutermetatags={}));
//# sourceMappingURL=data:application/json;charset=utf8;base64,
