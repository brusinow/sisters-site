var tableSortModule=angular.module("tableSort",[]);tableSortModule.provider("tableSortConfig",function(){this.filterTemplate="",this.filterFunction=void 0,this.paginationTemplate="",this.perPageOptions=[10,25,50,100],this.perPageDefault=this.perPageOptions[0],this.itemNameSingular="item",this.itemNamePlural=this.itemNameSingular+"s",this.noDataText="No "+this.itemNamePlural,this.wrappingElementClass="",isNaN(this.perPageDefault)||this.perPageOptions.indexOf(this.perPageDefault)!==-1||this.perPageOptions.push(this.perPageDefault),this.perPageOptions.sort(function(a,b){return a-b}),this.$get=function(){return this}}),tableSortModule.directive("tsWrapper",["$parse","$compile",function($parse,$compile){"use strict";function replaceTemplateTokens($scope,templateString){console.log("what is templateString? ",templateString);var newString=templateString.replace(/FILTER_STRING/g,"filtering.filterString").replace(/CURRENT_PAGE_RANGE/g,"pagination.getPageRangeString(TOTAL_COUNT)").replace(/TOTAL_COUNT/g,$scope.itemsArrayExpression+".length").replace(/PER_PAGE_OPTIONS/g,"pagination.perPageOptions").replace(/ITEMS_PER_PAGE/g,"pagination.perPage").replace(/ITEM_NAME_SINGULAR/g,"itemNameSingular").replace(/ITEM_NAME_PLURAL/g,"itemNamePlural").replace(/FILTERED_COUNT/g,"filtering.filteredCount").replace(/CURRENT_PAGE_NUMBER/g,"pagination.currentPage");return console.log("newString: ",newString),newString}function createDefaultComparer(){function _defaultComparer(a,b){return a>b?1:a<b?-1:0}var stringComparer=_defaultComparer,numericComparer=_defaultComparer;"object"==typeof Intl?stringComparer=new Intl.Collator((void 0),{sensitivity:"case"}).compare:"function"==typeof String.prototype.localeCompare&&(stringComparer=function(a,b){return(a+"").localeCompare(b,void 0,{sensitivity:"case"})});var comparerFn=function(a,b){return"number"==typeof a&&"number"==typeof b?numericComparer(a,b):a instanceof Date&&b instanceof Date?numericComparer(a.getTime(),b.getTime()):stringComparer(a,b)};return comparerFn}var defaultComparer=createDefaultComparer();return{scope:!0,controller:["$scope","tableSortConfig",function($scope,tableSortConfig){$scope.pagination={template:tableSortConfig.paginationTemplate,perPageOptions:tableSortConfig.perPageOptions.concat(),perPage:tableSortConfig.perPageDefault,currentPage:1,getPageRangeString:function(total){var maxOnPage=total!==$scope.filtering.filteredCount?$scope.filtering.filteredCount:total,startPage=Math.max(($scope.pagination.currentPage-1)*$scope.pagination.perPage+1,1),endPage=Math.min($scope.pagination.currentPage*$scope.pagination.perPage,maxOnPage);return 0===$scope.filtering.filteredCount?"":(endPage===maxOnPage&&1===startPage?"":startPage+"-")+endPage}},console.log("what is pagination: ",$scope.pagination),$scope.filtering={template:tableSortConfig.filterTemplate,filterString:"",filterFunction:tableSortConfig.filterFunction,filteredCount:0,filterFields:[]},console.log("what is filtering: ",$scope.filtering),$scope.itemsArrayExpression="",$scope.itemNameSingular=tableSortConfig.itemNameSingular,$scope.itemNamePlural=tableSortConfig.itemNamePlural,$scope.noDataText=tableSortConfig.noDataText,$scope.wrappingElementClass=tableSortConfig.wrappingElementClass,$scope.sortExpression=[],$scope.headings=[];var parse_sortexpr=function(expr,name){return[$parse(expr),null,!1,name?name:expr]};this.setSortField=function(sortexpr,element,name,sortBy){var i,expr=parse_sortexpr(sortexpr,name);if(expr.push(sortBy),1===$scope.sortExpression.length&&$scope.sortExpression[0][0]===expr[0])$scope.sortExpression[0][2]?(element.removeClass("tablesort-desc"),element.addClass("tablesort-asc"),$scope.sortExpression[0][2]=!1):(element.removeClass("tablesort-asc"),element.addClass("tablesort-desc"),$scope.sortExpression[0][2]=!0),$scope.$emit("tablesort:sortOrder",[{name:$scope.sortExpression[0][3],order:$scope.sortExpression[0][2]}]);else{for(i=0;i<$scope.headings.length;i+=1)$scope.headings[i].removeClass("tablesort-desc").removeClass("tablesort-asc");element.addClass("tablesort-asc"),$scope.sortExpression=[expr],$scope.$emit("tablesort:sortOrder",[{name:expr[3],order:expr[2]}])}},this.addSortField=function(sortexpr,element,name,sortBy){var i,toggle_order=!1,expr=parse_sortexpr(sortexpr,name);for(expr.push(sortBy),i=0;i<$scope.sortExpression.length;i+=1)$scope.sortExpression[i][0]===expr[0]&&($scope.sortExpression[i][2]?(element.removeClass("tablesort-desc"),element.addClass("tablesort-asc"),$scope.sortExpression[i][2]=!1):(element.removeClass("tablesort-asc"),element.addClass("tablesort-desc"),$scope.sortExpression[i][2]=!0),toggle_order=!0);toggle_order||(element.addClass("tablesort-asc"),$scope.sortExpression.push(expr)),$scope.$emit("tablesort:sortOrder",$scope.sortExpression.map(function(a){return{name:a[3],order:a[2]}}))},this.setTrackBy=function(trackBy){$scope.trackBy=trackBy},this.registerHeading=function(headingelement){$scope.headings.push(headingelement)},this.addFilterField=function(sortexpr,element){var expr=parse_sortexpr(sortexpr);$scope.filtering.filterFields.push(expr)},this.setArrayExpr=function(dataArrayExp){$scope.itemsArrayExpression=dataArrayExp}}],link:function($scope,$element,$attrs,tsWrapperCtrl){if($attrs.tsItemName){var originalNoDataText="No "+$scope.itemNamePlural;$scope.itemNameSingular=$attrs.tsItemName,$attrs.tsItemNamePlural?$scope.itemNamePlural=$attrs.tsItemNamePlural:$scope.itemNamePlural=$attrs.tsItemName+"s",$attrs.tsNoDataText||$scope.noDataText!==originalNoDataText||($scope.noDataText="No "+$scope.itemNamePlural)}if($attrs.tsNoDataText&&($scope.noDataText=$attrs.tsNoDataText),$attrs.tsWrappingElementClass&&($scope.wrappingElementClass=$attrs.tsWrappingElementClass),$attrs.tsPerPageOptions&&($scope.pagination.perPageOptions=$scope.$eval($attrs.tsPerPageOptions)),$attrs.tsPerPageDefault){var defaultPerPage=$scope.$eval($attrs.tsPerPageDefault);isNaN(defaultPerPage)||($scope.pagination.perPage=defaultPerPage,$scope.pagination.perPageOptions.indexOf($scope.pagination.perPage)===-1&&($scope.pagination.perPageOptions.push($scope.pagination.perPage),$scope.pagination.perPageOptions.sort(function(a,b){return a-b})))}if($attrs.tsFilterFields)for(var filterFields=$attrs.tsFilterFields.split(",").filter(function(item){return item&&""!==item.trim()}),i=0;i<filterFields.length;i+=1)tsWrapperCtrl.addFilterField(filterFields[i]);var $filterHtml;if("false"!==$attrs.tsDisplayFiltering&&""!==$scope.filtering.template&&$scope.filtering.filterFields.length>0){var filterString=replaceTemplateTokens($scope,$scope.filtering.template);$filterHtml=$compile(filterString)($scope),$element.parent()[0].insertBefore($filterHtml[0],$element[0])}$attrs.tsFilterFunction&&($scope.filtering.filterFunction=$scope.$eval($attrs.tsFilterFunction)),angular.isFunction($scope.filtering.filterFunction)||(0===$scope.filtering.filterFields.length?$scope.filtering.filterFunction=function(item){return!0}:$scope.filtering.filterFunction=function(item){for(var shouldInclude=!1,i=0;i<$scope.filtering.filterFields.length;i+=1)if(!shouldInclude){var str=($scope.filtering.filterFields[i][0](item)||"").toString().toLowerCase();shouldInclude=str.indexOf($scope.filtering.filterString.toLowerCase())>-1}return shouldInclude}),$scope.filterLimitFun=function(array){if(!$attrs.tsFilterFunction&&""===$scope.filtering.filterString)return $scope.filtering.filteredCount=array.length,array;var filteredArr=array.filter($scope.filtering.filterFunction);return $scope.filtering.filteredCount=filteredArr.length,filteredArr},$scope.sortFun=function(a,b){var i,aval,bval,descending,filterFun,compResult;for(i=0;i<$scope.sortExpression.length;i+=1){if(aval=$scope.sortExpression[i][0](a),bval=$scope.sortExpression[i][0](b),filterFun=b[$scope.sortExpression[i][1]],filterFun&&(aval=filterFun(aval),bval=filterFun(bval)),void 0!==aval&&null!==aval||(aval=""),void 0!==bval&&null!==bval||(bval=""),descending=$scope.sortExpression[i][2],compResult=($scope.sortExpression[i][4]||defaultComparer)(aval,bval),1===compResult)return descending?-1:1;if(compResult===-1)return descending?1:-1}if($scope.trackBy){if(aval=a[$scope.trackBy],bval=b[$scope.trackBy],void 0!==aval&&null!==aval||(aval=""),void 0!==bval&&null!==bval||(bval=""),compResult=defaultComparer(aval,bval),1===compResult)return descending?-1:1;if(compResult===-1)return descending?1:-1}return 0},$scope.pageLimitFun=function(array){if("false"===$attrs.tsDisplayPagination||""===$scope.pagination.template)return array;for(var begin=($scope.pagination.currentPage-1)*$scope.pagination.perPage,end=$scope.pagination.currentPage*$scope.pagination.perPage,final=[],i=0;i<array.length;i++)i>=begin&&i<end&&final.push(array[i]);return final};var $paginationHtml;if("false"!==$attrs.tsDisplayPagination&&""!==$scope.pagination.template){var pagerString=replaceTemplateTokens($scope,$scope.pagination.template);$paginationHtml=$compile(pagerString)($scope),$element.after($paginationHtml)}var $wrappingElement;if($scope.wrappingElementClass&&""!==$scope.wrappingElementClass&&($wrappingElement=$element.wrap("<div class='"+$scope.wrappingElementClass+"' />")),$attrs.tsGetTableDataFunction){var getter=$parse($attrs.tsGetTableDataFunction),setter=getter.assign,fn=function(shouldApplySorting,shouldApplyFiltering,limitToCurrentPageOnly){var arr=$parse($scope.itemsArrayExpression)($scope);return shouldApplySorting&&(arr=arr.sort($scope.sortFun)),shouldApplyFiltering&&(arr=$scope.filterLimitFun(arr)),limitToCurrentPageOnly&&(arr=$scope.pageLimitFun(arr)),arr};setter($scope.$parent,fn)}$scope.$on("$destroy",function(){$filterHtml&&$filterHtml.remove(),$paginationHtml&&$paginationHtml.remove(),$wrappingElement&&$wrappingElement.replaceWith($element)})}}}]),tableSortModule.directive("tsCriteria",function(){return{require:"^tsWrapper",scope:{tsOrderBy:"="},link:function(scope,element,attrs,tsWrapperCtrl){var clickingCallback=function(event){scope.$apply(function(){event.shiftKey?tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy):tsWrapperCtrl.setSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy)})};element.bind("click",clickingCallback),element.addClass("tablesort-sortable"),"tsDefault"in attrs&&"0"!==attrs.tsDefault&&(tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy),"descending"===attrs.tsDefault&&tsWrapperCtrl.addSortField(attrs.tsCriteria,element,attrs.tsName,scope.tsOrderBy)),"tsFilter"in attrs&&tsWrapperCtrl.addFilterField(attrs.tsCriteria,element),tsWrapperCtrl.registerHeading(element)}}}),tableSortModule.directive("tsRepeat",["$compile","$interpolate",function($compile,$interpolate){return{terminal:!0,multiElement:!0,require:"^tsWrapper",priority:1e6,link:function(scope,element,attrs,tsWrapperCtrl){for(var repeatAttrs=["ng-repeat","data-ng-repeat","ng-repeat-start","data-ng-repeat-start"],ngRepeatDirective=repeatAttrs[0],tsRepeatDirective="ts-repeat",i=0;i<repeatAttrs.length;i++)if(angular.isDefined(element.attr(repeatAttrs[i]))){ngRepeatDirective=repeatAttrs[i],tsRepeatDirective=ngRepeatDirective.replace(/^(data-)?ng/,"$1ts");break}var tsExpr="tablesortOrderBy:sortFun | tablesortLimit:filterLimitFun | tablesortLimit:pageLimitFun",repeatExpr=element.attr(ngRepeatDirective),repeatExprRegex=/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(\s+track\s+by\s+[\s\S]+?)?\s*$/,trackByMatch=repeatExpr.match(/\s+track\s+by\s+\S+?\.(\S+)/),repeatInMatch=repeatExpr.match(repeatExprRegex);if(trackByMatch&&tsWrapperCtrl.setTrackBy(trackByMatch[1]),repeatExpr.search(/tablesort/)!==-1?(repeatExpr=repeatExpr.replace(/tablesort/,tsExpr),trackByMatch&&(repeatExpr=repeatExpr.replace(trackByMatch[0],"")+trackByMatch[0])):repeatExpr=repeatExpr.replace(repeatExprRegex,"$1 in $2 | "+tsExpr+"$3"),angular.isUndefined(attrs.tsHideNoData)){var startSym=$interpolate.startSymbol(),endSym=$interpolate.endSymbol(),noDataRow=angular.element(element[0]).clone();noDataRow.removeAttr(ngRepeatDirective),noDataRow.removeAttr(tsRepeatDirective),noDataRow.addClass("showIfLast"),noDataRow.children().remove(),noDataRow.append('<td colspan="'+element[0].childElementCount+'">'+startSym+"noDataText"+endSym+"</td>"),noDataRow=$compile(noDataRow)(scope),element.parent().prepend(noDataRow)}tsWrapperCtrl.setArrayExpr(repeatInMatch[2]),angular.element(element[0]).attr(ngRepeatDirective,repeatExpr),$compile(element,null,1e6)(scope)}}}]),tableSortModule.filter("tablesortLimit",function(){return function(array,limitFun){if(array)return limitFun(array)}}),tableSortModule.filter("tablesortOrderBy",function(){return function(array,sortfun){if(array){var arrayCopy=array.concat();return arrayCopy.sort(sortfun)}}}),tableSortModule.filter("parseInt",function(){return function(input){return parseInt(input)||null}}),tableSortModule.filter("parseFloat",function(){return function(input){return parseFloat(input)||null}}),tableSortModule.filter("parseDate",function(){return function(input){var timestamp=Date.parse(input);return isNaN(timestamp)?null:timestamp}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuZ3VsYXItdGFibGVzb3J0LmpzIl0sIm5hbWVzIjpbInRhYmxlU29ydE1vZHVsZSIsImFuZ3VsYXIiLCJtb2R1bGUiLCJwcm92aWRlciIsInRoaXMiLCJmaWx0ZXJUZW1wbGF0ZSIsImZpbHRlckZ1bmN0aW9uIiwidW5kZWZpbmVkIiwicGFnaW5hdGlvblRlbXBsYXRlIiwicGVyUGFnZU9wdGlvbnMiLCJwZXJQYWdlRGVmYXVsdCIsIml0ZW1OYW1lU2luZ3VsYXIiLCJpdGVtTmFtZVBsdXJhbCIsIm5vRGF0YVRleHQiLCJ3cmFwcGluZ0VsZW1lbnRDbGFzcyIsImlzTmFOIiwiaW5kZXhPZiIsInB1c2giLCJzb3J0IiwiYSIsImIiLCIkZ2V0IiwiZGlyZWN0aXZlIiwiJHBhcnNlIiwiJGNvbXBpbGUiLCJyZXBsYWNlVGVtcGxhdGVUb2tlbnMiLCIkc2NvcGUiLCJ0ZW1wbGF0ZVN0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJuZXdTdHJpbmciLCJyZXBsYWNlIiwiaXRlbXNBcnJheUV4cHJlc3Npb24iLCJjcmVhdGVEZWZhdWx0Q29tcGFyZXIiLCJfZGVmYXVsdENvbXBhcmVyIiwic3RyaW5nQ29tcGFyZXIiLCJudW1lcmljQ29tcGFyZXIiLCJJbnRsIiwiQ29sbGF0b3IiLCJzZW5zaXRpdml0eSIsImNvbXBhcmUiLCJTdHJpbmciLCJwcm90b3R5cGUiLCJsb2NhbGVDb21wYXJlIiwiY29tcGFyZXJGbiIsIkRhdGUiLCJnZXRUaW1lIiwiZGVmYXVsdENvbXBhcmVyIiwic2NvcGUiLCJjb250cm9sbGVyIiwidGFibGVTb3J0Q29uZmlnIiwicGFnaW5hdGlvbiIsInRlbXBsYXRlIiwiY29uY2F0IiwicGVyUGFnZSIsImN1cnJlbnRQYWdlIiwiZ2V0UGFnZVJhbmdlU3RyaW5nIiwidG90YWwiLCJtYXhPblBhZ2UiLCJmaWx0ZXJpbmciLCJmaWx0ZXJlZENvdW50Iiwic3RhcnRQYWdlIiwiTWF0aCIsIm1heCIsImVuZFBhZ2UiLCJtaW4iLCJmaWx0ZXJTdHJpbmciLCJmaWx0ZXJGaWVsZHMiLCJzb3J0RXhwcmVzc2lvbiIsImhlYWRpbmdzIiwicGFyc2Vfc29ydGV4cHIiLCJleHByIiwibmFtZSIsInNldFNvcnRGaWVsZCIsInNvcnRleHByIiwiZWxlbWVudCIsInNvcnRCeSIsImkiLCJsZW5ndGgiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiJGVtaXQiLCJvcmRlciIsImFkZFNvcnRGaWVsZCIsInRvZ2dsZV9vcmRlciIsIm1hcCIsInNldFRyYWNrQnkiLCJ0cmFja0J5IiwicmVnaXN0ZXJIZWFkaW5nIiwiaGVhZGluZ2VsZW1lbnQiLCJhZGRGaWx0ZXJGaWVsZCIsInNldEFycmF5RXhwciIsImRhdGFBcnJheUV4cCIsImxpbmsiLCIkZWxlbWVudCIsIiRhdHRycyIsInRzV3JhcHBlckN0cmwiLCJ0c0l0ZW1OYW1lIiwib3JpZ2luYWxOb0RhdGFUZXh0IiwidHNJdGVtTmFtZVBsdXJhbCIsInRzTm9EYXRhVGV4dCIsInRzV3JhcHBpbmdFbGVtZW50Q2xhc3MiLCJ0c1BlclBhZ2VPcHRpb25zIiwiJGV2YWwiLCJ0c1BlclBhZ2VEZWZhdWx0IiwiZGVmYXVsdFBlclBhZ2UiLCJ0c0ZpbHRlckZpZWxkcyIsInNwbGl0IiwiZmlsdGVyIiwiaXRlbSIsInRyaW0iLCIkZmlsdGVySHRtbCIsInRzRGlzcGxheUZpbHRlcmluZyIsInBhcmVudCIsImluc2VydEJlZm9yZSIsInRzRmlsdGVyRnVuY3Rpb24iLCJpc0Z1bmN0aW9uIiwic2hvdWxkSW5jbHVkZSIsInN0ciIsInRvU3RyaW5nIiwidG9Mb3dlckNhc2UiLCJmaWx0ZXJMaW1pdEZ1biIsImFycmF5IiwiZmlsdGVyZWRBcnIiLCJzb3J0RnVuIiwiYXZhbCIsImJ2YWwiLCJkZXNjZW5kaW5nIiwiZmlsdGVyRnVuIiwiY29tcFJlc3VsdCIsInBhZ2VMaW1pdEZ1biIsInRzRGlzcGxheVBhZ2luYXRpb24iLCJiZWdpbiIsImVuZCIsImZpbmFsIiwiJHBhZ2luYXRpb25IdG1sIiwicGFnZXJTdHJpbmciLCJhZnRlciIsIiR3cmFwcGluZ0VsZW1lbnQiLCJ3cmFwIiwidHNHZXRUYWJsZURhdGFGdW5jdGlvbiIsImdldHRlciIsInNldHRlciIsImFzc2lnbiIsImZuIiwic2hvdWxkQXBwbHlTb3J0aW5nIiwic2hvdWxkQXBwbHlGaWx0ZXJpbmciLCJsaW1pdFRvQ3VycmVudFBhZ2VPbmx5IiwiYXJyIiwiJHBhcmVudCIsIiRvbiIsInJlbW92ZSIsInJlcGxhY2VXaXRoIiwicmVxdWlyZSIsInRzT3JkZXJCeSIsImF0dHJzIiwiY2xpY2tpbmdDYWxsYmFjayIsImV2ZW50IiwiJGFwcGx5Iiwic2hpZnRLZXkiLCJ0c0NyaXRlcmlhIiwidHNOYW1lIiwiYmluZCIsInRzRGVmYXVsdCIsIiRpbnRlcnBvbGF0ZSIsInRlcm1pbmFsIiwibXVsdGlFbGVtZW50IiwicHJpb3JpdHkiLCJyZXBlYXRBdHRycyIsIm5nUmVwZWF0RGlyZWN0aXZlIiwidHNSZXBlYXREaXJlY3RpdmUiLCJpc0RlZmluZWQiLCJhdHRyIiwidHNFeHByIiwicmVwZWF0RXhwciIsInJlcGVhdEV4cHJSZWdleCIsInRyYWNrQnlNYXRjaCIsIm1hdGNoIiwicmVwZWF0SW5NYXRjaCIsInNlYXJjaCIsImlzVW5kZWZpbmVkIiwidHNIaWRlTm9EYXRhIiwic3RhcnRTeW0iLCJzdGFydFN5bWJvbCIsImVuZFN5bSIsImVuZFN5bWJvbCIsIm5vRGF0YVJvdyIsImNsb25lIiwicmVtb3ZlQXR0ciIsImNoaWxkcmVuIiwiYXBwZW5kIiwiY2hpbGRFbGVtZW50Q291bnQiLCJwcmVwZW5kIiwibGltaXRGdW4iLCJzb3J0ZnVuIiwiYXJyYXlDb3B5IiwiaW5wdXQiLCJwYXJzZUludCIsInBhcnNlRmxvYXQiLCJ0aW1lc3RhbXAiLCJwYXJzZSJdLCJtYXBwaW5ncyI6IkFBTUEsR0FBSUEsaUJBQWtCQyxRQUFRQyxPQUFRLGVBRXRDRixpQkFBZ0JHLFNBQVUsa0JBQW1CLFdBQ3pDQyxLQUFLQyxlQUFpQixHQUN0QkQsS0FBS0UsZUFBaUJDLE9BQ3RCSCxLQUFLSSxtQkFBcUIs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VUFBU3dGLE9BQ1osTUFBT0UsWUFBWUYsUUFBVyxRQUl0Q3BNLGdCQUFnQjRHLE9BQVEsWUFBYSxXQUNqQyxNQUFPLFVBQVV3RixPQUNiLEdBQUlHLFdBQVkxSixLQUFLMkosTUFBTUosTUFDM0IsT0FBT3JMLE9BQU13TCxXQUFhLEtBQU9BIiwiZmlsZSI6ImFuZ3VsYXItdGFibGVzb3J0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcbmFuZ3VsYXItdGFibGVzb3J0IHYxLjQuMFxuKGMpIDIwMTMtMjAxNiBNYXR0aWFzIEhvbG1sdW5kLCBodHRwOi8vbWF0dGlhc2guZ2l0aHViLmlvL2FuZ3VsYXItdGFibGVzb3J0XG5MaWNlbnNlOiBNSVRcbiovXG5cbnZhciB0YWJsZVNvcnRNb2R1bGUgPSBhbmd1bGFyLm1vZHVsZSggJ3RhYmxlU29ydCcsIFtdICk7XG5cbnRhYmxlU29ydE1vZHVsZS5wcm92aWRlciggJ3RhYmxlU29ydENvbmZpZycsIGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZpbHRlclRlbXBsYXRlID0gJyc7ICAgICAgICAgICAgICAgICAgICAgICAgICAvL05vIGZpbHRlcmluZyBieSBkZWZhdWx0IHVubGVzcyBhIHRlbXBsYXRlIGlzIHByb3ZpZGVkXG4gICAgdGhpcy5maWx0ZXJGdW5jdGlvbiA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgICAgLy9FbXB0eSBieSBkZWZhdWx0IC0gdXNlIHRoZSBidWlsdCBpbiBmaWx0ZXIgZnVuY3Rpb24gd2hlbiBsZWZ0IGJsYW5rXG4gICAgdGhpcy5wYWdpbmF0aW9uVGVtcGxhdGUgPSAnJzsgICAgICAgICAgICAgICAgICAgICAgLy9ObyBwYWdpbmF0aW9uIGJ5IGRlZmF1bHQgdW5sZXNzIGEgdGVtcGxhdGUgaXMgcHJvdmlkZWRcblxuICAgIC8vVGhlIGJlbG93IG9wdGlvbnMgY2FuIGFsbCBiZSBvdmVycmlkZGVuIG9uIGEgcGVyLXRhYmxlIGJhc2lzXG4gICAgdGhpcy5wZXJQYWdlT3B0aW9ucyA9IFsxMCwgMjUsIDUwLCAxMDBdOyAgICAgICAgICAgLy9EZWZhdWx0IHBhZ2luYXRpb24gb3B0aW9uc1xuICAgIHRoaXMucGVyUGFnZURlZmF1bHQgPSB0aGlzLnBlclBhZ2VPcHRpb25zWzBdOyAgICAgIC8vU2VsZWN0IHRoZSBmaXJzdCBvcHRpb24gYnkgZGVmYXVsdFxuICAgIHRoaXMuaXRlbU5hbWVTaW5ndWxhciA9ICdpdGVtJzsgICAgICAgICAgICAgICAgICAgIC8vRGVmYXVsdCBuYW1lXG4gICAgdGhpcy5pdGVtTmFtZVBsdXJhbCA9IHRoaXMuaXRlbU5hbWVTaW5ndWxhciArICdzJzsgLy9EZWZhdWx0IHdheSB0byBtYWtlIGFuIGl0ZW0gcGx1cmFsIGZvciBFbmdsaXNoXG4gICAgdGhpcy5ub0RhdGFUZXh0ID0gJ05vICcgKyB0aGlzLml0ZW1OYW1lUGx1cmFsOyAgICAgLy9EZWZhdWx0IHRleHQgdG8gc2hvdyB0aGF0IHRoZXJlIGFyZSBubyBpdGVtc1xuICAgIHRoaXMud3JhcHBpbmdFbGVtZW50Q2xhc3MgPSBcIlwiOyAgICAgICAgICAgICAgICAgICAgLy9FbXB0eSBieSBkZWZhdWx0XG5cbiAgICBpZiggIWlzTmFOKHRoaXMucGVyUGFnZURlZmF1bHQpICYmIHRoaXMucGVyUGFnZU9wdGlvbnMuaW5kZXhPZih0aGlzLnBlclBhZ2VEZWZhdWx0KSA9PT0gLTEgKSB7XG4gICAgICAgIC8vSWYgYSBkZWZhdWx0IHBlci1wYWdlIG9wdGlvbiB3YXMgYWRkZWQgdGhhdCBpc24ndCBpbiB0aGUgYXJyYXksIGFkZCBpdCBhdCB0aGUgZW5kXG4gICAgICAgIHRoaXMucGVyUGFnZU9wdGlvbnMucHVzaCh0aGlzLnBlclBhZ2VEZWZhdWx0KTtcbiAgICB9XG5cbiAgICAvL1NvcnQgdGhlIHBlci1wYWdlIG9wdGlvbnMgYXJyYXlcbiAgICB0aGlzLnBlclBhZ2VPcHRpb25zLnNvcnQoZnVuY3Rpb24gKGEsYikge3JldHVybiBhIC0gYjt9KTtcblxuICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxufSk7XG5cbnRhYmxlU29ydE1vZHVsZS5kaXJlY3RpdmUoICd0c1dyYXBwZXInLCBbJyRwYXJzZScsICckY29tcGlsZScsIGZ1bmN0aW9uKCAkcGFyc2UsICRjb21waWxlICkge1xuICAgICd1c2Ugc3RyaWN0JztcblxuICAgIGZ1bmN0aW9uIHJlcGxhY2VUZW1wbGF0ZVRva2Vucygkc2NvcGUsIHRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICAgIC8vUmVwbGFjZSBzb21lIHN0cmluZ3Mgd2l0aCB0aGUgcHJvcGVyIGV4cHJlc3Npb25zIHRvIGJlIGNvbXBpbGVkXG4gICAgICAgIGNvbnNvbGUubG9nKFwid2hhdCBpcyB0ZW1wbGF0ZVN0cmluZz8gXCIsdGVtcGxhdGVTdHJpbmcpO1xuXG4gICAgICAgIHZhciBuZXdTdHJpbmcgPSB0ZW1wbGF0ZVN0cmluZ1xuICAgICAgICAgICAgLnJlcGxhY2UoL0ZJTFRFUl9TVFJJTkcvZywgJ2ZpbHRlcmluZy5maWx0ZXJTdHJpbmcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL0NVUlJFTlRfUEFHRV9SQU5HRS9nLCAncGFnaW5hdGlvbi5nZXRQYWdlUmFuZ2VTdHJpbmcoVE9UQUxfQ09VTlQpJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9UT1RBTF9DT1VOVC9nLCAkc2NvcGUuaXRlbXNBcnJheUV4cHJlc3Npb24gKyAnLmxlbmd0aCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvUEVSX1BBR0VfT1BUSU9OUy9nLCAncGFnaW5hdGlvbi5wZXJQYWdlT3B0aW9ucycpXG4gICAgICAgICAgICAucmVwbGFjZSgvSVRFTVNfUEVSX1BBR0UvZywgJ3BhZ2luYXRpb24ucGVyUGFnZScpXG4gICAgICAgICAgICAucmVwbGFjZSgvSVRFTV9OQU1FX1NJTkdVTEFSL2csICdpdGVtTmFtZVNpbmd1bGFyJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9JVEVNX05BTUVfUExVUkFML2csICdpdGVtTmFtZVBsdXJhbCcpXG4gICAgICAgICAgICAucmVwbGFjZSgvRklMVEVSRURfQ09VTlQvZywgJ2ZpbHRlcmluZy5maWx0ZXJlZENvdW50JylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9DVVJSRU5UX1BBR0VfTlVNQkVSL2csICdwYWdpbmF0aW9uLmN1cnJlbnRQYWdlJyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIm5ld1N0cmluZzogXCIsbmV3U3RyaW5nKTtcbiAgICAgICAgICAgIHJldHVybiBuZXdTdHJpbmc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlRGVmYXVsdENvbXBhcmVyKCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIF9kZWZhdWx0Q29tcGFyZXIoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gMTtcbiAgICAgICAgICAgIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIHN0cmluZ0NvbXBhcmVyID0gX2RlZmF1bHRDb21wYXJlcjtcbiAgICAgICAgdmFyIG51bWVyaWNDb21wYXJlciA9IF9kZWZhdWx0Q29tcGFyZXI7XG5cbiAgICAgICAgaWYodHlwZW9mIEludGwgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICBzdHJpbmdDb21wYXJlciA9IG5ldyBJbnRsLkNvbGxhdG9yKHVuZGVmaW5lZCwge3NlbnNpdGl2aXR5OiAnY2FzZSd9KS5jb21wYXJlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYodHlwZW9mIFN0cmluZy5wcm90b3R5cGUubG9jYWxlQ29tcGFyZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgc3RyaW5nQ29tcGFyZXIgPSBmdW5jdGlvbihhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIChhICsgJycpLmxvY2FsZUNvbXBhcmUoYiwgdW5kZWZpbmVkLCB7c2Vuc2l0aXZpdHk6ICdjYXNlJ30pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjb21wYXJlckZuID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGIgPT09ICdudW1iZXInKVxuICAgICAgICAgICAgICAgIHJldHVybiBudW1lcmljQ29tcGFyZXIoYSwgYik7XG5cbiAgICAgICAgICAgIGlmIChhIGluc3RhbmNlb2YgRGF0ZSAmJiBiIGluc3RhbmNlb2YgRGF0ZSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVtZXJpY0NvbXBhcmVyKGEuZ2V0VGltZSgpLCBiLmdldFRpbWUoKSk7XG5cbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdDb21wYXJlcihhLCBiKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gY29tcGFyZXJGbjtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENvbXBhcmVyID0gY3JlYXRlRGVmYXVsdENvbXBhcmVyKCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBzY29wZTogdHJ1ZSxcbiAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAndGFibGVTb3J0Q29uZmlnJywgZnVuY3Rpb24oJHNjb3BlLCB0YWJsZVNvcnRDb25maWcgKSB7XG4gICAgICAgICAgICAvL2xvY2FsIHNjb3BlIHZhcnMgZm9yIHRoaXMgZGlyZWN0aXZlXG4gICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbiA9IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGFibGVTb3J0Q29uZmlnLnBhZ2luYXRpb25UZW1wbGF0ZSxcbiAgICAgICAgICAgICAgICBwZXJQYWdlT3B0aW9uczogdGFibGVTb3J0Q29uZmlnLnBlclBhZ2VPcHRpb25zLmNvbmNhdCgpLCAvL2NvcHkgdGhlIGFycmF5LCBub3QgYSByZWZlcmVuY2VcbiAgICAgICAgICAgICAgICBwZXJQYWdlOiB0YWJsZVNvcnRDb25maWcucGVyUGFnZURlZmF1bHQsXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IDEsXG4gICAgICAgICAgICAgICAgZ2V0UGFnZVJhbmdlU3RyaW5nOiBmdW5jdGlvbih0b3RhbCkge1xuICAgICAgICAgICAgICAgICAgICAvL1RPRE86IEZvcm1hdCB0aGVzZSBudW1iZXJzLCBwZXJoYXBzIG9wdGlvbmFsbHlcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heE9uUGFnZSA9IHRvdGFsICE9PSAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlcmVkQ291bnQgPyAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlcmVkQ291bnQgOiB0b3RhbDtcbiAgICAgICAgICAgICAgICAgICAgLy9UaGlzIGtlZXBzIHRoZSBmaXJzdCBwYWdlIGxhYmVsZWQgYXMgMSwgbm90IDBcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXJ0UGFnZSA9IE1hdGgubWF4KCgkc2NvcGUucGFnaW5hdGlvbi5jdXJyZW50UGFnZSAtIDEpICogJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZSArIDEsIDEpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kUGFnZSA9IE1hdGgubWluKCRzY29wZS5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlICogJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZSwgbWF4T25QYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgLy9UaGlzIHByZXZlbnRzIHRoZSByYW5nZSBmcm9tIHNob3dpbmcgd2hlbiB0aGUgdG90YWwgbnVtYmVyIG9mIGl0ZW1zIGNhbiBiZSBzaG93biBvbiBhIHNpbmdsZSBwYWdlXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlcmVkQ291bnQgPT09IDAgPyAnJyA6IChlbmRQYWdlID09PSBtYXhPblBhZ2UgJiYgc3RhcnRQYWdlID09PSAxID8gJycgOiBzdGFydFBhZ2UgKyAnLScpICsgZW5kUGFnZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ3aGF0IGlzIHBhZ2luYXRpb246IFwiLCRzY29wZS5wYWdpbmF0aW9uKTtcblxuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmluZyA9IHtcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGFibGVTb3J0Q29uZmlnLmZpbHRlclRlbXBsYXRlLFxuICAgICAgICAgICAgICAgIGZpbHRlclN0cmluZzogJycsXG4gICAgICAgICAgICAgICAgZmlsdGVyRnVuY3Rpb246IHRhYmxlU29ydENvbmZpZy5maWx0ZXJGdW5jdGlvbixcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZENvdW50OiAwLFxuICAgICAgICAgICAgICAgIGZpbHRlckZpZWxkczogW11cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwid2hhdCBpcyBmaWx0ZXJpbmc6IFwiLCRzY29wZS5maWx0ZXJpbmcpO1xuXG4gICAgICAgICAgICAkc2NvcGUuaXRlbXNBcnJheUV4cHJlc3Npb24gPSAnJzsgLy90aGlzIHdpbGwgY29udGFpbiB0aGUgc3RyaW5nIGV4cHJlc3Npb24gZm9yIHRoZSBhcnJheSBvZiBpdGVtcyBpbiB0aGUgdGFibGVcbiAgICAgICAgICAgICRzY29wZS5pdGVtTmFtZVNpbmd1bGFyID0gdGFibGVTb3J0Q29uZmlnLml0ZW1OYW1lU2luZ3VsYXI7XG4gICAgICAgICAgICAkc2NvcGUuaXRlbU5hbWVQbHVyYWwgPSB0YWJsZVNvcnRDb25maWcuaXRlbU5hbWVQbHVyYWw7XG4gICAgICAgICAgICAkc2NvcGUubm9EYXRhVGV4dCA9IHRhYmxlU29ydENvbmZpZy5ub0RhdGFUZXh0O1xuICAgICAgICAgICAgJHNjb3BlLndyYXBwaW5nRWxlbWVudENsYXNzID0gdGFibGVTb3J0Q29uZmlnLndyYXBwaW5nRWxlbWVudENsYXNzO1xuICAgICAgICAgICAgJHNjb3BlLnNvcnRFeHByZXNzaW9uID0gW107XG4gICAgICAgICAgICAkc2NvcGUuaGVhZGluZ3MgPSBbXTtcblxuICAgICAgICAgICAgdmFyIHBhcnNlX3NvcnRleHByID0gZnVuY3Rpb24oIGV4cHIsIG5hbWUgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFskcGFyc2UoIGV4cHIgKSwgbnVsbCwgZmFsc2UsIG5hbWUgPyBuYW1lIDogZXhwcl07XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNldFNvcnRGaWVsZCA9IGZ1bmN0aW9uKCBzb3J0ZXhwciwgZWxlbWVudCwgbmFtZSwgc29ydEJ5ICkge1xuICAgICAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgICAgIHZhciBleHByID0gcGFyc2Vfc29ydGV4cHIoIHNvcnRleHByLCBuYW1lICk7XG4gICAgICAgICAgICAgICAgZXhwci5wdXNoKHNvcnRCeSk7XG4gICAgICAgICAgICAgICAgaWYoICRzY29wZS5zb3J0RXhwcmVzc2lvbi5sZW5ndGggPT09IDEgJiYgJHNjb3BlLnNvcnRFeHByZXNzaW9uWzBdWzBdID09PSBleHByWzBdICkge1xuICAgICAgICAgICAgICAgICAgICBpZiggJHNjb3BlLnNvcnRFeHByZXNzaW9uWzBdWzJdICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyggJ3RhYmxlc29ydC1kZXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyggJ3RhYmxlc29ydC1hc2MnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydEV4cHJlc3Npb25bMF1bMl0gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQucmVtb3ZlQ2xhc3MoICd0YWJsZXNvcnQtYXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyggJ3RhYmxlc29ydC1kZXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRFeHByZXNzaW9uWzBdWzJdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGVtaXQoICd0YWJsZXNvcnQ6c29ydE9yZGVyJywgW3tcbiAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuc29ydEV4cHJlc3Npb25bMF1bM10sXG4gICAgICAgICAgICAgICAgICAgICAgb3JkZXI6ICRzY29wZS5zb3J0RXhwcmVzc2lvblswXVsyXVxuICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yKCBpPTA7IGk8JHNjb3BlLmhlYWRpbmdzLmxlbmd0aDsgaT1pKzEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGVhZGluZ3NbaV1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICd0YWJsZXNvcnQtZGVzYycgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZW1vdmVDbGFzcyggJ3RhYmxlc29ydC1hc2MnICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyggJ3RhYmxlc29ydC1hc2MnICk7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0RXhwcmVzc2lvbiA9IFtleHByXTtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRlbWl0KCAndGFibGVzb3J0OnNvcnRPcmRlcicsIFt7XG4gICAgICAgICAgICAgICAgICAgICAgbmFtZTogZXhwclszXSxcbiAgICAgICAgICAgICAgICAgICAgICBvcmRlcjogZXhwclsyXVxuICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5hZGRTb3J0RmllbGQgPSBmdW5jdGlvbiggc29ydGV4cHIsIGVsZW1lbnQsIG5hbWUsIHNvcnRCeSApIHtcbiAgICAgICAgICAgICAgICB2YXIgaTtcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlX29yZGVyID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdmFyIGV4cHIgPSBwYXJzZV9zb3J0ZXhwciggc29ydGV4cHIsIG5hbWUgKTtcbiAgICAgICAgICAgICAgICBleHByLnB1c2goc29ydEJ5KTtcbiAgICAgICAgICAgICAgICBmb3IoIGk9MDsgaTwkc2NvcGUuc29ydEV4cHJlc3Npb24ubGVuZ3RoOyBpPWkrMSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoICRzY29wZS5zb3J0RXhwcmVzc2lvbltpXVswXSA9PT0gZXhwclswXSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAkc2NvcGUuc29ydEV4cHJlc3Npb25baV1bMl0gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVDbGFzcyggJ3RhYmxlc29ydC1kZXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoICd0YWJsZXNvcnQtYXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0RXhwcmVzc2lvbltpXVsyXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUNsYXNzKCAndGFibGVzb3J0LWFzYycgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmFkZENsYXNzKCAndGFibGVzb3J0LWRlc2MnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRFeHByZXNzaW9uW2ldWzJdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZV9vcmRlciA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoICF0b2dnbGVfb3JkZXIgKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkQ2xhc3MoICd0YWJsZXNvcnQtYXNjJyApO1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydEV4cHJlc3Npb24ucHVzaCggZXhwciApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICRzY29wZS4kZW1pdCggJ3RhYmxlc29ydDpzb3J0T3JkZXInLCAkc2NvcGUuc29ydEV4cHJlc3Npb24ubWFwKGZ1bmN0aW9uIChhKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBhWzNdLFxuICAgICAgICAgICAgICAgICAgICBvcmRlcjogYVsyXVxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuc2V0VHJhY2tCeSA9IGZ1bmN0aW9uKCB0cmFja0J5ICkge1xuICAgICAgICAgICAgICAgICRzY29wZS50cmFja0J5ID0gdHJhY2tCeTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJIZWFkaW5nID0gZnVuY3Rpb24oIGhlYWRpbmdlbGVtZW50ICkge1xuICAgICAgICAgICAgICAgICRzY29wZS5oZWFkaW5ncy5wdXNoKCBoZWFkaW5nZWxlbWVudCApO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5hZGRGaWx0ZXJGaWVsZCA9IGZ1bmN0aW9uKCBzb3J0ZXhwciwgZWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICB2YXIgZXhwciA9IHBhcnNlX3NvcnRleHByKCBzb3J0ZXhwciApO1xuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJpbmcuZmlsdGVyRmllbGRzLnB1c2goIGV4cHIgKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHRoaXMuc2V0QXJyYXlFeHByID0gZnVuY3Rpb24oIGRhdGFBcnJheUV4cCApIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbXNBcnJheUV4cHJlc3Npb24gPSBkYXRhQXJyYXlFeHA7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCB0c1dyYXBwZXJDdHJsKSB7XG5cbiAgICAgICAgICAgIGlmKCAkYXR0cnMudHNJdGVtTmFtZSApIHtcbiAgICAgICAgICAgICAgICB2YXIgb3JpZ2luYWxOb0RhdGFUZXh0ID0gJ05vICcgKyAkc2NvcGUuaXRlbU5hbWVQbHVyYWw7XG5cbiAgICAgICAgICAgICAgICAvL2lmIHRoZSB0YWJsZSBhdHRyaWJ1dGVzIGhhcyBhbiBpdGVtIG5hbWUgb24gaXQsIHRoaXMgdGFrZXMgcHJpb3JpdHlcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXRlbU5hbWVTaW5ndWxhciA9ICRhdHRycy50c0l0ZW1OYW1lO1xuXG4gICAgICAgICAgICAgICAgaWYoICRhdHRycy50c0l0ZW1OYW1lUGx1cmFsICkge1xuICAgICAgICAgICAgICAgICAgICAvL2lmIGEgcGx1cmFsIG5hbWUgd2FzIHNwZWNpZmllZCwgdXNlIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLml0ZW1OYW1lUGx1cmFsID0gJGF0dHJzLnRzSXRlbU5hbWVQbHVyYWw7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy9vdGhlcndpc2UganVzdCBhZGQgJ3MnIHRvIHRoZSBzaW5ndWxhciBuYW1lXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5pdGVtTmFtZVBsdXJhbCA9ICRhdHRycy50c0l0ZW1OYW1lICsgJ3MnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmKCAhJGF0dHJzLnRzTm9EYXRhVGV4dCAmJiAkc2NvcGUubm9EYXRhVGV4dCA9PT0gb3JpZ2luYWxOb0RhdGFUZXh0ICkge1xuICAgICAgICAgICAgICAgICAgICAvL0lmIHRoZSBub0RhdGFUZXh0IHdhcyBOT1Qgc3BlY2lmaWVkIEFORCBpdCdzIGluIHRoZSBzYW1lICdObyBJVEVNUycgZm9ybWF0IGFzIHRoZSBkZWZhdWx0ICwgdXBkYXRlIGl0IHRvIGNvbnRhaW4gdGhlIG5ldyBpdGVtIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5vRGF0YVRleHQgPSAnTm8gJyArICRzY29wZS5pdGVtTmFtZVBsdXJhbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCAkYXR0cnMudHNOb0RhdGFUZXh0ICkge1xuICAgICAgICAgICAgICAgIC8vSWYgdGhlIG5vRGF0YVRleHQgd2FzIHNwZWNpZmllZCwgdXBkYXRlIGl0XG4gICAgICAgICAgICAgICAgJHNjb3BlLm5vRGF0YVRleHQgPSAkYXR0cnMudHNOb0RhdGFUZXh0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzV3JhcHBpbmdFbGVtZW50Q2xhc3MgKSB7XG4gICAgICAgICAgICAgICAgLy9JZiB0aGUgd3JhcHBpbmdFbGVtZW50Q2xhc3Mgd2FzIHNwZWNpZmllZCwgdXBkYXRlIGl0XG4gICAgICAgICAgICAgICAgJHNjb3BlLndyYXBwaW5nRWxlbWVudENsYXNzID0gJGF0dHJzLnRzV3JhcHBpbmdFbGVtZW50Q2xhc3M7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vbG9jYWwgYXR0cmlidXRlIHVzYWdlcyBvZiB0aGUgcGFnaW5hdGlvbi9maWx0ZXJpbmcgb3B0aW9ucyB3aWxsIG92ZXJyaWRlIHRoZSBnbG9iYWwgY29uZmlnXG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzUGVyUGFnZU9wdGlvbnMgKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZU9wdGlvbnMgPSAkc2NvcGUuJGV2YWwoJGF0dHJzLnRzUGVyUGFnZU9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzUGVyUGFnZURlZmF1bHQgKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRQZXJQYWdlID0gJHNjb3BlLiRldmFsKCRhdHRycy50c1BlclBhZ2VEZWZhdWx0KTtcbiAgICAgICAgICAgICAgICBpZiggIWlzTmFOKGRlZmF1bHRQZXJQYWdlKSApIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZSA9IGRlZmF1bHRQZXJQYWdlO1xuICAgICAgICAgICAgICAgICAgICBpZiggJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZU9wdGlvbnMuaW5kZXhPZigkc2NvcGUucGFnaW5hdGlvbi5wZXJQYWdlKSA9PT0gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvL0lmIGEgZGVmYXVsdCBwZXItcGFnZSBvcHRpb24gd2FzIGFkZGVkIHRoYXQgaXNuJ3QgaW4gdGhlIGFycmF5LCBhZGQgaXQgYW5kIHNvcnQgdGhlIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFnaW5hdGlvbi5wZXJQYWdlT3B0aW9ucy5wdXNoKCRzY29wZS5wYWdpbmF0aW9uLnBlclBhZ2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZU9wdGlvbnMuc29ydChmdW5jdGlvbiAoYSxiKSB7cmV0dXJuIGEgLSBiO30pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzRmlsdGVyRmllbGRzICkge1xuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJGaWVsZHMgPSAkYXR0cnMudHNGaWx0ZXJGaWVsZHMuc3BsaXQoJywnKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtICYmIGl0ZW0udHJpbSgpICE9PSAnJztcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm9yKCB2YXIgaT0wOyBpPGZpbHRlckZpZWxkcy5sZW5ndGg7IGk9aSsxICkge1xuICAgICAgICAgICAgICAgICAgICB0c1dyYXBwZXJDdHJsLmFkZEZpbHRlckZpZWxkKGZpbHRlckZpZWxkc1tpXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgJGZpbHRlckh0bWw7XG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzRGlzcGxheUZpbHRlcmluZyAhPT0gJ2ZhbHNlJyAmJiAkc2NvcGUuZmlsdGVyaW5nLnRlbXBsYXRlICE9PSAnJyAmJiAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlckZpZWxkcy5sZW5ndGg+MCApIHtcbiAgICAgICAgICAgICAgICB2YXIgZmlsdGVyU3RyaW5nID0gcmVwbGFjZVRlbXBsYXRlVG9rZW5zKCRzY29wZSwgJHNjb3BlLmZpbHRlcmluZy50ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgJGZpbHRlckh0bWwgPSAkY29tcGlsZShmaWx0ZXJTdHJpbmcpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgLy9BZGQgZmlsdGVyaW5nIEhUTUwgQkVGT1JFIHRoZSB0YWJsZVxuICAgICAgICAgICAgICAgICRlbGVtZW50LnBhcmVudCgpWzBdLmluc2VydEJlZm9yZSgkZmlsdGVySHRtbFswXSwgJGVsZW1lbnRbMF0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiggJGF0dHJzLnRzRmlsdGVyRnVuY3Rpb24gKSB7XG4gICAgICAgICAgICAgICAgLy9pZiB0aGUgdGFibGUgYXR0cmlidXRlcyBoYXMgYSBmaWx0ZXIgZnVuY3Rpb24gb24gaXQsIHRoaXMgdGFrZXMgcHJpb3JpdHlcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlckZ1bmN0aW9uID0gJHNjb3BlLiRldmFsKCRhdHRycy50c0ZpbHRlckZ1bmN0aW9uKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoICFhbmd1bGFyLmlzRnVuY3Rpb24oJHNjb3BlLmZpbHRlcmluZy5maWx0ZXJGdW5jdGlvbikgKSB7XG4gICAgICAgICAgICAgICAgLy9ObyBjdXN0b20gZmlsdGVyIHdhcyBwcm92aWRlZC4uLlxuICAgICAgICAgICAgICAgIGlmKCAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlckZpZWxkcy5sZW5ndGg9PT0wICkge1xuICAgICAgICAgICAgICAgICAgICAvL1RoZXJlIGFyZSBubyBmaWx0ZXIgZmllbGRzLCBzbyBhbHdheXMgcmV0dXJuIGV2ZXJ5dGhpbmdcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmluZy5maWx0ZXJGdW5jdGlvbiA9IGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vVGhpcyBpcyB0aGUgZGVmYXVsdCBmaWx0ZXIgZnVuY3Rpb24uIEl0IGRvZXMgYSBsb3dlcmNhc2Ugc3RyaW5nIG1hdGNoXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJpbmcuZmlsdGVyRnVuY3Rpb24gPSBmdW5jdGlvbihpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2hvdWxkSW5jbHVkZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKCB2YXIgaT0wOyBpPCRzY29wZS5maWx0ZXJpbmcuZmlsdGVyRmllbGRzLmxlbmd0aDsgaT1pKzEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoICFzaG91bGRJbmNsdWRlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RyID0gKCRzY29wZS5maWx0ZXJpbmcuZmlsdGVyRmllbGRzW2ldWzBdKGl0ZW0pIHx8ICcnKS50b1N0cmluZygpLnRvTG93ZXJDYXNlKCk7IC8vcGFyc2UgdGhlIGl0ZW0ncyBwcm9wZXJ0eSB1c2luZyB0aGUgYHRzLWNyaXRlcmlhYCB2YWx1ZSAmIGZpbHRlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG91bGRJbmNsdWRlID0gc3RyLmluZGV4T2YoJHNjb3BlLmZpbHRlcmluZy5maWx0ZXJTdHJpbmcudG9Mb3dlckNhc2UoKSkgPiAtMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hvdWxkSW5jbHVkZTtcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICRzY29wZS5maWx0ZXJMaW1pdEZ1biA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgICAgICAgICAgaWYoICEkYXR0cnMudHNGaWx0ZXJGdW5jdGlvbiAmJiAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlclN0cmluZyA9PT0gJycgKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vUmV0dXJuIHVuZmlsdGVyZWQgd2hlbiBOT1QgdXNpbmcgYSBjdXN0b20gZmlsdGVyIGZ1bmN0aW9uIGFuZCB3aGVuIG5vdGhpbmcgaXMgYmVpbmcgc2VhcmNoZWRcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmluZy5maWx0ZXJlZENvdW50ID0gYXJyYXkubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBmaWx0ZXJlZEFyciA9IGFycmF5LmZpbHRlcigkc2NvcGUuZmlsdGVyaW5nLmZpbHRlckZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyaW5nLmZpbHRlcmVkQ291bnQgPSBmaWx0ZXJlZEFyci5sZW5ndGg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbHRlcmVkQXJyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgJHNjb3BlLnNvcnRGdW4gPSBmdW5jdGlvbiggYSwgYiApIHtcbiAgICAgICAgICAgICAgICB2YXIgaSwgYXZhbCwgYnZhbCwgZGVzY2VuZGluZywgZmlsdGVyRnVuLCBjb21wUmVzdWx0O1xuICAgICAgICAgICAgICAgIGZvciggaT0wOyBpPCRzY29wZS5zb3J0RXhwcmVzc2lvbi5sZW5ndGg7IGk9aSsxICkge1xuICAgICAgICAgICAgICAgICAgICBhdmFsID0gJHNjb3BlLnNvcnRFeHByZXNzaW9uW2ldWzBdKGEpO1xuICAgICAgICAgICAgICAgICAgICBidmFsID0gJHNjb3BlLnNvcnRFeHByZXNzaW9uW2ldWzBdKGIpO1xuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGdW4gPSBiWyRzY29wZS5zb3J0RXhwcmVzc2lvbltpXVsxXV07XG4gICAgICAgICAgICAgICAgICAgIGlmKCBmaWx0ZXJGdW4gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhdmFsID0gZmlsdGVyRnVuKCBhdmFsICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBidmFsID0gZmlsdGVyRnVuKCBidmFsICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYoIGF2YWwgPT09IHVuZGVmaW5lZCB8fCBhdmFsID09PSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKCBidmFsID09PSB1bmRlZmluZWQgfHwgYnZhbCA9PT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICAgICAgYnZhbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGRlc2NlbmRpbmcgPSAkc2NvcGUuc29ydEV4cHJlc3Npb25baV1bMl07XG4gICAgICAgICAgICAgICAgICAgIGNvbXBSZXN1bHQgPSAoJHNjb3BlLnNvcnRFeHByZXNzaW9uW2ldWzRdIHx8IGRlZmF1bHRDb21wYXJlcikoYXZhbCwgYnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBjb21wUmVzdWx0ID09PSAxICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NlbmRpbmcgPyAtMSA6IDE7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiggY29tcFJlc3VsdCA9PT0gLTEgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVzY2VuZGluZyA/IDEgOiAtMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEFsbCB0aGUgc29ydCBmaWVsZHMgd2VyZSBlcXVhbC4gSWYgdGhlcmUgaXMgYSAndHJhY2sgYnknJyBleHByZXNzaW9uLFxuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGF0IGFzIGEgdGllYnJlYWtlciB0byBtYWtlIHRoZSBzb3J0IHJlc3VsdCBzdGFibGUuXG4gICAgICAgICAgICAgICAgaWYoICRzY29wZS50cmFja0J5ICkge1xuICAgICAgICAgICAgICAgICAgICBhdmFsID0gYVskc2NvcGUudHJhY2tCeV07XG4gICAgICAgICAgICAgICAgICAgIGJ2YWwgPSBiWyRzY29wZS50cmFja0J5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYoIGF2YWwgPT09IHVuZGVmaW5lZCB8fCBhdmFsID09PSBudWxsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXZhbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmKCBidmFsID09PSB1bmRlZmluZWQgfHwgYnZhbCA9PT0gbnVsbCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ2YWwgPSAnJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb21wUmVzdWx0ID0gZGVmYXVsdENvbXBhcmVyKGF2YWwsIGJ2YWwpO1xuICAgICAgICAgICAgICAgICAgICBpZiggY29tcFJlc3VsdCA9PT0gMSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXNjZW5kaW5nID8gLTEgOiAxO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYoIGNvbXBSZXN1bHQgPT09IC0xICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRlc2NlbmRpbmcgPyAxIDogLTE7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAkc2NvcGUucGFnZUxpbWl0RnVuID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBpZiggJGF0dHJzLnRzRGlzcGxheVBhZ2luYXRpb24gPT09ICdmYWxzZScgfHwgJHNjb3BlLnBhZ2luYXRpb24udGVtcGxhdGUgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vcGFnaW5hdGlvbiBpcyBkaXNhYmxlZCBvbiB0aGlzIHRhYmxlIG9yIHRoZXJlIGlzIG5vIHRlbXBsYXRlLCBzbyByZXR1cm4gZXZlcnl0aGluZ1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vT25seSByZXR1cm4gdGhlIGl0ZW1zIHRoYXQgYXJlIGluIHRoZSBjb3JyZWN0IGluZGV4IHJhbmdlIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIHBhZ2VcbiAgICAgICAgICAgICAgICB2YXIgYmVnaW4gPSAoJHNjb3BlLnBhZ2luYXRpb24uY3VycmVudFBhZ2UgLSAxKSAqICRzY29wZS5wYWdpbmF0aW9uLnBlclBhZ2U7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9ICRzY29wZS5wYWdpbmF0aW9uLmN1cnJlbnRQYWdlICogJHNjb3BlLnBhZ2luYXRpb24ucGVyUGFnZTtcbiAgICAgICAgICAgICAgICB2YXIgZmluYWw9W107XG4gICAgICAgICAgICAgICAgZm9yKCB2YXIgaT0wOyBpIDwgYXJyYXkubGVuZ3RoOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKCBpID49IGJlZ2luICYmIGkgPCBlbmQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbC5wdXNoKGFycmF5W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZmluYWw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB2YXIgJHBhZ2luYXRpb25IdG1sO1xuICAgICAgICAgICAgaWYoICRhdHRycy50c0Rpc3BsYXlQYWdpbmF0aW9uICE9PSAnZmFsc2UnICYmICRzY29wZS5wYWdpbmF0aW9uLnRlbXBsYXRlICE9PSAnJyApIHtcbiAgICAgICAgICAgICAgICB2YXIgcGFnZXJTdHJpbmcgPSByZXBsYWNlVGVtcGxhdGVUb2tlbnMoJHNjb3BlLCAkc2NvcGUucGFnaW5hdGlvbi50ZW1wbGF0ZSk7XG4gICAgICAgICAgICAgICAgJHBhZ2luYXRpb25IdG1sID0gJGNvbXBpbGUocGFnZXJTdHJpbmcpKCRzY29wZSk7XG4gICAgICAgICAgICAgICAgLy9BZGQgcGFnaW5hdGlvbiBIVE1MIEFGVEVSIHRoZSB0YWJsZVxuICAgICAgICAgICAgICAgICRlbGVtZW50LmFmdGVyKCRwYWdpbmF0aW9uSHRtbCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICB2YXIgJHdyYXBwaW5nRWxlbWVudDtcbiAgICAgICAgICAgIGlmKCAkc2NvcGUud3JhcHBpbmdFbGVtZW50Q2xhc3MgJiYgJHNjb3BlLndyYXBwaW5nRWxlbWVudENsYXNzICE9PSBcIlwiICkge1xuICAgICAgICAgICAgICAgIC8vVGhpcyBzaG91bGQgaGFwcGVuIEFGVEVSIHRoZSBmaWx0ZXJpbmcgYW5kIHBhZ2luYXRpb24gSFRNTCBhcmUgc2V0XG4gICAgICAgICAgICAgICAgJHdyYXBwaW5nRWxlbWVudCA9ICRlbGVtZW50LndyYXAoXCI8ZGl2IGNsYXNzPSdcIisgJHNjb3BlLndyYXBwaW5nRWxlbWVudENsYXNzICtcIicgLz5cIik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmKCAkYXR0cnMudHNHZXRUYWJsZURhdGFGdW5jdGlvbiApIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0dGVyID0gJHBhcnNlKCRhdHRycy50c0dldFRhYmxlRGF0YUZ1bmN0aW9uKTtcbiAgICAgICAgICAgICAgICB2YXIgc2V0dGVyID0gZ2V0dGVyLmFzc2lnbjtcblxuICAgICAgICAgICAgICAgIC8vSWYgdGhpcyBhdHRyaWJ1dGUgaGFzIGEgdmFsdWUsIHRoZW4gd2Ugd2FudCB0byB0dXJuIGl0IGludG8gYSBmdW5jdGlvbiBvbiB0aGUgcGFyZW50IHNjb3BlXG4gICAgICAgICAgICAgICAgLy9zbyB0aGF0IGl0IGNhbiBiZSBwYXNzZWQgaW50byBvdGhlciBmdW5jdGlvbnMgYW5kIHJ1biBvbiB0aGUgcGFyZW50IGNvbnRyb2xsZXJzIGFzIG5lZWRlZFxuICAgICAgICAgICAgICAgIHZhciBmbiAgPSBmdW5jdGlvbiggc2hvdWxkQXBwbHlTb3J0aW5nLCBzaG91bGRBcHBseUZpbHRlcmluZywgbGltaXRUb0N1cnJlbnRQYWdlT25seSApIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9ICRwYXJzZSgkc2NvcGUuaXRlbXNBcnJheUV4cHJlc3Npb24pKCRzY29wZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIHNob3VsZEFwcGx5U29ydGluZyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9IGFyci5zb3J0KCRzY29wZS5zb3J0RnVuKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmKCBzaG91bGRBcHBseUZpbHRlcmluZyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFyciA9ICRzY29wZS5maWx0ZXJMaW1pdEZ1bihhcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYoIGxpbWl0VG9DdXJyZW50UGFnZU9ubHkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcnIgPSAkc2NvcGUucGFnZUxpbWl0RnVuKGFycik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBzZXR0ZXIoJHNjb3BlLiRwYXJlbnQsIGZuKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgJHNjb3BlLiRvbiggJyRkZXN0cm95JywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy9XaGVuIHRoZSBkaXJlY3RpdmUgaXMgZGVzdHJveWVkLCBhbHNvIHJlbW92ZSB0aGUgZmlsdGVyICYgcGFnaW5hdGlvbiBIVE1MXG4gICAgICAgICAgICAgICAgaWYoICRmaWx0ZXJIdG1sICkge1xuICAgICAgICAgICAgICAgICAgICAkZmlsdGVySHRtbC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYoICRwYWdpbmF0aW9uSHRtbCApIHtcbiAgICAgICAgICAgICAgICAgICAgJHBhZ2luYXRpb25IdG1sLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiggJHdyYXBwaW5nRWxlbWVudCApIHtcbiAgICAgICAgICAgICAgICAgICAgLy91bi13cmFwIHRoZSB0YWJsZSBmcm9tIHRoaXMgZWxlbWVudFxuICAgICAgICAgICAgICAgICAgICAkd3JhcHBpbmdFbGVtZW50LnJlcGxhY2VXaXRoKCRlbGVtZW50KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XSk7XG5cbnRhYmxlU29ydE1vZHVsZS5kaXJlY3RpdmUoICd0c0NyaXRlcmlhJywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWlyZTogXCJedHNXcmFwcGVyXCIsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgdHNPcmRlckJ5OiAnPSdcbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0c1dyYXBwZXJDdHJsKSB7XG4gICAgICAgICAgICB2YXIgY2xpY2tpbmdDYWxsYmFjayA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoIGV2ZW50LnNoaWZ0S2V5ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHNXcmFwcGVyQ3RybC5hZGRTb3J0RmllbGQoYXR0cnMudHNDcml0ZXJpYSwgZWxlbWVudCwgYXR0cnMudHNOYW1lLCBzY29wZS50c09yZGVyQnkpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHNXcmFwcGVyQ3RybC5zZXRTb3J0RmllbGQoYXR0cnMudHNDcml0ZXJpYSwgZWxlbWVudCwgYXR0cnMudHNOYW1lLCBzY29wZS50c09yZGVyQnkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGVsZW1lbnQuYmluZCggJ2NsaWNrJywgY2xpY2tpbmdDYWxsYmFjayApO1xuICAgICAgICAgICAgZWxlbWVudC5hZGRDbGFzcyggJ3RhYmxlc29ydC1zb3J0YWJsZScgKTtcbiAgICAgICAgICAgIGlmKCAndHNEZWZhdWx0JyBpbiBhdHRycyAmJiBhdHRycy50c0RlZmF1bHQgIT09ICcwJyApIHtcbiAgICAgICAgICAgICAgICB0c1dyYXBwZXJDdHJsLmFkZFNvcnRGaWVsZCggYXR0cnMudHNDcml0ZXJpYSwgZWxlbWVudCwgYXR0cnMudHNOYW1lLCBzY29wZS50c09yZGVyQnkgKTtcbiAgICAgICAgICAgICAgICBpZiggYXR0cnMudHNEZWZhdWx0ID09PSAnZGVzY2VuZGluZycgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRzV3JhcHBlckN0cmwuYWRkU29ydEZpZWxkKCBhdHRycy50c0NyaXRlcmlhLCBlbGVtZW50LCBhdHRycy50c05hbWUsIHNjb3BlLnRzT3JkZXJCeSApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmKCAndHNGaWx0ZXInIGluIGF0dHJzKSB7XG4gICAgICAgICAgICAgICAgdHNXcmFwcGVyQ3RybC5hZGRGaWx0ZXJGaWVsZCggYXR0cnMudHNDcml0ZXJpYSwgZWxlbWVudCApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHNXcmFwcGVyQ3RybC5yZWdpc3RlckhlYWRpbmcoIGVsZW1lbnQgKTtcbiAgICAgICAgfVxuICAgIH07XG59KTtcblxudGFibGVTb3J0TW9kdWxlLmRpcmVjdGl2ZSggJ3RzUmVwZWF0JywgWyckY29tcGlsZScsICckaW50ZXJwb2xhdGUnLCBmdW5jdGlvbigkY29tcGlsZSwgJGludGVycG9sYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGVybWluYWw6IHRydWUsXG4gICAgICAgIG11bHRpRWxlbWVudDogdHJ1ZSxcbiAgICAgICAgcmVxdWlyZTogJ150c1dyYXBwZXInLFxuICAgICAgICBwcmlvcml0eTogMTAwMDAwMCxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCB0c1dyYXBwZXJDdHJsKSB7XG4gICAgICAgICAgICB2YXIgcmVwZWF0QXR0cnMgPSBbJ25nLXJlcGVhdCcsICdkYXRhLW5nLXJlcGVhdCcsICduZy1yZXBlYXQtc3RhcnQnLCAnZGF0YS1uZy1yZXBlYXQtc3RhcnQnXTtcbiAgICAgICAgICAgIHZhciBuZ1JlcGVhdERpcmVjdGl2ZSA9IHJlcGVhdEF0dHJzWzBdO1xuICAgICAgICAgICAgdmFyIHRzUmVwZWF0RGlyZWN0aXZlID0gJ3RzLXJlcGVhdCc7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcGVhdEF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNEZWZpbmVkKGVsZW1lbnQuYXR0cihyZXBlYXRBdHRyc1tpXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgIG5nUmVwZWF0RGlyZWN0aXZlID0gcmVwZWF0QXR0cnNbaV07XG4gICAgICAgICAgICAgICAgICAgIHRzUmVwZWF0RGlyZWN0aXZlID0gbmdSZXBlYXREaXJlY3RpdmUucmVwbGFjZSgvXihkYXRhLSk/bmcvLCAnJDF0cycpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB0c0V4cHIgPSAndGFibGVzb3J0T3JkZXJCeTpzb3J0RnVuIHwgdGFibGVzb3J0TGltaXQ6ZmlsdGVyTGltaXRGdW4gfCB0YWJsZXNvcnRMaW1pdDpwYWdlTGltaXRGdW4nO1xuICAgICAgICAgICAgdmFyIHJlcGVhdEV4cHIgPSBlbGVtZW50LmF0dHIobmdSZXBlYXREaXJlY3RpdmUpO1xuICAgICAgICAgICAgdmFyIHJlcGVhdEV4cHJSZWdleCA9IC9eXFxzKihbXFxzXFxTXSs/KVxccytpblxccysoW1xcc1xcU10rPykoXFxzK3RyYWNrXFxzK2J5XFxzK1tcXHNcXFNdKz8pP1xccyokLztcbiAgICAgICAgICAgIHZhciB0cmFja0J5TWF0Y2ggPSByZXBlYXRFeHByLm1hdGNoKC9cXHMrdHJhY2tcXHMrYnlcXHMrXFxTKz9cXC4oXFxTKykvKTtcbiAgICAgICAgICAgIHZhciByZXBlYXRJbk1hdGNoID0gcmVwZWF0RXhwci5tYXRjaChyZXBlYXRFeHByUmVnZXgpO1xuICAgICAgICAgICAgaWYgKHRyYWNrQnlNYXRjaCkge1xuICAgICAgICAgICAgICAgIHRzV3JhcHBlckN0cmwuc2V0VHJhY2tCeSh0cmFja0J5TWF0Y2hbMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvL0xpbWl0IFNvcnQgdGhlIHJlc3VsdHMsIHRoZW4gbGltaXQgdGhlbSB0byBvbmx5IGluY2x1ZGUgd2hhdCBtYXRjaGVzIHRoZSBmaWx0ZXIsIHRoZW4gb25seSB3aGF0J3Mgb24gdGhlIGN1cnJlbnQgcGFnZVxuICAgICAgICAgICAgaWYgKHJlcGVhdEV4cHIuc2VhcmNoKC90YWJsZXNvcnQvKSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICByZXBlYXRFeHByID0gcmVwZWF0RXhwci5yZXBsYWNlKC90YWJsZXNvcnQvLCB0c0V4cHIpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFja0J5TWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgLy9Nb3ZlIHRoZSAndHJhY2sgYnknJyBzdGF0ZW1lbnQgdG8gdGhlIGVuZFxuICAgICAgICAgICAgICAgICAgICByZXBlYXRFeHByID0gcmVwZWF0RXhwci5yZXBsYWNlKHRyYWNrQnlNYXRjaFswXSwgJycpICsgdHJhY2tCeU1hdGNoWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVwZWF0RXhwciA9IHJlcGVhdEV4cHIucmVwbGFjZShyZXBlYXRFeHByUmVnZXgsICckMSBpbiAkMiB8ICcgKyB0c0V4cHIgKyAnJDMnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNVbmRlZmluZWQoYXR0cnMudHNIaWRlTm9EYXRhKSkge1xuICAgICAgICAgICAgICAgIHZhciBzdGFydFN5bSA9ICRpbnRlcnBvbGF0ZS5zdGFydFN5bWJvbCgpO1xuICAgICAgICAgICAgICAgIHZhciBlbmRTeW0gPSAkaW50ZXJwb2xhdGUuZW5kU3ltYm9sKCk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbm9EYXRhUm93ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0pLmNsb25lKCk7XG4gICAgICAgICAgICAgICAgbm9EYXRhUm93LnJlbW92ZUF0dHIobmdSZXBlYXREaXJlY3RpdmUpO1xuICAgICAgICAgICAgICAgIG5vRGF0YVJvdy5yZW1vdmVBdHRyKHRzUmVwZWF0RGlyZWN0aXZlKTtcbiAgICAgICAgICAgICAgICBub0RhdGFSb3cuYWRkQ2xhc3MoICdzaG93SWZMYXN0JyApO1xuICAgICAgICAgICAgICAgIG5vRGF0YVJvdy5jaGlsZHJlbigpLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgIG5vRGF0YVJvdy5hcHBlbmQoICc8dGQgY29sc3Bhbj1cIicgKyBlbGVtZW50WzBdLmNoaWxkRWxlbWVudENvdW50ICsgJ1wiPicgKyBzdGFydFN5bSArICdub0RhdGFUZXh0JyArIGVuZFN5bSArICc8L3RkPicgKTtcbiAgICAgICAgICAgICAgICBub0RhdGFSb3cgPSAkY29tcGlsZShub0RhdGFSb3cpKHNjb3BlKTtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhcmVudCgpLnByZXBlbmQobm9EYXRhUm93KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy9wYXNzIHRoZSBgaXRlbXNMaXN0YCBmcm9tIGBpdGVtIGluIGl0ZW1zTGlzdGAgdG8gdGhlIG1hc3RlciBkaXJlY3RpdmUgYXMgYSBzdHJpbmcgc28gaXQgY2FuIGJlIHVzZWQgaW4gZXhwcmVzc2lvbnNcbiAgICAgICAgICAgIHRzV3JhcHBlckN0cmwuc2V0QXJyYXlFeHByKHJlcGVhdEluTWF0Y2hbMl0pO1xuXG4gICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXSkuYXR0cihuZ1JlcGVhdERpcmVjdGl2ZSwgcmVwZWF0RXhwcik7XG4gICAgICAgICAgICAkY29tcGlsZShlbGVtZW50LCBudWxsLCAxMDAwMDAwKShzY29wZSk7XG4gICAgICAgIH1cbiAgICB9O1xufV0pO1xuXG50YWJsZVNvcnRNb2R1bGUuZmlsdGVyKCAndGFibGVzb3J0TGltaXQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyYXksIGxpbWl0RnVuKSB7XG4gICAgaWYoIWFycmF5KSByZXR1cm47XG4gICAgcmV0dXJuIGxpbWl0RnVuKGFycmF5KTtcbiAgICB9O1xufSApO1xuXG50YWJsZVNvcnRNb2R1bGUuZmlsdGVyKCAndGFibGVzb3J0T3JkZXJCeScsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgc29ydGZ1biApIHtcbiAgICAgICAgaWYoIWFycmF5KSByZXR1cm47XG4gICAgICAgIHZhciBhcnJheUNvcHkgPSBhcnJheS5jb25jYXQoKTtcbiAgICAgICAgcmV0dXJuIGFycmF5Q29weS5zb3J0KCBzb3J0ZnVuICk7XG4gICAgfTtcbn0gKTtcblxudGFibGVTb3J0TW9kdWxlLmZpbHRlciggJ3BhcnNlSW50JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludCggaW5wdXQgKSB8fCBudWxsO1xuICAgIH07XG59ICk7XG5cbnRhYmxlU29ydE1vZHVsZS5maWx0ZXIoICdwYXJzZUZsb2F0JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBwYXJzZUZsb2F0KCBpbnB1dCApIHx8IG51bGw7XG4gICAgfTtcbn0gKTtcblxudGFibGVTb3J0TW9kdWxlLmZpbHRlciggJ3BhcnNlRGF0ZScsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHZhciB0aW1lc3RhbXAgPSBEYXRlLnBhcnNlKGlucHV0KTtcbiAgICAgICAgcmV0dXJuIGlzTmFOKHRpbWVzdGFtcCkgPyBudWxsIDogdGltZXN0YW1wO1xuICAgIH07XG59ICk7XG4iXX0=
